/*
Type: PE
Platform: windows-x86_64
Architecture: x86_64

Libraries: 
  KERNEL32.dll
  USER32.dll

Compiler(s) Used: 
  Imported Functions (22 objects)
  VS2008 v9.0 SP1 build 30729 and VS2013 v12.0 UPD4 build 31101 (5 objects)
  VS2022 17.1.6 build 31107 (17 objects)

Segments:
r--  0x140000000-0x140000400 
r-x  0x140001000-0x1400056f0  {Code}
r--  0x140006000-0x14000699c  {Data}
rw-  0x140007000-0x1400074a0  {Data}
r--  0x140008000-0x1400082ac  {Data}
r--  0x140009000-0x1400091e0  {Data}
r--  0x14000a000-0x14000a010  {Data}
r--  0x14000b000-0x14000c5ef  {Data}
---  0x14000c5f0-0x14000c6a0 
---  0x14000c6a0-0x14000c6c8 

Sections:
0x140001000-0x1400056f0  .text  {Code}
0x140006000-0x14000699c  .rdata  {Read-only data}
0x140007000-0x1400074a0  .data  {Writable data}
0x140008000-0x1400082ac  .pdata  {Read-only data}
0x140009000-0x1400091e0  .rsrc  {Read-only data}
0x14000a000-0x14000a010  .reloc  {Read-only data}
0x14000b000-0x14000c5ef  .ATOM  {Read-only data}
0x14000c5f0-0x14000c6a0  .extern  {External}
0x14000c6a0-0x14000c6c8  .synthetic_builtins  {External}
*/
struct DOS_Header __dos_header = 
{
    char e_magic[0x2] = "MZ"
    uint16_t e_cblp = 0x90
    uint16_t e_cp = 0x3
    uint16_t e_crlc = 0x0
    uint16_t e_cparhdr = 0x4
    uint16_t e_minalloc = 0x0
    uint16_t e_maxalloc = 0xffff
    uint16_t e_ss = 0x0
    uint16_t e_sp = 0xb8
    uint16_t e_csum = 0x0
    uint16_t e_ip = 0x0
    uint16_t e_cs = 0x0
    uint16_t e_lfarlc = 0x40
    uint16_t e_ovno = 0x0
    char e_res1[0x8] = "\x00\x00\x00\x00\x00\x00\x00", 0
    uint16_t e_oemid = 0x0
    uint16_t e_oeminfo = 0x0
    char e_res2[0x14] = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 0
    uint32_t e_lfanew = 0xe0
}

__dos_stub:
0e 1f ba 0e 00 b4 09 cd 21 b8 01 4c cd 21 54 68 69 73 20 70 72 6f 67 72 61 6d 20 63 61 6e 6e 6f  ........!..L.!This program canno
74 20 62 65 20 72 75 6e 20 69 6e 20 44 4f 53 20 6d 6f 64 65 2e 0d 0d 0a 24 00 00 00 00 00 00 00  t be run in DOS mode....$.......

struct Rich_Header __rich_header = 
{
    uint32_t e_magic__DanS = 0x6cd408bd
    uint32_t e_align[0x3] = 
    {
        [0x0] =  0x3fba69f9
        [0x1] =  0x3fba69f9
        [0x2] =  0x3fba69f9
    }
    uint32_t e_entry_id0__0101784b = 0x3ebb11b2
    uint32_t e_entry_count0__5 = 0x3fba69fc
    uint32_t e_entry_id1__00010000 = 0x3fbb69f9
    uint32_t e_entry_count1__22 = 0x3fba69ef
    uint32_t e_entry_id2__01037983 = 0x3eb9107a
    uint32_t e_entry_count2__1 = 0x3fba69f8
    uint32_t e_entry_id3__01047983 = 0x3ebe107a
    uint32_t e_entry_count3__13 = 0x3fba69f4
    uint32_t e_entry_id4__01007983 = 0x3eba107a
    uint32_t e_entry_count4__1 = 0x3fba69f8
    uint32_t e_entry_id5__00ff7983 = 0x3f45107a
    uint32_t e_entry_count5__1 = 0x3fba69f8
    uint32_t e_entry_id6__01027983 = 0x3eb8107a
    uint32_t e_entry_count6__1 = 0x3fba69f8
    char e_magic[0x4] = "Rich"
    uint32_t e_checksum = 0x3fba69f9
}

                                                00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

struct COFF_Header __coff_header = 
{
    char magic[0x4] = "PE\x00", 0
    enum coff_machine machine = IMAGE_FILE_MACHINE_AMD64
    uint16_t numberOfSections = 0x7
    uint32_t timeDateStamp = 0x632f0f7f
    uint32_t pointerToSymbolTable = 0x0
    uint32_t numberOfSymbols = 0x0
    uint16_t sizeOfOptionalHeader = 0xf0
    enum coff_characteristics characteristics = IMAGE_FILE_EXECUTABLE_IMAGE | IMAGE_FILE_LARGE_ADDRESS_AWARE
}
struct PE64_Optional_Header __pe64_optional_header = 
{
    enum pe_magic magic = PE_64BIT
    uint8_t majorLinkerVersion = 0xe
    uint8_t minorLinkerVersion = 0x1f
    uint32_t sizeOfCode = 0x4800
    uint32_t sizeOfInitializedData = 0x1800
    uint32_t sizeOfUninitializedData = 0x0
    uint32_t addressOfEntryPoint = 0x1bf0
    uint32_t baseOfCode = 0x1000
    uint64_t imageBase = 0x140000000
    uint32_t sectionAlignment = 0x1000
    uint32_t fileAlignment = 0x200
    uint16_t majorOperatingSystemVersion = 0x6
    uint16_t minorOperatingSystemVersion = 0x0
    uint16_t majorImageVersion = 0x0
    uint16_t minorImageVersion = 0x0
    uint16_t majorSubsystemVersion = 0x6
    uint16_t minorSubsystemVersion = 0x0
    uint32_t win32VersionValue = 0x0
    uint32_t sizeOfImage = 0xd000
    uint32_t sizeOfHeaders = 0x400
    uint32_t checkSum = 0x0
    enum pe_subsystem subsystem = IMAGE_SUBSYSTEM_WINDOWS_CUI
    enum pe_dll_characteristics dllCharacteristics = IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA | IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE | IMAGE_DLLCHARACTERISTICS_NX_COMPAT | IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE
    uint64_t sizeOfStackReserve = 0x100000
    uint64_t sizeOfStackCommit = 0x1000
    uint64_t sizeOfHeapReserve = 0x100000
    uint64_t sizeOfHeapCommit = 0x1000
    uint32_t loaderFlags = 0x0
    uint32_t numberOfRvaAndSizes = 0x10
    struct PE_Data_Directory_Entry exportTableEntry = 
    {
        uint32_t virtualAddress = 0x6660
        uint32_t size = 0x7c
    }
    struct PE_Data_Directory_Entry importTableEntry = 
    {
        uint32_t virtualAddress = 0x66dc
        uint32_t size = 0x3c
    }
    struct PE_Data_Directory_Entry resourceTableEntry = 
    {
        uint32_t virtualAddress = 0x9000
        uint32_t size = 0x1e0
    }
    struct PE_Data_Directory_Entry exceptionTableEntry = 
    {
        uint32_t virtualAddress = 0x8000
        uint32_t size = 0x2ac
    }
    struct PE_Data_Directory_Entry certificateTableEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry baseRelocationTableEntry = 
    {
        uint32_t virtualAddress = 0xa000
        uint32_t size = 0x10
    }
    struct PE_Data_Directory_Entry debugEntry = 
    {
        uint32_t virtualAddress = 0x6130
        uint32_t size = 0x38
    }
    struct PE_Data_Directory_Entry architectureEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry globalPtrEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry tlsTableEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry loadConfigTableEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry boundImportEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry iatEntry = 
    {
        uint32_t virtualAddress = 0x6000
        uint32_t size = 0xc0
    }
    struct PE_Data_Directory_Entry delayImportDescriptorEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry clrRuntimeHeaderEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
    struct PE_Data_Directory_Entry reservedEntry = 
    {
        uint32_t virtualAddress = 0x0
        uint32_t size = 0x0
    }
}
struct Section_Header __section_headers[0x7] = 
{
    [0x0] = 
    {
        char name[0x8] = ".text\x00\x00", 0
        uint32_t virtualSize = 0x46f0
        uint32_t virtualAddress = 0x1000
        uint32_t sizeOfRawData = 0x4800
        uint32_t pointerToRawData = 0x400
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ
    }
    [0x1] = 
    {
        char name[0x8] = ".rdata\x00", 0
        uint32_t virtualSize = 0x99c
        uint32_t virtualAddress = 0x6000
        uint32_t sizeOfRawData = 0xa00
        uint32_t pointerToRawData = 0x4c00
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ
    }
    [0x2] = 
    {
        char name[0x8] = ".data\x00\x00", 0
        uint32_t virtualSize = 0x4a0
        uint32_t virtualAddress = 0x7000
        uint32_t sizeOfRawData = 0x200
        uint32_t pointerToRawData = 0x5600
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE
    }
    [0x3] = 
    {
        char name[0x8] = ".pdata\x00", 0
        uint32_t virtualSize = 0x2ac
        uint32_t virtualAddress = 0x8000
        uint32_t sizeOfRawData = 0x400
        uint32_t pointerToRawData = 0x5800
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ
    }
    [0x4] = 
    {
        char name[0x8] = ".rsrc\x00\x00", 0
        uint32_t virtualSize = 0x1e0
        uint32_t virtualAddress = 0x9000
        uint32_t sizeOfRawData = 0x200
        uint32_t pointerToRawData = 0x5c00
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ
    }
    [0x5] = 
    {
        char name[0x8] = ".reloc\x00", 0
        uint32_t virtualSize = 0x10
        uint32_t virtualAddress = 0xa000
        uint32_t sizeOfRawData = 0x200
        uint32_t pointerToRawData = 0x5e00
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_DISCARDABLE | IMAGE_SCN_MEM_READ
    }
    [0x6] = 
    {
        char name[0x8] = ".ATOM\x00\x00", 0
        uint32_t virtualSize = 0x15ef
        uint32_t virtualAddress = 0xb000
        uint32_t sizeOfRawData = 0x1600
        uint32_t pointerToRawData = 0x6000
        uint32_t pointerToRelocations = 0x0
        uint32_t pointerToLineNumbers = 0x0
        uint16_t numberOfRelocations = 0x0
        uint16_t numberOfLineNumbers = 0x0
        enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ
    }
}

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

.text section started  {0x140001000-0x1400056f0}

int64_t free(int64_t arg1)

int64_t arg1  {Register rcx}

{
    /* tailcall */
    return HeapFree(GetProcessHeap(), HEAP_NONE, arg1);
}

         cc cc cc cc cc cc cc cc cc cc cc cc cc                                                     .............

int64_t sub_140001030(int64_t* arg1, int64_t arg2, int64_t* arg3)

int32_t arg_8  {Frame offset 8}
int64_t* arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t* arg3  {Register r8}
int64_t i  {Register r9}
int64_t r11_1  {Register r11}

{
    int64_t i = arg1[1];
    
    if (i >= *(uint64_t*)arg3)
        i = *(uint64_t*)arg3;
    
    if (i != 0)
    {
        int64_t r11_1 = *(uint64_t*)arg1;
        arg_8 = 0;
        
        if (0 < i)
        {
            do
            {
                *(uint8_t*)(((int64_t)arg_8) + arg2) = *(uint8_t*)(((int64_t)arg_8) + r11_1);
                arg_8 += 1;
            } while (((int64_t)arg_8) < i);
        }
        
        *(uint64_t*)arg1 += i;
        arg1[1] -= i;
    }
    
    *(uint64_t*)arg3 = i;
    return 0;
}

                                                                        cc cc cc cc cc cc cc cc                          ........

int64_t malloc(uint64_t arg1)

uint64_t arg1  {Register rcx}

{
    /* tailcall */
    return HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, arg1);
}

                  cc cc cc cc cc cc cc cc cc cc                                                        ..........

int64_t sub_1400010d0(int64_t arg1, int64_t arg2, int64_t arg3)

int32_t arg_8  {Frame offset 8}
int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}

{
    arg_8 = 0;
    
    if (0 < arg3)
    {
        do
        {
            *(uint8_t*)(((int64_t)arg_8) + arg1) = *(uint8_t*)(((int64_t)arg_8) + arg2);
            arg_8 += 1;
        } while (((int64_t)arg_8) < arg3);
    }
    
    return arg1;
}

                                                                              cc cc cc cc cc cc                            ......

int64_t sub_140001120(int64_t arg1, char arg2, int64_t arg3)

int64_t arg1  {Register rcx}
int64_t rcx_1  {Register rcx}
char arg2  {Register rdx}
int64_t rdi_2  {Register rdi}
int64_t arg3  {Register r8}

{
    int64_t rcx_1;
    int64_t rdi_2;
    
    if (arg3 != 0)
        rdi_2 = __memfill_u8(arg1, arg2, arg3);
    return arg1;
}

                     cc cc cc cc cc cc cc cc cc                                                         .........

int64_t sub_140001150(void* arg1, int64_t arg2, int64_t arg3)

int32_t arg_8  {Frame offset 8}
int64_t rax_1  {Register rax}
void* arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int64_t r8  {Register r8}

{
    if (arg3 != 0)
    {
        int64_t rax_1 = realloc(*(uint64_t*)((char*)arg1 + 0x10), (*(uint64_t*)((char*)arg1 + 0x18) + arg3));
        int64_t r8 = *(uint64_t*)((char*)arg1 + 0x18);
        *(uint64_t*)((char*)arg1 + 0x10) = rax_1;
        arg_8 = 0;
        
        if (0 < arg3)
        {
            do
            {
                *(uint8_t*)(((int64_t)arg_8) + (r8 + rax_1)) = *(uint8_t*)(((int64_t)arg_8) + arg2);
                arg_8 += 1;
            } while (((int64_t)arg_8) < arg3);
        }
        
        *(uint64_t*)((char*)arg1 + 0x18) += arg3;
    }
    
    return arg3;
}

                                                                                       cc cc cc                               ...

int64_t realloc(int64_t arg1, uint64_t arg2)

int32_t arg_10  {Frame offset 10}
uint64_t i  {Register rax}
int64_t rax_6  {Register rax}
int64_t arg1  {Register rcx}
uint64_t arg2  {Register rdx}
uint64_t rbx_1  {Register rbx}

{
    if (arg2 == 0)
        return 0;
    
    if (arg1 == 0)
        /* tailcall */
        return HeapAlloc(GetProcessHeap(), ((int32_t)(arg1 + 8)), arg2);
    
    uint64_t i = HeapSize(GetProcessHeap(), HEAP_NONE, arg1);
    
    if (i == arg2)
        return arg1;
    
    int64_t rax_6 = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, arg2);
    arg_10 = 0;
    
    if (0 < i)
    {
        do
        {
            *(uint8_t*)(((int64_t)arg_10) + rax_6) = *(uint8_t*)(((int64_t)arg_10) + arg1);
            arg_10 += 1;
        } while (((int64_t)arg_10) < i);
    }
    
    uint64_t rbx_1 = (i >> 2);
    
    if (rbx_1 != 0)
        sub_140001120(arg1, 0, (rbx_1 << 2));
    
    HeapFree(GetProcessHeap(), HEAP_NONE, arg1);
    return rax_6;
}

                                                                  cc cc cc cc cc cc cc cc cc cc                        ..........

uint64_t sub_140001300(int32_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t* arg5)

int64_t var_28  {Frame offset -28}
int64_t var_20  {Frame offset -20}
int64_t lpMem  {Frame offset -18}
int64_t var_10  {Frame offset -10}
void* arg_10  {Frame offset 10}
int64_t* arg5  {Frame offset 28}
void* rax  {Register rax}
int32_t rax_1  {Register rax}
int32_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int64_t* arg4  {Register r9}

{
    void* rax = sub_1400022a0();
    int64_t lpMem = 0;
    int64_t var_10 = 0;
    arg_10 = rax;
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int32_t rax_1 = sub_140002320(rax, sub_140001030, &var_28, sub_140001150, &var_28, arg1);
    
    if (rax_1 == 0)
    {
        sub_1400022f0(&arg_10);
        *(uint64_t*)arg4 = lpMem;
        *(uint64_t*)arg5 = var_10;
        return 0;
    }
    
    if (lpMem != 0)
        HeapFree(GetProcessHeap(), HEAP_NONE, lpMem);
    
    sub_1400022f0(&arg_10);
    return ((uint64_t)rax_1);
}

                                                               cc cc cc cc cc cc cc cc cc cc cc                       ...........

uint64_t strncmp(char* arg1, char* arg2)

char rax  {Register rax}
char* arg1  {Register rcx}
void* rcx  {Register rcx}
int32_t rcx_1  {Register rcx}
char* arg2  {Register rdx}
char r8  {Register r8}

{
    char rax = *(uint8_t*)arg1;
    char r8 = *(uint8_t*)arg2;
    
    if (rax == r8)
    {
        void* rcx = (arg1 - arg2);
        
        do
        {
            if (rax == 0)
                return 0;
            
            rax = *(uint8_t*)(((char*)rcx + arg2) + 1);
            arg2 = &arg2[1];
            r8 = *(uint8_t*)arg2;
        } while (rax == r8);
    }
    
    int32_t rcx_1 = 1;
    
    if (rax < r8)
        rcx_1 = -1;
    
    return ((uint64_t)rcx_1);
}

                                                                                 cc cc cc cc cc                             .....

int64_t sub_140001420(int16_t* arg1, char* arg2, int64_t arg3)

int16_t rax_1  {Register rax}
int16_t* arg1  {Register rcx}
char* arg2  {Register rdx}
int64_t arg3  {Register r8}
int32_t r9  {Register r9}
int32_t temp0_1  {Register temp0}

{
    int32_t r9 = ((int32_t)(arg3 - 1));
    
    if (r9 >= 0)
    {
        int32_t temp0_1;
        
        do
        {
            int16_t rax_1 = ((int16_t)*(uint8_t*)arg2);
            arg2 = &arg2[1];
            *(uint16_t*)arg1 = rax_1;
            arg1 = &arg1[1];
            
            if (rax_1 == 0)
                return ((arg3 - ((int64_t)r9)) - 1);
            
            temp0_1 = r9;
            r9 -= 1;
        } while ((temp0_1 - 1) >= 0);
    }
    
    return (arg3 - ((int64_t)r9));
}

                                                                                          cc cc                                ..

void* sub_140001460(char* arg1)

void* rax  {Register rax}
char* rax_1  {Register rax}
char* arg1  {Register rcx}
int32_t rbx  {Register rbx}

{
    int32_t rbx = 0;
    void* rax = sub_140001540(arg1);
    
    if (rax == 0)
        return rax;
    
    char* rax_1 = nullptr;
    
    do
    {
        if (*(uint8_t*)(rax_1 + arg1) == 0x2e)
            return ((uint64_t)rbx);
        
        rbx += 1;
        rax_1 = ((uint64_t)rbx);
    } while (rax_1 < rax);
    
    return rax_1;
}

                     cc cc cc cc cc cc cc cc cc                                                         .........

uint64_t sub_1400014b0(char* arg1)

void* i  {Register rax}
char* arg1  {Register rcx}
int32_t rcx  {Register rcx}
int32_t rdx  {Register rdx}
int32_t rbx  {Register rbx}
char* rdi  {Register rdi}

{
    char* rdi = arg1;
    int32_t rbx = 0;
    void* i = sub_140001540(arg1);
    int32_t rdx = 0;
    
    if (i != 0)
    {
        do
        {
            int32_t rcx = ((int32_t)*(uint8_t*)rdi);
            rdi = &rdi[1];
            rdx += 1;
            rbx = ((RORD(rbx, 7)) + rcx);
        } while (((int64_t)rdx) < i);
    }
    
    return ((uint64_t)rbx);
}

                                                         cc cc cc cc cc cc cc cc cc cc cc cc cc                     .............

void sub_140001500(int32_t* arg1, int64_t arg2)

int64_t rax  {Register rax}
int32_t rax_1  {Register rax}
int32_t* arg1  {Register rcx}
int64_t arg2  {Register rdx}

{
    *(uint64_t*)((char*)arg1 + 8) = arg2;
    
    if (arg2 == 0)
    {
        *(uint32_t*)arg1 = 0;
        return;
    }
    
    int64_t rax = -1;
    
    do
        rax += 1;
     while (*(uint16_t*)(arg2 + (rax << 1)) != 0);
    
    int32_t rax_1 = (rax * 2);
    
    if (rax_1 > 0xfffc)
        rax_1 = 0xfffc;
    
    *(uint16_t*)arg1 = rax_1;
    *(uint16_t*)((char*)arg1 + 2) = (rax_1 + 2);
}

                                                                                 cc cc cc cc cc                             .....

void* sub_140001540(char* arg1)

char* rax  {Register rax}
char* arg1  {Register rcx}

{
    char* rax = arg1;
    
    if (*(uint8_t*)arg1 != 0)
    {
        do
            rax = &rax[1];
         while (*(uint8_t*)rax != 0);
    }
    
    return (rax - arg1);
}

                                                            cc cc cc cc cc cc cc cc cc cc cc cc                      ............

int64_t sub_140001560(int16_t* arg1)

int16_t* rax  {Register rax}
int16_t* arg1  {Register rcx}

{
    int16_t* rax = arg1;
    
    if (*(uint16_t*)arg1 != 0)
    {
        do
            rax = &rax[1];
         while (*(uint16_t*)rax != 0);
    }
    
    return (((char*)rax - arg1) >> 1);
}

   cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                   ...............

uint64_t sub_140001590(int32_t arg1) __pure

int32_t arg1  {Register rcx}

{
    if ((arg1 - 0x61) > 0x19)
        return ((uint64_t)arg1);
    
    return ((uint64_t)(arg1 - 0x20));
}

                                                                                             cc                                 .

void sub_1400015a0(int64_t arg1, int64_t arg2)

int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
uint64_t rdx_1  {Register rdx}

{
    uint64_t rdx_1 = (arg2 >> 2);
    
    if (rdx_1 == 0)
        return;
    
    /* tailcall */
    return sub_140001120(arg1, 0, (rdx_1 << 2));
}

                                                                        cc cc cc cc cc cc cc cc                          ........

int16_t* sub_1400015c0(int16_t* arg1, int16_t* arg2)

int16_t i  {Register rax}
int16_t* arg1  {Register rcx}
int16_t* arg2  {Register rdx}
int16_t* rdx  {Register rdx}

{
    if ((arg1 != 0 && arg2 != 0))
    {
        while (*(uint16_t*)arg1 != 0)
            arg1 = &arg1[1];
        
        int16_t i = *(uint16_t*)arg2;
        
        if (i != 0)
        {
            int16_t* rdx = ((char*)arg2 - arg1);
            
            do
            {
                *(uint16_t*)arg1 = i;
                arg1 = &arg1[1];
                i = *(uint16_t*)((char*)rdx + arg1);
            } while (i != 0);
        }
        
        *(uint16_t*)arg1 = 0;
    }
    
    return arg1;
}

                           cc cc cc cc cc cc cc                                                           .......

int16_t* sub_140001610(int16_t* arg1, int16_t* arg2)

int16_t* rax_1  {Register rax}
int16_t* arg1  {Register rcx}
int16_t* arg2  {Register rdx}
int16_t i  {Register r8}

{
    if ((arg1 != 0 && (arg2 != 0 && arg1 != arg2)))
    {
        int16_t i = *(uint16_t*)arg2;
        int16_t* rax_1 = arg1;
        
        for (; i != 0; i = *(uint16_t*)(((char*)arg2 - arg1) + rax_1))
        {
            *(uint16_t*)rax_1 = i;
            rax_1 = &rax_1[1];
        }
        
        *(uint16_t*)rax_1 = 0;
    }
    
    return arg1;
}

                                    cc cc cc cc                                                              ....

int64_t sub_140001650(char* arg1)

void var_128  {Frame offset -128}
char rax_2  {Register rax}
int32_t rax_3  {Register rax}
char* arg1  {Register rcx}
uint64_t rbx_1  {Register rbx}
struct _LIST_ENTRY* Flink  {Register rsi}
int16_t* r14_1  {Register r14}
TEB* gsbase  {Register gsbase}

{
    if (arg1 != 0)
    {
        TEB* gsbase;
        
        for (struct _LIST_ENTRY* Flink = gsbase->ProcessEnvironmentBlock->Ldr->InMemoryOrderModuleList.Flink; Flink != 0; Flink = Flink->Flink)
        {
            int16_t* r14_1 = *(int64_t*)((char*)Flink + 0x50);
            
            if (r14_1 == 0)
                break;
            
            if (*(int64_t*)((char*)Flink + 0x48) < 0x103)
            {
                void var_128;
                sub_140001120(&var_128, 0, 0x104);
                uint64_t rbx_1 = 0;
                
                if (*(uint16_t*)r14_1 != 0)
                {
                    while (rbx_1 < 0x103)
                    {
                        char rax_2 = sub_140001590(((uint32_t)r14_1[rbx_1]));
                        r14_1 = *(int64_t*)((char*)Flink + 0x50);
                        *(uint8_t*)(&var_128 + rbx_1) = rax_2;
                        rbx_1 = ((uint64_t)(rbx_1 + 1));
                        
                        if (r14_1[rbx_1] == 0)
                            break;
                    }
                }
                
                *(uint8_t*)(&var_128 + rbx_1) = 0;
                int32_t rax_3 = sub_1400014b0(arg1);
                
                if (sub_1400014b0(&var_128) == rax_3)
                    return *(int64_t*)((char*)Flink + 0x20);
            }
        }
    }
    
    return 0;
}

                                 cc cc cc cc cc                                                             .....

char* sub_140001730(void* arg1, int32_t arg2)

void var_248  {Frame offset -248}
void var_138  {Frame offset -138}
void* rax_2  {Register rax}
int32_t rax_6  {Register rax}
int64_t rax_8  {Register rax}
void* arg1  {Register rcx}
int32_t rcx_2  {Register rcx}
int32_t arg2  {Register rdx}
uint64_t rdx  {Register rdx}
void* rbx_2  {Register rbx}
uint64_t rbx_3  {Register rbx}
int32_t rsi_1  {Register rsi}
void* rdi_2  {Register rdi}
int64_t r12_1  {Register r12}
void* r13_2  {Register r13}
char* result  {Register r14}

{
    if ((arg1 != 0 && arg2 != 0))
    {
        int64_t r12_1 = ((int64_t)*(uint32_t*)((char*)arg1 + 0x3c));
        void* rax_2 = (((uint64_t)*(uint32_t*)((r12_1 + arg1) + 0x88)) + arg1);
        void* rbx_2 = (((uint64_t)*(uint32_t*)((char*)rax_2 + 0x20)) + arg1);
        void* r13_2 = (((uint64_t)*(uint32_t*)((char*)rax_2 + 0x1c)) + arg1);
        int32_t rsi_1 = *(uint32_t*)((char*)rax_2 + 0x18);
        void* rdi_2 = (((uint64_t)*(uint32_t*)((char*)rax_2 + 0x24)) + arg1);
        
        if (rsi_1 == 0)
            return nullptr;
        
        int32_t rcx_2;
        uint64_t rdx;
        char* result;
        
        while (true)
        {
            rsi_1 -= 1;
            
            if (sub_1400014b0((((uint64_t)*(uint32_t*)rbx_2) + arg1)) == arg2)
            {
                rcx_2 = *(uint32_t*)((r12_1 + arg1) + 0x88);
                rdx = ((uint64_t)*(uint32_t*)((char*)r13_2 + (((uint64_t)*(uint16_t*)rdi_2) << 2)));
                result = (rdx + arg1);
                break;
            }
            
            rbx_2 += 4;
            rdi_2 += 2;
            
            if (rsi_1 == 0)
                return nullptr;
        }
        
        if ((rcx_2 > rdx || (rcx_2 + *(uint32_t*)((r12_1 + arg1) + 0x8c)) < rdx))
            return result;
        
        void var_248;
        sub_140001120(&var_248, 0, 0x104);
        void var_138;
        sub_140001120(&var_138, 0, 0x104);
        int32_t rax_6 = sub_140001460(result);
        
        if (rax_6 != 0)
        {
            uint64_t rbx_3 = ((uint64_t)rax_6);
            sub_1400010d0(&var_248, result, ((uint64_t)rax_6));
            sub_1400010d0(&var_138, ((rbx_3 + 1) + result), sub_140001540(&result[(1 + rbx_3)]));
            int64_t rax_8 = sub_140001900(&var_248);
            
            if (rax_8 != 0)
                return sub_140001730(rax_8, ((uint64_t)sub_1400014b0(&var_138)));
            
            return result;
        }
    }
    
    return nullptr;
}

                                       cc cc cc                                                               ...

int64_t sub_1400018b0()

int32_t var_28  {Frame offset -28}

{
    int32_t var_28;
    __builtin_memcpy(&var_28, "\xae\x44\x40\x01\x20\x73\x7c\xe6\x02\xda\x2e\xac\x8c\xec\x43\xd4\xb3\x00\xdd\x92\x86\x10\xd7\x12\xa4\x64\x3f\x7b", 0x1c);
    return sub_140004830(7, &var_28);
}

                                                                                 cc cc cc cc cc                             .....

int64_t sub_140001900(char* arg1)

int16_t var_228  {Frame offset -228}
int16_t var_226  {Frame offset -226}
int32_t var_224  {Frame offset -224}
void* var_220  {Frame offset -220}
void var_218  {Frame offset -218}
int64_t result  {Frame offset 10}
int16_t rax_1  {Register rax}
char* rax_3  {Register rax}
char* arg1  {Register rcx}

{
    int32_t var_224 = 0;
    void var_218;
    sub_140001120(&var_218, 0, 0x208);
    result = 0;
    sub_140001420(&var_218, arg1, sub_140001540(arg1));
    int16_t rax_1 = (sub_140001560(&var_218) * 2);
    int16_t var_228 = rax_1;
    int16_t var_226 = (rax_1 + 2);
    void* var_220 = &var_218;
    char* rax_3 = sub_140001730(sub_140001650("NTDLL.DLL"), 0xcc4c8b22);
    
    if ((rax_3 != 0 && rax_3(0, 0, &var_228, &result) >= 0))
        return result;
    
    return 0;
}


int64_t sub_1400019c0()

void var_268  {Frame offset -268}
int32_t var_258  {Frame offset -258}
int64_t var_250  {Frame offset -250}
void* var_248  {Frame offset -248}
int32_t var_240  {Frame offset -240}
int128_t var_238  {Frame offset -238}
void var_228  {Frame offset -228}
int32_t arg_8  {Frame offset 8}
int32_t arg_10  {Frame offset 10}

{
    arg_8 = 0;
    void var_228;
    sub_140001610(&var_228, u"\KnownDlls\");
    sub_1400015c0(&var_228, u"NTDLL.DLL");
    void var_268;
    sub_140001500(&var_268, &var_228);
    int32_t var_258 = 0x30;
    void* var_248 = &var_268;
    int64_t var_250 = 0;
    int32_t var_240 = 0x40;
    int128_t var_238 = {0};
    sub_140004bd0(0xc, &var_258, &arg_10);
    sub_140001650("NTDLL.DLL");
    return 0;
}

                                    cc cc cc cc                                                              ....

int64_t _start()

int64_t arg_8  {Frame offset 8}
int16_t* arg_10  {Frame offset 10}
int64_t lpMem  {Register rax}
struct _PEB* ProcessEnvironmentBlock  {Register rbx}
void* rbx_1  {Register rbx}
uint64_t rbx_2  {Register rbx}
void* ImageBaseAddress  {Register rbp}
int64_t rsi_1  {Register rsi}
int64_t i  {Register rdi}
uint64_t rdi_1  {Register rdi}
TEB* gsbase  {Register gsbase}

{
    TEB* gsbase;
    struct _PEB* ProcessEnvironmentBlock = gsbase->ProcessEnvironmentBlock;
    int64_t lpMem = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x400);
    
    if (GetLastError() != ERROR_IPSEC_IKE_SECLOADFAIL)
        HeapFree(GetProcessHeap(), HEAP_NONE, lpMem);
    else
    {
        ReleaseSRWLockExclusive(nullptr);
        ReleaseSRWLockShared(nullptr);
        SetCriticalSectionSpinCount(nullptr, 0);
        TryAcquireSRWLockExclusive(nullptr);
        WakeAllConditionVariable(nullptr);
        SetUnhandledExceptionFilter(nullptr);
        UnhandledExceptionFilter(nullptr);
        CheckMenuItem(nullptr, 0, 0);
        GetMenu(nullptr);
        GetSystemMenu(nullptr, 0);
        GetMenuItemID(nullptr, 0);
        EnableMenuItem(nullptr, 0, MF_BYCOMMAND);
        MessageBeep(MB_OK);
        GetLastError();
        MessageBoxW(nullptr, nullptr, nullptr, MB_OK);
        MessageBoxA(nullptr, nullptr, nullptr, MB_OK);
        UpdateWindow(nullptr);
        GetWindowContextHelpId(nullptr);
    }
    
    if ((ProcessEnvironmentBlock != 0 && ProcessEnvironmentBlock->OSMajorVersion == 0xa))
    {
        int64_t i = 0;
        arg_10 = nullptr;
        arg_8 = 0;
        void* ImageBaseAddress = ProcessEnvironmentBlock->ImageBaseAddress;
        int64_t rsi_1 = ((int64_t)*(uint32_t*)((char*)ImageBaseAddress + 0x3c));
        void* rbx_1 = (((char*)ImageBaseAddress + 0x108) + rsi_1);
        
        do
        {
            if (sub_1400014b0(rbx_1) == 0x9f520b2d)
            {
                uint64_t rdi_1 = ((uint64_t)*(uint32_t*)((char*)rbx_1 + 0xc));
                uint64_t rbx_2 = ((uint64_t)*(uint32_t*)((char*)rbx_1 + 0x10));
                
                if ((((rdi_1 != -(ImageBaseAddress) && rbx_2 != 0) && sub_1400018b0() != 0) && sub_140001300(1, (rdi_1 + ImageBaseAddress), ((uint64_t)rbx_2), &arg_10, &arg_8) == 0))
                {
                    sub_140001dc0(arg_10, arg_8);
                    return 0;
                }
                
                break;
            }
            
            rbx_1 += 0x28;
            i += 1;
        } while (i <= ((uint64_t)*(uint16_t*)((rsi_1 + ImageBaseAddress) + 6)));
    }
    
    return 0xffffffff;
}


void sub_140001dc0(int16_t* arg1, int64_t arg2)

int32_t var_a8_1  {Frame offset -a8}
void* var_98_1  {Frame offset -98}
void* rax  {Register rax}
void* rax_1  {Register rax}
int32_t* rax_4  {Register rax}
int64_t rax_9  {Register rax}
uint32_t rax_13  {Register rax}
void* rax_16  {Register rax}
void* rax_17  {Register rax}
void* rax_18  {Register rax}
char* rax_24  {Register rax}
int64_t rax_25  {Register rax}
int64_t i_4  {Register rax}
int16_t* arg1  {Register rcx}
int64_t* rcx_13  {Register rcx}
uint64_t rcx_14  {Register rcx}
uint64_t rcx_15  {Register rcx}
int32_t rcx_20  {Register rcx}
int64_t arg2  {Register rdx}
void* rdx_5  {Register rdx}
void* rdx_6  {Register rdx}
uint32_t rdx_8  {Register rdx}
int16_t* rdx_13  {Register rdx}
int64_t rdx_15  {Register rdx}
void* rdx_18  {Register rdx}
void* rbx_2  {Register rbx}
void* rbx_3  {Register rbx}
void* rbx_5  {Register rbx}
int32_t i_3  {Register rbx}
int64_t* rbx_6  {Register rbx}
void* rbx_8  {Register rbx}
int32_t rbp_2  {Register rbp}
int32_t i  {Register rsi}
void* rsi_1  {Register rsi}
void** rsi_2  {Register rsi}
void* rdi_1  {Register rdi}
int32_t* i_5  {Register r8}
uint32_t r9_1  {Register r9}
int32_t r9_6  {Register r9}
void* i_2  {Register r10}
void* r11_2  {Register r11}
int64_t i_1  {Register r12}
void* r13_1  {Register r13}
uint64_t r13_2  {Register r13}
void* r14_2  {Register r14}
void** r14_3  {Register r14}
void* r15_1  {Register r15}
uint64_t r15_2  {Register r15}

{
    if (arg1 != 0)
    {
        int64_t i_1 = 0;
        
        if ((arg2 != 0 && *(uint16_t*)arg1 == 0x5a4d))
        {
            void* r14_2 = (((int64_t)*(uint32_t*)((char*)arg1 + 0x3c)) + arg1);
            
            if (*(uint32_t*)r14_2 == 0x4550)
            {
                void* r13_1 = ((char*)r14_2 + 0xb0);
                void* r15_1 = ((char*)r14_2 + 0x90);
                void* var_98_1 = r15_1;
                
                if ((r14_2 != 0 && (r15_1 != 0 && (r14_2 != -0xd0 && (r13_1 != 0 && (r14_2 != -0xa0 && r14_2 != -0x108))))))
                {
                    sub_140004d60(0, *(uint64_t*)((char*)r14_2 + 0x30), nullptr);
                    int32_t var_a8_1 = 0;
                    void* rax_1 = sub_1400048d0(0, *(uint64_t*)((char*)r14_2 + 0x30), ((uint64_t)*(uint32_t*)((char*)r14_2 + 0x50)), 0, 0, nullptr);
                    void* rdi_1 = rax_1;
                    void* rax;
                    
                    if (rax_1 == 0)
                    {
                        rax = Concurrency::details::ThreadProxyFactory<class Concurrency::details::FreeThreadProxy>::ReclaimProxy(((uint64_t)*(uint32_t*)((char*)r14_2 + 0x50)), nullptr);
                        rdi_1 = rax;
                    }
                    
                    if ((rax_1 != 0 || rax != 0))
                    {
                        sub_1400010d0(rdi_1, arg1, ((uint64_t)*(uint32_t*)((char*)r14_2 + 0x54)));
                        int32_t i = 0;
                        
                        if (0 < *(uint16_t*)((char*)r14_2 + 6))
                        {
                            void* rbx_2 = ((char*)r14_2 + 0x11c);
                            
                            do
                            {
                                sub_1400010d0((((uint64_t)*(uint32_t*)((char*)rbx_2 - 8)) + rdi_1), (((uint64_t)*(uint32_t*)rbx_2) + arg1), ((uint64_t)*(uint32_t*)((char*)rbx_2 - 4)));
                                rbx_2 += 0x28;
                                i += 1;
                            } while (i < ((uint32_t)*(uint16_t*)((char*)r14_2 + 6)));
                        }
                        
                        if (*(uint32_t*)((char*)r15_1 + 4) > 0)
                        {
                            do
                            {
                                int32_t* rax_4 = (((uint64_t)*(uint32_t*)r15_1) + i_1);
                                int32_t rbp_2 = *(uint32_t*)((char*)rax_4 + rdi_1);
                                void* rsi_1 = ((char*)rax_4 + rdi_1);
                                
                                if ((rbp_2 == 0 && *(uint32_t*)((char*)rsi_1 + 0x10) == rbp_2))
                                    break;
                                
                                uint64_t r13_2 = ((uint64_t)*(uint32_t*)((char*)rsi_1 + 0x10));
                                rax = sub_140001900((((uint64_t)*(uint32_t*)(((char*)rax_4 + rdi_1) + 0xc)) + rdi_1));
                                void* rbx_3 = rax;
                                
                                if (rax == 0)
                                    return;
                                
                                if (rbp_2 == 0)
                                    rbp_2 = *(uint32_t*)((char*)rsi_1 + 0x10);
                                
                                void** r14_3 = ((char*)rdi_1 + r13_2);
                                uint64_t r15_2 = ((uint64_t)rbp_2);
                                void* rdx_5 = (r15_2 + rdi_1);
                                
                                if (*(uint64_t*)((char*)rdi_1 + r13_2) != 0)
                                {
                                    void** rsi_2 = r14_3;
                                    
                                    do
                                    {
                                        void* rdx_6 = *(uint64_t*)rdx_5;
                                        
                                        if (rdx_6 >= 0)
                                            rax = sub_140001730(rbx_3, sub_1400014b0((((char*)rdx_6 + 2) + rdi_1)));
                                        else
                                            rax = (((uint64_t)*(uint32_t*)((((uint64_t)*(uint32_t*)((((uint64_t)*(uint32_t*)((((int64_t)*(uint32_t*)((char*)rbx_3 + 0x3c)) + rbx_3) + 0x88)) + rbx_3) + 0x1c)) + rbx_3) + (rdx_6 << 2))) + rbx_3);
                                        
                                        if (rax == 0)
                                            return;
                                        
                                        rsi_2 = &rsi_2[1];
                                        *(uint64_t*)r14_3 = rax;
                                        r14_3 = rsi_2;
                                        rdx_5 = ((r15_2 - r13_2) + rsi_2);
                                    } while (*(uint64_t*)rsi_2 != 0);
                                }
                                
                                r15_1 = var_98_1;
                                i_1 += 0x14;
                            } while (i_1 < ((uint64_t)*(uint32_t*)((char*)r15_1 + 4)));
                        }
                        
                        int64_t rax_9 = *(uint64_t*)((char*)r14_2 + 0x30);
                        
                        if (rdi_1 != rax_9)
                        {
                            int32_t* i_5 = (((uint64_t)*(uint32_t*)r13_1) + rdi_1);
                            void* r11_2 = ((char*)rdi_1 - rax_9);
                            
                            if (*(uint32_t*)i_5 != 0)
                            {
                                void* i_2;
                                
                                do
                                {
                                    for (i_2 = &i_5[2]; i_2 != (((uint64_t)i_5[1]) + i_5); i_2 += 2)
                                    {
                                        uint32_t r9_1 = ((uint32_t)*(uint16_t*)i_2);
                                        uint32_t rdx_8 = ((uint32_t)r9_1);
                                        uint32_t rax_13 = (r9_1 >> 0xc);
                                        
                                        if (rax_13 != 0)
                                        {
                                            if (rax_13 == 1)
                                            {
                                                int16_t* rdx_13 = ((((uint64_t)(rdx_8 & 0xfff)) + rdi_1) + ((uint64_t)*(uint32_t*)i_5));
                                                *(uint16_t*)rdx_13 += ((int16_t)(r11_2 >> 0x10));
                                            }
                                            else if (rax_13 == 2)
                                            {
                                                uint64_t rcx_15 = ((uint64_t)*(uint32_t*)i_5);
                                                void* rax_18 = ((char*)rdi_1 + ((uint64_t)(rdx_8 & 0xfff)));
                                                *(uint16_t*)(rcx_15 + rax_18) += r11_2;
                                            }
                                            else if (rax_13 == 3)
                                            {
                                                uint64_t rcx_14 = ((uint64_t)*(uint32_t*)i_5);
                                                void* rax_17 = ((char*)rdi_1 + ((uint64_t)(rdx_8 & 0xfff)));
                                                *(uint32_t*)(rcx_14 + rax_17) += r11_2;
                                            }
                                            else
                                            {
                                                if (rax_13 != 0xa)
                                                    return;
                                                
                                                int64_t* rcx_13 = ((uint64_t)*(uint32_t*)i_5);
                                                void* rax_16 = ((char*)rdi_1 + ((uint64_t)(r9_1 & 0xfff)));
                                                *(uint64_t*)((char*)rcx_13 + rax_16) += r11_2;
                                            }
                                        }
                                    }
                                    
                                    i_5 = i_2;
                                } while (*(uint32_t*)i_2 != 0);
                            }
                        }
                        
                        if (*(uint32_t*)((char*)r14_2 + 0xa4) != 0)
                        {
                            void* rbx_5 = (((uint64_t)*(uint32_t*)((char*)r14_2 + 0xa0)) + rdi_1);
                            char* rax_24 = sub_140001730(sub_140001650("KERNEL32.DLL"), 0x9219585c);
                            
                            if (rax_24 != 0)
                            {
                                int64_t rax_25;
                                int64_t rdx_15;
                                rdx_15 = HIGHQ((-0x5555555555555555 * ((uint64_t)*(uint32_t*)((char*)r14_2 + 0xa4))));
                                rax_25 = LOWQ((-0x5555555555555555 * ((uint64_t)*(uint32_t*)((char*)r14_2 + 0xa4))));
                                rax_24(rbx_5, ((uint64_t)(((int32_t)(rdx_15 >> 3)) - 1)), rdi_1);
                            }
                        }
                        
                        sub_1400019c0();
                        int32_t i_3 = 0;
                        
                        if (0 < *(uint16_t*)((char*)r14_2 + 6))
                        {
                            do
                            {
                                var_a8_1 = 0;
                                void* rdx_18 = ((char*)r14_2 + (((uint64_t)i_3) * 0x28));
                                int32_t rcx_20 = *(uint32_t*)((char*)rdx_18 + 0x12c);
                                int32_t r9_6 = ((rcx_20 >> 0x1f) & 8);
                                
                                if ((TEST_BITD(rcx_20, 0x1e)))
                                    r9_6 = 2;
                                
                                if ((rcx_20 & 0xc0000000) == 0xc0000000)
                                    r9_6 = 4;
                                
                                if ((TEST_BITD(rcx_20, 0x1d)))
                                    r9_6 = 0x10;
                                
                                if ((rcx_20 & 0xa0000000) == 0xa0000000)
                                    r9_6 = 0x80;
                                
                                if ((rcx_20 & 0x60000000) == 0x60000000)
                                    r9_6 = 0x20;
                                
                                if ((rcx_20 & 0xe0000000) == 0xe0000000)
                                    r9_6 = 0x40;
                                
                                sub_140004c70(0, (((uint64_t)*(uint32_t*)((char*)rdx_18 + 0x114)) + rdi_1), ((uint64_t)*(uint32_t*)((char*)rdx_18 + 0x118)), r9_6, nullptr);
                                i_3 += 1;
                            } while (i_3 < ((uint32_t)*(uint16_t*)((char*)r14_2 + 6)));
                        }
                        
                        if (*(uint32_t*)((char*)r14_2 + 0xd4) != 0)
                        {
                            int64_t* rbx_6 = *(uint64_t*)((((uint64_t)*(uint32_t*)((char*)r14_2 + 0xd0)) + rdi_1) + 0x18);
                            int64_t i_4 = *(uint64_t*)rbx_6;
                            
                            while (i_4 != 0)
                            {
                                i_4(rdi_1, 1, 0);
                                i_4 = rbx_6[1];
                                rbx_6 = &rbx_6[1];
                            }
                        }
                        
                        void* rbx_8 = (((uint64_t)*(uint32_t*)((char*)r14_2 + 0x28)) + rdi_1);
                        sub_1400015a0(rdi_1, ((uint64_t)*(uint32_t*)((char*)r14_2 + 0x114)));
                        rbx_8();
                    }
                }
            }
        }
    }
}

                                                                                    cc cc cc cc                              ....

void* sub_1400022a0()

void* result  {Register rax}

{
    void* result = malloc(0x50030);
    sub_140001120(result, 0, 0x50030);
    sub_1400042f0(((char*)result + 0x50000), 0, 0, 0, 0);
    return result;
}

                              cc cc cc cc cc cc                                                            ......

void sub_1400022f0(int64_t* arg1)

int64_t* arg1  {Register rcx}
int64_t rcx  {Register rcx}

{
    int64_t rcx = *(uint64_t*)arg1;
    
    if (rcx != 0)
        free(rcx);
    
    *(uint64_t*)arg1 = 0;
}

                                                            cc cc cc cc cc cc cc cc cc cc cc cc                      ............

uint64_t sub_140002320(void* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t arg6)

uint64_t var_188  {Frame offset -188}
int64_t var_180  {Frame offset -180}
uint64_t var_178  {Frame offset -178}
int32_t var_168  {Frame offset -168}
int64_t var_160  {Frame offset -160}
void var_158  {Frame offset -158}
char var_155  {Frame offset -155}
int64_t var_150  {Frame offset -150}
int32_t var_140  {Frame offset -140}
int64_t var_138  {Frame offset -138}
int64_t var_130  {Frame offset -130}
int32_t var_120  {Frame offset -120}
int64_t var_110  {Frame offset -110}
int128_t s  {Frame offset -108}
void var_78  {Frame offset -78}
int64_t var_60  {Frame offset -60}
int64_t arg5  {Frame offset 28}
int32_t arg6  {Frame offset 30}
int64_t* rax  {Register rax}
uint64_t rax_7  {Register rax}
int32_t rax_9  {Register rax}
uint64_t rax_11  {Register rax}
void* arg1  {Register rcx}
uint64_t rcx_16  {Register rcx}
int64_t arg2  {Register rdx}
int64_t* rdx_3  {Register rdx}
uint64_t rdx_10  {Register rdx}
void* rbx_2  {Register rbx}
int32_t rsi  {Register rsi}
int64_t arg3  {Register r8}
int64_t r8_3  {Register r8}
int64_t arg4  {Register r9}
int32_t r12  {Register r12}
int32_t r13  {Register r13}
int64_t r14  {Register r14}
bool cond:0_1

{
    int32_t r12 = arg6;
    int32_t rsi = 0;
    int64_t r14 = 0;
    int32_t r13 = -1;
    int32_t var_140;
    
    if (r12 != 1)
    {
        if (r12 != 0)
            return 0xa;
        
        sub_1400041c0();
        sub_140004600(&var_140);
    }
    else
        sub_140004330(&var_140);
    
    int128_t s;
    __builtin_memset(&s, 0, 0x88);
    int32_t var_168 = 0;
    int64_t var_160 = 0;
    sub_140003ae0(&s);
    int64_t* rax = *(uint64_t*)((char*)arg1 + 0x50000)(((char*)arg1 + 0x50000), ((uint64_t)var_140));
    uint64_t var_188 = ((uint64_t)var_140);
    void var_158;
    int64_t var_138;
    var_138(&var_158);
    
    if ((arg2(arg3, rax, &var_188) != 0 || var_188 != ((uint64_t)var_140)))
    {
        *(uint64_t*)((char*)arg1 + 0x50008)(((char*)arg1 + 0x50000), rax);
        return 0xe;
    }
    
    int64_t* rdx_3 = rax;
    int64_t var_130;
    
    if (var_130(rax, &var_158) != 0)
    {
        *(uint64_t*)((char*)arg1 + 0x50008)(((char*)arg1 + 0x50000), rdx_3);
        return 0x10;
    }
    
    uint64_t var_178;
    
    if (r12 == 0)
    {
        void var_78;
        sub_140004330(&var_78);
        int64_t var_60;
        var_60(&var_178, &var_158);
        rdx_3 = &var_178;
    }
    
    sub_1400026d0(&s, rdx_3, 5, ((char*)arg1 + 0x50000));
    *(uint64_t*)((char*)arg1 + 0x50008)(((char*)arg1 + 0x50000), rax);
    int64_t var_180 = 0x40000;
    var_178 = 0x10000;
    
    if (arg2(arg3, arg1, &var_178) != 0)
    {
    label_140002642:
        rsi = 0xe;
    }
    else
    {
        while (true)
        {
            uint64_t rax_7 = var_178;
            
            if (rax_7 == 0)
                break;
            
            var_188 = rax_7;
            void* rbx_2 = nullptr;
            arg6 = 0;
            
            while (true)
            {
                if (sub_140003670(&s, ((char*)arg1 + 0x10000), &var_180, ((char*)rbx_2 + arg1), &var_188, 0, &arg6) != 0)
                {
                    rsi = 0x11;
                    goto label_140002652;
                }
                
                int64_t r8_3 = var_180;
                
                if ((r12 == 0 && r8_3 != 0))
                {
                    int32_t rax_9 = sub_140004270(r13, ((char*)arg1 + 0x10000), r8_3);
                    r8_3 = var_180;
                    r13 = rax_9;
                }
                
                r14 += r8_3;
                
                if (arg4(arg5, ((char*)arg1 + 0x10000), r8_3) != var_180)
                {
                    rsi = 0xf;
                    goto label_140002652;
                }
                
                uint64_t rcx_16 = var_188;
                uint64_t rax_11 = var_178;
                rbx_2 += rcx_16;
                
                if (rbx_2 < rax_11)
                {
                    rcx_16 = (rax_11 - rbx_2);
                    bool cond:0_1 = arg6 != 1;
                    var_188 = rcx_16;
                    
                    if (cond:0_1)
                        continue;
                    
                    goto label_1400025ad;
                }
                
                char var_155;
                int64_t var_150;
                
                if (arg6 != 1)
                {
                    if ((var_155 == 0 && r14 >= var_150))
                        goto label_1400025d1;
                    
                    var_180 = 0x40000;
                    var_178 = 0x10000;
                    var_188 = 0;
                    
                    if (arg2(arg3, arg1, &var_178) == 0)
                        break;
                    
                    goto label_140002642;
                }
                
            label_1400025ad:
                int32_t var_120;
                uint64_t rdx_10 = ((uint64_t)var_120);
                
                if (rdx_10 != 0)
                {
                    int64_t var_110;
                    
                    if ((rcx_16 >= rdx_10 && var_110 != 0))
                    {
                        var_110(((char*)rbx_2 + arg1), &var_168);
                    label_1400025d1:
                        rdx_10 = ((uint64_t)var_120);
                    }
                    
                    if (rdx_10 != 0)
                    {
                        if (var_168 != !(r13))
                            rsi = 0x13;
                        else if (var_160 != r14)
                            rsi = 0x14;
                        
                        goto label_140002652;
                    }
                }
                
                if (var_155 != 0)
                    goto label_140002652;
                
                if (var_150 != r14)
                    rsi = 0x14;
                
                goto label_140002652;
            }
        }
        
        rsi = 0x12;
    }
    
label_140002652:
    sub_140003aa0(&s, ((char*)arg1 + 0x50000));
    return ((uint64_t)rsi);
}

            cc cc cc cc cc cc cc cc cc cc cc cc                                                      ............

int64_t sub_1400026d0(int128_t* arg1, char* arg2, int32_t arg3, int64_t arg4)

uint32_t var_14  {Frame offset -14}
uint32_t var_10  {Frame offset -10}
uint32_t var_c_1  {Frame offset -c}
uint32_t rax_4  {Register rax}
int64_t rax_7  {Register rax}
int64_t rax_8  {Register rax}
int128_t* arg1  {Register rcx}
uint32_t rcx_1  {Register rcx}
uint32_t rcx_2  {Register rcx}
char* arg2  {Register rdx}
int64_t rdx_8  {Register rdx}
int64_t rdx_11  {Register rdx}
uint32_t rbx_7  {Register rbx}
uint64_t rbp_2  {Register rbp}
int32_t arg3  {Register r8}
int64_t arg4  {Register r9}
uint32_t r9_1  {Register r9}

{
    if (arg3 >= 5)
    {
        uint32_t rbx_7 = ((((((((uint32_t)arg2[4]) << 8) | ((uint32_t)arg2[3])) << 8) | ((uint32_t)arg2[2])) << 8) | ((uint32_t)arg2[1]));
        
        if (rbx_7 < 0x1000)
            rbx_7 = 0x1000;
        
        uint32_t rax_4 = ((uint32_t)*(uint8_t*)arg2);
        uint32_t var_c_1 = rbx_7;
        
        if (rax_4 < 0xe1)
        {
            uint32_t r9_1 = (rax_4 % 9);
            uint32_t rcx_1 = ((uint32_t)((int8_t)(rax_4 / 9)));
            uint32_t var_10 = (rcx_1 / 5);
            int64_t rdx_8 = arg1[1];
            uint32_t rcx_2 = (rcx_1 % 5);
            uint32_t var_14 = rcx_2;
            int64_t rax_7;
            
            if ((rdx_8 == 0 || ((0x300 << (rcx_2 + r9_1)) + 0x736) != *(uint32_t*)((char*)arg1 + 0x68)))
            {
                *(uint64_t*)(arg4 + 8)(arg4, rdx_8);
                arg1[1] = 0;
                rax_7 = *(uint64_t*)arg4(arg4, (((uint64_t)((0x300 << (rcx_2 + r9_1)) + 0x736)) * 2));
                arg1[1] = rax_7;
                *(uint32_t*)((char*)arg1 + 0x68) = ((0x300 << (rcx_2 + r9_1)) + 0x736);
            }
            
            if (((rdx_8 != 0 && ((0x300 << (rcx_2 + r9_1)) + 0x736) == *(uint32_t*)((char*)arg1 + 0x68)) || rax_7 != 0))
            {
                int64_t rdx_11 = *(uint64_t*)((char*)arg1 + 0x18);
                uint64_t rbp_2 = ((uint64_t)rbx_7);
                int64_t rax_8;
                
                if ((rdx_11 == 0 || rbp_2 != *(uint64_t*)((char*)arg1 + 0x38)))
                {
                    *(uint64_t*)(arg4 + 8)(arg4, rdx_11);
                    *(uint64_t*)((char*)arg1 + 0x18) = 0;
                    rax_8 = *(uint64_t*)arg4(arg4, rbp_2);
                    *(uint64_t*)((char*)arg1 + 0x18) = rax_8;
                }
                
                if (((rdx_11 != 0 && rbp_2 == *(uint64_t*)((char*)arg1 + 0x38)) || rax_8 != 0))
                {
                    *(uint64_t*)((char*)arg1 + 0x38) = rbp_2;
                    *(uint128_t*)arg1 = r9_1;
                    return 0;
                }
                
                *(uint64_t*)(arg4 + 8)(arg4, arg1[1]);
                arg1[1] = 0;
            }
            
            return 2;
        }
    }
    
    return 4;
}

                                                      cc cc cc cc cc cc cc cc cc cc cc cc cc cc                    ..............

int64_t sub_140002840(int32_t* arg1, int64_t arg2, int64_t arg3)

int32_t var_88  {Frame offset -88}
int32_t var_84  {Frame offset -84}
int32_t var_80  {Frame offset -80}
int32_t var_7c  {Frame offset -7c}
int32_t var_5c  {Frame offset -5c}
int64_t var_58  {Frame offset -58}
int32_t arg_20  {Frame offset 20}
int32_t rax_4  {Register rax}
char* rax_5  {Register rax}
int32_t rax_6  {Register rax}
int32_t rax_7  {Register rax}
int32_t rax_27  {Register rax}
int32_t* arg1  {Register rcx}
int32_t rcx_7  {Register rcx}
char* rcx_10  {Register rcx}
uint64_t i_4  {Register rcx}
int32_t rcx_18  {Register rcx}
uint16_t rcx_20  {Register rcx}
uint64_t rcx_23  {Register rcx}
int32_t rcx_29  {Register rcx}
uint16_t rcx_31  {Register rcx}
int32_t rcx_40  {Register rcx}
void* const rcx_43  {Register rcx}
int32_t rcx_52  {Register rcx}
uint64_t rcx_55  {Register rcx}
uint32_t rcx_57  {Register rcx}
int32_t rcx_65  {Register rcx}
int32_t rcx_73  {Register rcx}
uint16_t rcx_75  {Register rcx}
uint32_t rcx_79  {Register rcx}
int32_t rcx_83  {Register rcx}
int32_t rcx_91  {Register rcx}
uint64_t rcx_96  {Register rcx}
int32_t rcx_100  {Register rcx}
uint16_t rcx_102  {Register rcx}
int32_t rcx_108  {Register rcx}
uint16_t rcx_110  {Register rcx}
int32_t rcx_117  {Register rcx}
uint16_t rcx_119  {Register rcx}
int32_t rcx_127  {Register rcx}
uint16_t rcx_129  {Register rcx}
int32_t rcx_137  {Register rcx}
uint16_t rcx_139  {Register rcx}
int32_t rcx_147  {Register rcx}
uint16_t rcx_149  {Register rcx}
int32_t rcx_157  {Register rcx}
uint16_t rcx_159  {Register rcx}
uint64_t rcx_164  {Register rcx}
int32_t rcx_168  {Register rcx}
uint16_t rcx_170  {Register rcx}
int32_t rcx_176  {Register rcx}
int32_t rcx_181  {Register rcx}
uint16_t rcx_183  {Register rcx}
int32_t rcx_189  {Register rcx}
uint16_t rcx_191  {Register rcx}
int32_t rcx_198  {Register rcx}
uint16_t rcx_200  {Register rcx}
int32_t rcx_206  {Register rcx}
uint16_t rcx_208  {Register rcx}
uint32_t rcx_213  {Register rcx}
uint64_t rcx_216  {Register rcx}
void* rcx_220  {Register rcx}
int64_t arg2  {Register rdx}
int32_t rdx_1  {Register rdx}
uint32_t rdx_2  {Register rdx}
uint32_t rdx_7  {Register rdx}
char* rdx_8  {Register rdx}
uint64_t rdx_13  {Register rdx}
uint32_t rdx_14  {Register rdx}
uint32_t rdx_15  {Register rdx}
int32_t rdx_18  {Register rdx}
char* rdx_19  {Register rdx}
uint32_t rdx_22  {Register rdx}
uint32_t rdx_23  {Register rdx}
uint32_t rdx_25  {Register rdx}
uint32_t rdx_26  {Register rdx}
uint32_t rdx_27  {Register rdx}
uint32_t rdx_28  {Register rdx}
int64_t rdx_29  {Register rdx}
uint32_t rdx_30  {Register rdx}
uint32_t rdx_31  {Register rdx}
uint32_t rdx_32  {Register rdx}
uint32_t rdx_33  {Register rdx}
uint32_t rdx_34  {Register rdx}
int32_t rdx_35  {Register rdx}
uint32_t rdx_38  {Register rdx}
uint32_t rdx_39  {Register rdx}
void* const rdx_40  {Register rdx}
uint32_t rdx_41  {Register rdx}
uint32_t rdx_42  {Register rdx}
uint32_t rdx_43  {Register rdx}
int32_t rdx_44  {Register rdx}
void* rdx_46  {Register rdx}
char* rdx_47  {Register rdx}
void* rdx_48  {Register rdx}
char rbx  {Register rbx}
uint64_t rbx_3  {Register rbx}
int32_t rbx_4  {Register rbx}
void* rbx_8  {Register rbx}
int32_t rbx_11  {Register rbx}
int32_t rbx_14  {Register rbx}
void* rbx_15  {Register rbx}
uint64_t rbx_16  {Register rbx}
int32_t rbx_18  {Register rbx}
void* rbp  {Register rbp}
int32_t rsi  {Register rsi}
uint32_t rsi_1  {Register rsi}
uint64_t rdi_2  {Register rdi}
char* rdi_3  {Register rdi}
int32_t rdi_5  {Register rdi}
int32_t rdi_7  {Register rdi}
int64_t arg3  {Register r8}
int32_t r8  {Register r8}
int32_t i_3  {Register r8}
uint32_t r8_5  {Register r8}
uint32_t r8_6  {Register r8}
int32_t r8_8  {Register r8}
void* r8_9  {Register r8}
int32_t r8_11  {Register r8}
int32_t r8_12  {Register r8}
int32_t r8_13  {Register r8}
int32_t r8_14  {Register r8}
int32_t r8_15  {Register r8}
uint64_t r8_17  {Register r8}
int32_t r8_18  {Register r8}
uint64_t r8_20  {Register r8}
void* r8_21  {Register r8}
int32_t r9  {Register r9}
int32_t r9_1  {Register r9}
int32_t r9_2  {Register r9}
int32_t r9_3  {Register r9}
int32_t r9_4  {Register r9}
int32_t r9_5  {Register r9}
int32_t r9_6  {Register r9}
int32_t r9_7  {Register r9}
int32_t r9_8  {Register r9}
int32_t r9_9  {Register r9}
int32_t r9_10  {Register r9}
int32_t r9_11  {Register r9}
int32_t r9_12  {Register r9}
int32_t r9_13  {Register r9}
int32_t r9_14  {Register r9}
int32_t r9_15  {Register r9}
int32_t* r10  {Register r10}
int32_t r10_3  {Register r10}
uint64_t r10_4  {Register r10}
int32_t r10_5  {Register r10}
int64_t r10_6  {Register r10}
int64_t r10_7  {Register r10}
int64_t r10_8  {Register r10}
int64_t r10_9  {Register r10}
int64_t r10_10  {Register r10}
int32_t i_5  {Register r10}
int32_t i_6  {Register r10}
int32_t r10_13  {Register r10}
uint64_t r10_14  {Register r10}
uint64_t r10_15  {Register r10}
int32_t r10_16  {Register r10}
char* r10_17  {Register r10}
char* r10_18  {Register r10}
char* r11  {Register r11}
char* r12  {Register r12}
uint32_t r13  {Register r13}
int64_t r14  {Register r14}
void* r14_1  {Register r14}
void* r14_3  {Register r14}
int32_t r15  {Register r15}
int32_t r15_1  {Register r15}
int32_t r15_2  {Register r15}
int32_t i_2  {Register temp0}
int32_t i  {Register temp1}
int32_t i_1  {Register temp2}

{
    int32_t* r10 = arg1;
    int32_t rsi = arg1[0x16];
    void* rbp = *(uint64_t*)((char*)arg1 + 0x10);
    int32_t r15 = 0;
    uint32_t r13 = arg1[0x12];
    char rbx = ((int8_t)*(uint32_t*)r10);
    int64_t r14 = *(uint64_t*)((char*)r10 + 0x18);
    int32_t r8 = r10[0x10];
    char* r12 = *(uint64_t*)((char*)r10 + 0x30);
    char* r11 = *(uint64_t*)((char*)r10 + 0x20);
    int32_t r9 = r10[0xa];
    int32_t var_88 = arg1[0x13];
    int32_t var_84 = arg1[0x14];
    int32_t var_80 = arg1[0x15];
    int32_t rdx_1 = ((1 << ((int8_t)arg1[2])) - 1);
    int32_t rax_4 = ((1 << ((int8_t)r10[1])) - 1);
    int32_t var_7c = rsi;
    char* rax_5 = *(uint64_t*)((char*)r10 + 0x38);
    int32_t rax_6 = r10[0x11];
    int32_t rax_7 = r10[0xb];
    int32_t var_5c = rdx_1;
    int64_t var_58 = r14;
    arg_20 = r8;
    
    while (true)
    {
        uint64_t rdi_2 = ((uint64_t)(r8 & rdx_1));
        uint64_t rbx_3 = (((uint64_t)(r13 << 4)) + ((uint64_t)rdi_2));
        uint32_t rdx_2 = ((uint32_t)*(uint16_t*)((char*)rbp + (rbx_3 << 1)));
        
        if (r9 < 0x1000000)
        {
            rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
            r9 <<= 8;
            r11 = &r11[1];
        }
        
        int32_t rcx_7 = ((r9 >> 0xb) * rdx_2);
        
        if (rax_7 >= rcx_7)
        {
            int32_t r9_1 = (r9 - rcx_7);
            uint64_t r10_4 = ((uint64_t)r13);
            rax_7 -= rcx_7;
            rdx_2 -= ((int16_t)(rdx_2 >> 5));
            *(uint16_t*)((char*)rbp + (rbx_3 << 1)) = rdx_2;
            uint32_t rdx_15 = ((uint32_t)*(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x180));
            
            if (r9_1 < 0x1000000)
            {
                rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                r9_1 <<= 8;
                r11 = &r11[1];
            }
            
            int32_t rcx_40 = ((r9_1 >> 0xb) * rdx_15);
            void* const rcx_43;
            int32_t r9_2;
            int32_t r10_5;
            
            if (rax_7 >= rcx_40)
            {
                int32_t r9_3 = (r9_1 - rcx_40);
                rax_7 -= rcx_40;
                rdx_15 -= ((int16_t)(rdx_15 >> 5));
                *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x180) = rdx_15;
                
                if ((rax_6 == 0 && r8 == 0))
                    return 1;
                
                uint32_t r8_5 = ((uint32_t)*(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x198));
                
                if (r9_3 < 0x1000000)
                {
                    rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                    r9_3 <<= 8;
                    r11 = &r11[1];
                }
                
                int32_t rdx_18 = ((r9_3 >> 0xb) * r8_5);
                
                if (rax_7 >= rdx_18)
                {
                    int32_t r9_5 = (r9_3 - rdx_18);
                    rax_7 -= rdx_18;
                    r8_5 -= ((int16_t)(r8_5 >> 5));
                    *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x198) = r8_5;
                    uint32_t rdx_22 = ((uint32_t)*(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x1b0));
                    
                    if (r9_5 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_5 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t rcx_65 = ((r9_5 >> 0xb) * rdx_22);
                    int32_t r8_8;
                    
                    if (rax_7 >= rcx_65)
                    {
                        int32_t r9_6 = (r9_5 - rcx_65);
                        rax_7 -= rcx_65;
                        rdx_22 -= ((int16_t)(rdx_22 >> 5));
                        *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x1b0) = rdx_22;
                        uint32_t rdx_23 = ((uint32_t)*(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x1c8));
                        
                        if (r9_6 < 0x1000000)
                        {
                            rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                            r9_6 <<= 8;
                            r11 = &r11[1];
                        }
                        
                        int32_t rcx_73 = ((r9_6 >> 0xb) * rdx_23);
                        uint16_t rcx_75;
                        
                        if (rax_7 >= rcx_73)
                        {
                            r9_2 = (r9_6 - rcx_73);
                            rax_7 -= rcx_73;
                            var_7c = var_80;
                            r8_8 = rsi;
                            rsi = var_80;
                            rdx_23 -= ((int16_t)(rdx_23 >> 5));
                            rcx_75 = rdx_23;
                        }
                        else
                        {
                            r8_8 = var_80;
                            r9_2 = rcx_73;
                            rcx_75 = (((int16_t)((0x800 - rdx_23) >> 5)) + rdx_23);
                        }
                        
                        var_80 = var_84;
                        *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x1c8) = rcx_75;
                    }
                    else
                    {
                        r8_8 = var_84;
                        r9_2 = rcx_65;
                        *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x1b0) = (((int16_t)((0x800 - rdx_22) >> 5)) + rdx_22);
                    }
                    
                    var_84 = var_88;
                    var_88 = r8_8;
                    goto label_140002d91;
                }
                
                int32_t r9_4 = rdx_18;
                *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x198) = (((int16_t)((0x800 - r8_5) >> 5)) + r8_5);
                uint32_t r8_6 = ((uint32_t)*(uint16_t*)(((char*)rbp + (rbx_3 << 1)) + 0x1e0));
                
                if (rdx_18 < 0x1000000)
                {
                    rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                    r9_4 <<= 8;
                    r11 = &r11[1];
                }
                
                int32_t rcx_52 = ((r9_4 >> 0xb) * r8_6);
                
                if (rax_7 >= rcx_52)
                {
                    r9_2 = (r9_4 - rcx_52);
                    rax_7 -= rcx_52;
                    r8_6 -= ((int16_t)(r8_6 >> 5));
                    *(uint16_t*)(((char*)rbp + (rbx_3 << 1)) + 0x1e0) = r8_6;
                label_140002d91:
                    uint32_t rcx_79 = 0xb;
                    r10_5 = 8;
                    
                    if (r13 < 7)
                        rcx_79 = 8;
                    
                    r13 = rcx_79;
                    rcx_43 = 0xa68;
                    goto label_140002da8;
                }
                
                r9 = rcx_52;
                char* rdx_19 = nullptr;
                *(uint16_t*)(((char*)rbp + (rbx_3 << 1)) + 0x1e0) = (((int16_t)((0x800 - r8_6) >> 5)) + r8_6);
                uint64_t rcx_55 = ((uint64_t)var_88);
                
                if (r12 < rcx_55)
                    rdx_19 = rax_5;
                
                r8 = (arg_20 + 1);
                arg_20 = r8;
                r12[r14] = *(uint8_t*)(((rdx_19 - rcx_55) + r12) + r14);
                r12 = &r12[1];
                uint32_t rcx_57 = 0xb;
                
                if (r13 < 7)
                    rcx_57 = 9;
                
                r13 = rcx_57;
            }
            else
            {
                r9_2 = rcx_40;
                *(uint16_t*)(((char*)rbp + (r10_4 << 1)) + 0x180) = (((int16_t)((0x800 - rdx_15) >> 5)) + rdx_15);
                r13 += 0xc;
                rcx_43 = 0x664;
                r10_5 = 8;
            label_140002da8:
                uint32_t rdx_25 = ((uint32_t)*(uint16_t*)((char*)rcx_43 + rbp));
                void* r8_9 = ((char*)rcx_43 + rbp);
                
                if (r9_2 < 0x1000000)
                {
                    rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                    r9_2 <<= 8;
                    r11 = &r11[1];
                }
                
                int32_t rcx_83 = ((r9_2 >> 0xb) * rdx_25);
                void* rbx_8;
                int32_t rdi_5;
                
                if (rax_7 >= rcx_83)
                {
                    int32_t r9_7 = (r9_2 - rcx_83);
                    rax_7 -= rcx_83;
                    rdx_25 -= ((int16_t)(rdx_25 >> 5));
                    *(uint16_t*)r8_9 = rdx_25;
                    uint32_t rdx_26 = ((uint32_t)*(uint16_t*)((char*)r8_9 + 2));
                    
                    if (r9_7 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_7 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t rcx_91 = ((r9_7 >> 0xb) * rdx_26);
                    
                    if (rax_7 >= rcx_91)
                    {
                        r9 = (r9_7 - rcx_91);
                        rbx_8 = ((char*)r8_9 + 0x204);
                        rax_7 -= rcx_91;
                        rdi_5 = 0x10;
                        r10_5 = 0x100;
                        rdx_26 -= ((int16_t)(rdx_26 >> 5));
                        *(uint16_t*)((char*)r8_9 + 2) = rdx_26;
                    }
                    else
                    {
                        r9 = rcx_91;
                        rbx_8 = ((char*)r8_9 + ((((uint64_t)((int32_t)(rdi_2 << 3))) + 0x82) << 1));
                        rdi_5 = 8;
                        *(uint16_t*)((char*)r8_9 + 2) = (((int16_t)((0x800 - rdx_26) >> 5)) + rdx_26);
                    }
                }
                else
                {
                    r9 = rcx_83;
                    rbx_8 = ((char*)r8_9 + ((((uint64_t)((int32_t)(rdi_2 << 3))) + 2) << 1));
                    *(uint16_t*)r8_9 = (((int16_t)((0x800 - rdx_25) >> 5)) + rdx_25);
                    rdi_5 = 0;
                }
                
                int32_t r15_1 = 1;
                
                do
                {
                    uint64_t rcx_96 = ((uint64_t)r15_1);
                    uint32_t rdx_27 = ((uint32_t)*(uint16_t*)((char*)rbx_8 + (rcx_96 << 1)));
                    
                    if (r9 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    r15_1 *= 2;
                    int32_t rcx_100 = ((r9 >> 0xb) * rdx_27);
                    uint16_t rcx_102;
                    
                    if (rax_7 >= rcx_100)
                    {
                        r9 -= rcx_100;
                        rax_7 -= rcx_100;
                        r15_1 += 1;
                        rdx_27 -= ((int16_t)(rdx_27 >> 5));
                        rcx_102 = rdx_27;
                    }
                    else
                    {
                        r9 = rcx_100;
                        rcx_102 = (((int16_t)((0x800 - rdx_27) >> 5)) + rdx_27);
                    }
                    
                    *(uint16_t*)((char*)rbx_8 + (rcx_96 << 1)) = rcx_102;
                } while (r15_1 < r10_5);
                
                int32_t r15_2 = (r15_1 + (rdi_5 - r10_5));
                int32_t rbx_18;
                int32_t r10_16;
                
                if (r13 < 0xc)
                {
                    rbx_18 = arg_20;
                    r10_16 = var_88;
                }
                else
                {
                    int32_t rbx_11 = 3;
                    
                    if (r15_2 < 4)
                        rbx_11 = r15_2;
                    
                    uint32_t rdx_28 = ((uint32_t)*(uint16_t*)(((char*)rbp + ((((uint64_t)(rbx_11 << 6)) + 0x1b0) << 1)) + 2));
                    
                    if (r9 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t rcx_108 = ((r9 >> 0xb) * rdx_28);
                    uint16_t rcx_110;
                    int64_t rdx_29;
                    int32_t r8_11;
                    int32_t r9_8;
                    
                    if (rax_7 >= rcx_108)
                    {
                        r9_8 = (r9 - rcx_108);
                        rax_7 -= rcx_108;
                        rdx_28 -= ((int16_t)(rdx_28 >> 5));
                        rcx_110 = rdx_28;
                        rdx_29 = 3;
                        r8_11 = 6;
                    }
                    else
                    {
                        r9_8 = rcx_108;
                        rcx_110 = (((int16_t)((0x800 - rdx_28) >> 5)) + rdx_28);
                        rdx_29 = 2;
                        r8_11 = 4;
                    }
                    
                    *(uint16_t*)(((char*)rbp + ((((uint64_t)(rbx_11 << 6)) + 0x1b0) << 1)) + 2) = rcx_110;
                    int64_t r10_6 = (((((uint64_t)(rbx_11 << 6)) + 0x1b0) + rdx_29) << 1);
                    uint32_t rdx_30 = ((uint32_t)*(uint16_t*)(r10_6 + rbp));
                    
                    if (r9_8 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_8 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t rcx_117 = ((r9_8 >> 0xb) * rdx_30);
                    uint16_t rcx_119;
                    int32_t r9_9;
                    
                    if (rax_7 >= rcx_117)
                    {
                        r9_9 = (r9_8 - rcx_117);
                        rax_7 -= rcx_117;
                        r8_11 += 1;
                        rdx_30 -= ((int16_t)(rdx_30 >> 5));
                        rcx_119 = rdx_30;
                    }
                    else
                    {
                        r9_9 = rcx_117;
                        rcx_119 = (((int16_t)((0x800 - rdx_30) >> 5)) + rdx_30);
                    }
                    
                    *(uint16_t*)(r10_6 + rbp) = rcx_119;
                    int64_t r10_7 = ((((uint64_t)r8_11) + (((uint64_t)(rbx_11 << 6)) + 0x1b0)) << 1);
                    uint32_t rdx_31 = ((uint32_t)*(uint16_t*)(r10_7 + rbp));
                    
                    if (r9_9 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_9 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t r8_12 = (r8_11 * 2);
                    int32_t rcx_127 = ((r9_9 >> 0xb) * rdx_31);
                    uint16_t rcx_129;
                    int32_t r9_10;
                    
                    if (rax_7 >= rcx_127)
                    {
                        r9_10 = (r9_9 - rcx_127);
                        rax_7 -= rcx_127;
                        r8_12 += 1;
                        rdx_31 -= ((int16_t)(rdx_31 >> 5));
                        rcx_129 = rdx_31;
                    }
                    else
                    {
                        r9_10 = rcx_127;
                        rcx_129 = (((int16_t)((0x800 - rdx_31) >> 5)) + rdx_31);
                    }
                    
                    *(uint16_t*)(r10_7 + rbp) = rcx_129;
                    int64_t r10_8 = ((((uint64_t)r8_12) + (((uint64_t)(rbx_11 << 6)) + 0x1b0)) << 1);
                    uint32_t rdx_32 = ((uint32_t)*(uint16_t*)(r10_8 + rbp));
                    
                    if (r9_10 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_10 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t r8_13 = (r8_12 * 2);
                    int32_t rcx_137 = ((r9_10 >> 0xb) * rdx_32);
                    uint16_t rcx_139;
                    int32_t r9_11;
                    
                    if (rax_7 >= rcx_137)
                    {
                        r9_11 = (r9_10 - rcx_137);
                        rax_7 -= rcx_137;
                        r8_13 += 1;
                        rdx_32 -= ((int16_t)(rdx_32 >> 5));
                        rcx_139 = rdx_32;
                    }
                    else
                    {
                        r9_11 = rcx_137;
                        rcx_139 = (((int16_t)((0x800 - rdx_32) >> 5)) + rdx_32);
                    }
                    
                    *(uint16_t*)(r10_8 + rbp) = rcx_139;
                    int64_t r10_9 = ((((uint64_t)r8_13) + (((uint64_t)(rbx_11 << 6)) + 0x1b0)) << 1);
                    uint32_t rdx_33 = ((uint32_t)*(uint16_t*)(r10_9 + rbp));
                    
                    if (r9_11 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_11 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t r8_14 = (r8_13 * 2);
                    int32_t rcx_147 = ((r9_11 >> 0xb) * rdx_33);
                    uint16_t rcx_149;
                    int32_t r9_12;
                    
                    if (rax_7 >= rcx_147)
                    {
                        r9_12 = (r9_11 - rcx_147);
                        rax_7 -= rcx_147;
                        r8_14 += 1;
                        rdx_33 -= ((int16_t)(rdx_33 >> 5));
                        rcx_149 = rdx_33;
                    }
                    else
                    {
                        r9_12 = rcx_147;
                        rcx_149 = (((int16_t)((0x800 - rdx_33) >> 5)) + rdx_33);
                    }
                    
                    *(uint16_t*)(r10_9 + rbp) = rcx_149;
                    int64_t r10_10 = ((((uint64_t)r8_14) + (((uint64_t)(rbx_11 << 6)) + 0x1b0)) << 1);
                    uint32_t rdx_34 = ((uint32_t)*(uint16_t*)(r10_10 + rbp));
                    
                    if (r9_12 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9_12 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    int32_t r8_15 = (r8_14 * 2);
                    int32_t rcx_157 = ((r9_12 >> 0xb) * rdx_34);
                    uint16_t rcx_159;
                    
                    if (rax_7 >= rcx_157)
                    {
                        r9 = (r9_12 - rcx_157);
                        rax_7 -= rcx_157;
                        r8_15 += 1;
                        rdx_34 -= ((int16_t)(rdx_34 >> 5));
                        rcx_159 = rdx_34;
                    }
                    else
                    {
                        r9 = rcx_157;
                        rcx_159 = (((int16_t)((0x800 - rdx_34) >> 5)) + rdx_34);
                    }
                    
                    int32_t r8_18 = (r8_15 - 0x40);
                    *(uint16_t*)(r10_10 + rbp) = rcx_159;
                    
                    if (r8_18 >= 4)
                    {
                        int32_t rdx_35 = r8_18;
                        int32_t i_5 = ((r8_18 >> 1) - 1);
                        uint64_t r8_17 = ((uint64_t)((r8_18 & 1) | 2));
                        
                        if (rdx_35 >= 0xe)
                        {
                            int32_t i_6 = (i_5 - 4);
                            int32_t i;
                            
                            do
                            {
                                if (r9 < 0x1000000)
                                {
                                    rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                    r9 <<= 8;
                                    r11 = &r11[1];
                                }
                                
                                r9 u>>= 1;
                                int32_t rax_27 = (rax_7 - r9);
                                int32_t rcx_176 = -((rax_27 >> 0x1f));
                                r8_17 = ((uint64_t)(((int32_t)((r8_17 << 1) + 1)) + rcx_176));
                                rax_7 = (rax_27 + (rcx_176 & r9));
                                i = i_6;
                                i_6 -= 1;
                            } while (i != 1);
                            uint32_t rdx_39 = ((uint32_t)*(uint16_t*)((char*)rbp + 0x646));
                            r8_18 = (r8_17 << 4);
                            
                            if (r9 < 0x1000000)
                            {
                                rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                r9 <<= 8;
                                r11 = &r11[1];
                            }
                            
                            int32_t rcx_181 = ((r9 >> 0xb) * rdx_39);
                            uint16_t rcx_183;
                            void* const rdx_40;
                            int32_t r9_13;
                            
                            if (rax_7 >= rcx_181)
                            {
                                r9_13 = (r9 - rcx_181);
                                rax_7 -= rcx_181;
                                r8_18 |= 1;
                                rdx_39 -= ((int16_t)(rdx_39 >> 5));
                                rcx_183 = rdx_39;
                                rdx_40 = 6;
                            }
                            else
                            {
                                r9_13 = rcx_181;
                                rcx_183 = (((int16_t)((0x800 - rdx_39) >> 5)) + rdx_39);
                                rdx_40 = 4;
                            }
                            
                            *(uint16_t*)((char*)rbp + 0x646) = rcx_183;
                            void* rbx_15 = ((char*)rdx_40 + rbp);
                            int32_t r10_13 = rdx_40;
                            uint32_t rdx_41 = ((uint32_t)*(uint16_t*)((char*)rbx_15 + 0x644));
                            
                            if (r9_13 < 0x1000000)
                            {
                                rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                r9_13 <<= 8;
                                r11 = &r11[1];
                            }
                            
                            int32_t rcx_189 = ((r9_13 >> 0xb) * rdx_41);
                            uint16_t rcx_191;
                            int32_t r9_14;
                            
                            if (rax_7 >= rcx_189)
                            {
                                r9_14 = (r9_13 - rcx_189);
                                rax_7 -= rcx_189;
                                r10_13 += 1;
                                r8_18 |= 2;
                                rdx_41 -= ((int16_t)(rdx_41 >> 5));
                                rcx_191 = rdx_41;
                            }
                            else
                            {
                                r9_14 = rcx_189;
                                rcx_191 = (((int16_t)((0x800 - rdx_41) >> 5)) + rdx_41);
                            }
                            
                            *(uint16_t*)((char*)rbx_15 + 0x644) = rcx_191;
                            uint64_t rbx_16 = (((uint64_t)r10_13) << 1);
                            uint32_t rdx_42 = ((uint32_t)*(uint16_t*)((rbx_16 + rbp) + 0x644));
                            
                            if (r9_14 < 0x1000000)
                            {
                                rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                r9_14 <<= 8;
                                r11 = &r11[1];
                            }
                            
                            uint64_t r10_14 = ((uint64_t)(r10_13 * 2));
                            int32_t rcx_198 = ((r9_14 >> 0xb) * rdx_42);
                            uint16_t rcx_200;
                            int32_t r9_15;
                            
                            if (rax_7 >= rcx_198)
                            {
                                r9_15 = (r9_14 - rcx_198);
                                rax_7 -= rcx_198;
                                r10_14 = ((uint64_t)(r10_14 + 1));
                                r8_18 |= 4;
                                rdx_42 -= ((int16_t)(rdx_42 >> 5));
                                rcx_200 = rdx_42;
                            }
                            else
                            {
                                r9_15 = rcx_198;
                                rcx_200 = (((int16_t)((0x800 - rdx_42) >> 5)) + rdx_42);
                            }
                            
                            *(uint16_t*)((rbx_16 + rbp) + 0x644) = rcx_200;
                            uint64_t r10_15 = (r10_14 << 1);
                            uint32_t rdx_43 = ((uint32_t)*(uint16_t*)((r10_15 + rbp) + 0x644));
                            
                            if (r9_15 < 0x1000000)
                            {
                                rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                r9_15 <<= 8;
                                r11 = &r11[1];
                            }
                            
                            int32_t rcx_206 = ((r9_15 >> 0xb) * rdx_43);
                            uint16_t rcx_208;
                            
                            if (rax_7 >= rcx_206)
                            {
                                r9 = (r9_15 - rcx_206);
                                rax_7 -= rcx_206;
                                r8_18 |= 8;
                                rdx_43 -= ((int16_t)(rdx_43 >> 5));
                                rcx_208 = rdx_43;
                            }
                            else
                            {
                                r9 = rcx_206;
                                rcx_208 = (((int16_t)((0x800 - rdx_43) >> 5)) + rdx_43);
                            }
                            
                            *(uint16_t*)((r10_15 + rbp) + 0x644) = rcx_208;
                            
                            if (r8_18 == 0xffffffff)
                            {
                                r15 = (r15_2 + 0x112);
                                r13 -= 0xc;
                                break;
                            }
                        }
                        else
                        {
                            r8_18 = (r8_17 << i_5);
                            int32_t rdi_7 = 1;
                            int32_t rbx_14 = 1;
                            void* r14_3 = (((char*)rbp + 0x55e) + ((((uint64_t)r8_18) - ((uint64_t)rdx_35)) << 1));
                            int32_t i_1;
                            
                            do
                            {
                                uint64_t rcx_164 = ((uint64_t)rbx_14);
                                uint32_t rdx_38 = ((uint32_t)*(uint16_t*)((char*)r14_3 + (rcx_164 << 1)));
                                
                                if (r9 < 0x1000000)
                                {
                                    rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                                    r9 <<= 8;
                                    r11 = &r11[1];
                                }
                                
                                rbx_14 *= 2;
                                int32_t rcx_168 = ((r9 >> 0xb) * rdx_38);
                                uint16_t rcx_170;
                                
                                if (rax_7 >= rcx_168)
                                {
                                    r9 -= rcx_168;
                                    rax_7 -= rcx_168;
                                    rbx_14 += 1;
                                    r8_18 |= rdi_7;
                                    rdx_38 -= ((int16_t)(rdx_38 >> 5));
                                    rcx_170 = rdx_38;
                                }
                                else
                                {
                                    r9 = rcx_168;
                                    rcx_170 = (((int16_t)((0x800 - rdx_38) >> 5)) + rdx_38);
                                }
                                
                                rdi_7 *= 2;
                                *(uint16_t*)((char*)r14_3 + (rcx_164 << 1)) = rcx_170;
                                i_1 = i_5;
                                i_5 -= 1;
                            } while (i_1 != 1);
                            r14 = var_58;
                        }
                    }
                    
                    r10_16 = (r8_18 + 1);
                    rsi = var_80;
                    int32_t rdx_44 = var_84;
                    var_84 = var_88;
                    var_7c = var_80;
                    var_80 = rdx_44;
                    var_88 = r10_16;
                    
                    if (rax_6 != 0)
                    {
                        if (r8_18 >= rax_6)
                            return 1;
                        
                        rbx_18 = arg_20;
                    }
                    else
                    {
                        rbx_18 = arg_20;
                        
                        if (r8_18 >= rbx_18)
                            return 1;
                    }
                    
                    uint32_t rcx_213 = 0xa;
                    
                    if (r13 < 0x13)
                        rcx_213 = 7;
                    
                    r13 = rcx_213;
                }
                
                if (arg2 == r12)
                    return 1;
                
                void* rdx_46 = (arg2 - r12);
                uint64_t r8_20 = ((uint64_t)(r15_2 + 2));
                uint64_t rcx_216 = ((uint64_t)r10_16);
                
                if (rdx_46 < ((uint64_t)(r15_2 + 2)))
                    r8_20 = ((uint64_t)rdx_46);
                
                char* r10_17 = nullptr;
                
                if (r12 < rcx_216)
                    r10_17 = rax_5;
                
                char* r10_18 = (r10_17 - rcx_216);
                arg_20 = (rbx_18 + r8_20);
                r15 = ((r15_2 + 2) - r8_20);
                char* rdx_47 = (r10_18 + r12);
                
                if (&rdx_47[r8_20] > rax_5)
                {
                    int32_t i_2;
                    
                    do
                    {
                        r12[r14] = rdx_47[r14];
                        void* rcx_220 = &rdx_47[1];
                        rdx_47 = nullptr;
                        r12 = &r12[1];
                        
                        if (rcx_220 != rax_5)
                            rdx_47 = rcx_220;
                        
                        i_2 = r8_20;
                        r8_20 = ((uint64_t)(r8_20 - 1));
                    } while (i_2 != 1);
                }
                else
                {
                    void* rdx_48 = &r12[r14];
                    void* r8_21 = (r8_20 + rdx_48);
                    r12 = &r12[((uint64_t)r8_20)];
                    
                    do
                    {
                        *(uint8_t*)rdx_48 = *(uint8_t*)(r10_18 + rdx_48);
                        rdx_48 += 1;
                    } while (rdx_48 != r8_21);
                }
                
                r8 = arg_20;
            }
        }
        else
        {
            r9 = rcx_7;
            void* r14_1 = ((char*)rbp + 0xe6c);
            *(uint16_t*)((char*)rbp + (rbx_3 << 1)) = (((int16_t)((0x800 - rdx_2) >> 5)) + rdx_2);
            char* rdi_3;
            
            if ((rax_6 != 0 || r8 != 0))
            {
                rdi_3 = rax_5;
                char* rcx_10 = r12;
                
                if (r12 == 0)
                    rcx_10 = rdi_3;
                
                r14_1 += (((uint64_t)(((((uint32_t)rcx_10[(var_58 - 1)]) >> (8 - rbx)) + ((arg_20 & rax_4) << rbx)) * 0x300)) << 1);
            }
            else
                rdi_3 = rax_5;
            
            int32_t i_3 = 1;
            
            if (r13 >= 7)
            {
                uint64_t rcx_23 = ((uint64_t)var_88);
                char* rdx_8 = nullptr;
                int32_t rbx_4 = 0x100;
                
                if (r12 < rcx_23)
                    rdx_8 = rdi_3;
                
                uint32_t rsi_1 = ((uint32_t)*(uint8_t*)(((rdx_8 - rcx_23) + *(uint64_t*)((char*)r10 + 0x18)) + r12));
                
                do
                {
                    rsi_1 *= 2;
                    int32_t r10_3 = (rbx_4 & rsi_1);
                    uint64_t rdx_13 = ((((uint64_t)r10_3) + ((uint64_t)rbx_4)) + ((uint64_t)i_3));
                    uint32_t rdx_14 = ((uint32_t)*(uint16_t*)((char*)r14_1 + (rdx_13 << 1)));
                    
                    if (r9 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    i_3 *= 2;
                    int32_t rcx_29 = ((r9 >> 0xb) * rdx_14);
                    uint16_t rcx_31;
                    
                    if (rax_7 >= rcx_29)
                    {
                        r9 -= rcx_29;
                        rax_7 -= rcx_29;
                        i_3 += 1;
                        rdx_14 -= ((int16_t)(rdx_14 >> 5));
                        rcx_31 = rdx_14;
                    }
                    else
                    {
                        r9 = rcx_29;
                        r10_3 = !(r10_3);
                        rcx_31 = (((int16_t)((0x800 - rdx_14) >> 5)) + rdx_14);
                    }
                    
                    rbx_4 &= r10_3;
                    *(uint16_t*)((char*)r14_1 + (rdx_13 << 1)) = rcx_31;
                } while (i_3 < 0x100);
                
                rsi = var_7c;
            }
            else
            {
                do
                {
                    uint64_t i_4 = ((uint64_t)i_3);
                    uint32_t rdx_7 = ((uint32_t)*(uint16_t*)((char*)r14_1 + (i_4 << 1)));
                    
                    if (r9 < 0x1000000)
                    {
                        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
                        r9 <<= 8;
                        r11 = &r11[1];
                    }
                    
                    i_3 *= 2;
                    int32_t rcx_18 = ((r9 >> 0xb) * rdx_7);
                    uint16_t rcx_20;
                    
                    if (rax_7 >= rcx_18)
                    {
                        r9 -= rcx_18;
                        rax_7 -= rcx_18;
                        i_3 += 1;
                        rdx_7 -= ((int16_t)(rdx_7 >> 5));
                        rcx_20 = rdx_7;
                    }
                    else
                    {
                        r9 = rcx_18;
                        rcx_20 = (((int16_t)((0x800 - rdx_7) >> 5)) + rdx_7);
                    }
                    
                    *(uint16_t*)((char*)r14_1 + (i_4 << 1)) = rcx_20;
                } while (i_3 < 0x100);
            }
            
            r14 = var_58;
            r12[r14] = i_3;
            r12 = &r12[1];
            r13 = ((uint32_t)*(uint8_t*)(((uint64_t)r13) + &data_140006110));
            r8 = (arg_20 + 1);
            arg_20 = r8;
        }
        
        if (r12 >= arg2)
            break;
        
        if (r11 >= arg3)
            break;
        
        r10 = arg1;
        rdx_1 = var_5c;
    }
    
    if (r9 < 0x1000000)
    {
        rax_7 = ((rax_7 << 8) | ((uint32_t)*(uint8_t*)r11));
        r9 <<= 8;
        r11 = &r11[1];
    }
    
    arg1[0xb] = rax_7;
    arg1[0x10] = arg_20;
    arg1[0x13] = var_88;
    *(uint64_t*)((char*)arg1 + 0x20) = r11;
    arg1[0xa] = r9;
    arg1[0x17] = r15;
    *(uint64_t*)((char*)arg1 + 0x30) = r12;
    arg1[0x14] = var_84;
    arg1[0x15] = var_80;
    arg1[0x16] = rsi;
    arg1[0x12] = r13;
    return 0;
}

                        cc cc cc cc cc cc cc cc                                                          ........

int64_t sub_1400035d0(int32_t* arg1, int64_t arg2, int64_t arg3)

int32_t result  {Register rax}
int32_t rax_3  {Register rax}
int32_t* arg1  {Register rcx}
int64_t rcx  {Register rcx}
int64_t arg2  {Register rdx}
int64_t rdx  {Register rdx}
int64_t arg3  {Register r8}
uint64_t r8_1  {Register r8}

{
    do
    {
        int64_t rdx = arg2;
        
        if (arg1[0x11] == 0)
        {
            int64_t rcx = *(uint64_t*)((char*)arg1 + 0x30);
            uint64_t r8_1 = ((uint64_t)(arg1[3] - arg1[0x10]));
            
            if ((arg2 - rcx) > r8_1)
                rdx = (r8_1 + rcx);
        }
        
        int32_t result = sub_140002840(arg1, rdx, arg3);
        
        if (result != 0)
            return result;
        
        int32_t rax_3 = arg1[3];
        
        if (arg1[0x10] >= rax_3)
            arg1[0x11] = rax_3;
        
        sub_140004110(arg1, arg2);
        
        if (*(uint64_t*)((char*)arg1 + 0x30) >= arg2)
            break;
        
        if (*(uint64_t*)((char*)arg1 + 0x20) >= arg3)
            break;
    } while (arg1[0x17] < 0x112);
    
    if (arg1[0x17] > 0x112)
        arg1[0x17] = 0x112;
    
    return 0;
}


uint64_t sub_140003670(int32_t* arg1, int64_t arg2, int64_t* arg3, char* arg4, int64_t* arg5, int32_t arg6, int32_t* arg7)

void* i_3  {Frame offset -68}
uint64_t var_60_1  {Frame offset -60}
int64_t var_58  {Frame offset -58}
int32_t arg_8  {Frame offset 8}
int64_t arg_10  {Frame offset 10}
char* arg_20  {Frame offset 20}
int64_t* arg5  {Frame offset 28}
int32_t arg6  {Frame offset 30}
int32_t* arg7  {Frame offset 38}
uint64_t rax_1  {Register rax}
int32_t rax_3  {Register rax}
char rax_4  {Register rax}
int32_t rax_8  {Register rax}
int32_t rax_9  {Register rax}
uint64_t rax_11  {Register rax}
int32_t rax_13  {Register rax}
int32_t* arg1  {Register rcx}
int64_t rcx_1  {Register rcx}
uint32_t rcx_10  {Register rcx}
int64_t rcx_14  {Register rcx}
void* rcx_18  {Register rcx}
void* rcx_20  {Register rcx}
int64_t arg2  {Register rdx}
int64_t rdx  {Register rdx}
void* i_1  {Register rbp}
int32_t* rsi_1  {Register rsi}
int32_t rsi_2  {Register rsi}
int64_t rsi_4  {Register rsi}
int32_t rdi_1  {Register rdi}
int64_t rdi_3  {Register rdi}
uint64_t rdi_4  {Register rdi}
int32_t rdi_5  {Register rdi}
int64_t* arg3  {Register r8}
void* r8_1  {Register r8}
char* arg4  {Register r9}
uint64_t r9  {Register r9}
void* r12_1  {Register r12}
int64_t r13_1  {Register r13}
char* r14  {Register r14}
void* i_2  {Register r15}
int32_t r15  {Register r15}
void* i  {Register temp0}

{
    arg_20 = arg4;
    arg_10 = arg2;
    int64_t rdx = *(uint64_t*)arg3;
    char* r14 = arg4;
    uint64_t r9 = 0;
    int64_t var_58 = rdx;
    void* i_2 = *(uint64_t*)arg5;
    *(uint64_t*)arg3 = 0;
    void* i_3 = i_2;
    *(uint64_t*)arg5 = 0;
    
    while (true)
    {
        uint64_t rax_1 = *(uint64_t*)((char*)arg1 + 0x30);
        int64_t r13_1 = *(uint64_t*)((char*)arg1 + 0x38);
        uint64_t var_60_1 = rax_1;
        
        if (rax_1 == r13_1)
        {
            rax_1 = r9;
            *(uint64_t*)((char*)arg1 + 0x30) = r9;
            var_60_1 = rax_1;
        }
        
        int32_t rdi_1 = r9;
        int64_t rcx_1 = (r13_1 - rax_1);
        void* i_1 = i_2;
        void* r12_1 = r9;
        
        if (rdx <= rcx_1)
            rdi_1 = arg6;
        
        arg_8 = rdi_1;
        
        if (rdx <= rcx_1)
            r13_1 = (rax_1 + rdx);
        
        sub_140004110(arg1, r13_1);
        int32_t* rsi_1 = arg7;
        *(uint32_t*)rsi_1 = 0;
        int32_t rdi_5;
        
        if (arg1[0x17] != 0x112)
        {
            while (true)
            {
                if (arg1[0x18] == 0)
                    goto label_1400037a6;
                
                if (i_1 != 0)
                {
                    void* i;
                    
                    do
                    {
                        int32_t rax_3 = arg1[0x1b];
                        
                        if (rax_3 >= 5)
                            break;
                        
                        r12_1 += 1;
                        char rax_4 = *(uint8_t*)r14;
                        r14 = &r14[1];
                        *(uint8_t*)((((uint64_t)rax_3) + arg1) + 0x70) = rax_4;
                        arg1[0x1b] += 1;
                        i = i_1;
                        i_1 -= 1;
                    } while (i != 1);
                }
                
                if (arg1[0x1b] < 5)
                {
                    rdi_5 = 0;
                    i_2 = i_3;
                    *(uint32_t*)arg7 = 3;
                    goto label_1400039f8;
                }
                
                if (arg1[0x1c] == 0)
                {
                    uint32_t rcx_10 = ((((((((uint32_t)*(uint8_t*)((char*)arg1 + 0x71)) << 8) | ((uint32_t)*(uint8_t*)((char*)arg1 + 0x72))) << 8) | ((uint32_t)*(uint8_t*)((char*)arg1 + 0x73))) << 8) | ((uint32_t)arg1[0x1d]));
                    arg1[0xa] = 0xffffffff;
                    arg1[0xb] = rcx_10;
                    arg1[0x18] = 0;
                    arg1[0x1b] = 0;
                label_1400037a6:
                    int32_t r15 = 0;
                    
                    if (*(uint64_t*)((char*)arg1 + 0x30) < r13_1)
                        goto label_1400037d7;
                    
                    int32_t rax_8 = arg1[0x17];
                    
                    if ((rax_8 == 0 && arg1[0xb] == rax_8))
                    {
                        rdi_5 = 0;
                        i_2 = i_3;
                        *(uint32_t*)arg7 = 4;
                        goto label_1400039f8;
                    }
                    
                    if (rdi_1 == 0)
                    {
                        rdi_5 = 0;
                        i_2 = i_3;
                        *(uint32_t*)arg7 = 2;
                        goto label_1400039f8;
                    }
                    
                    if (rax_8 != 0)
                        *(uint32_t*)arg7 = 2;
                    else
                    {
                        r15 = (rax_8 + 1);
                    label_1400037d7:
                        
                        if (arg1[0x19] != 0)
                        {
                            int64_t rcx_14;
                            int64_t rdi_3;
                            rdi_3 = __memfill_u16(*(uint64_t*)((char*)arg1 + 0x10), 0x400, ((uint64_t)((0x300 << (((int8_t)arg1[1]) + ((int8_t)*(uint32_t*)arg1))) + 0x736)));
                            arg1[0x16] = 1;
                            arg1[0x15] = 1;
                            arg1[0x14] = 1;
                            arg1[0x13] = 1;
                            arg1[0x12] = 0;
                            arg1[0x19] = 0;
                        }
                        
                        uint64_t rdi_4 = ((uint64_t)arg1[0x1b]);
                        void* rcx_18;
                        
                        if (rdi_4 != 0)
                        {
                            int32_t rsi_2 = 0;
                            
                            if (rdi_4 < 0x14)
                            {
                                void* rcx_20 = (&arg1[0x1c] + rdi_4);
                                
                                do
                                {
                                    uint64_t rax_11 = ((uint64_t)rsi_2);
                                    
                                    if (rax_11 >= i_1)
                                        break;
                                    
                                    rdi_4 = ((uint64_t)(rdi_4 + 1));
                                    *(uint8_t*)rcx_20 = r14[rax_11];
                                    rsi_2 += 1;
                                    rcx_20 += 1;
                                } while (rdi_4 < 0x14);
                            }
                            
                            arg1[0x1b] = rdi_4;
                            
                            if ((rdi_4 < 0x14 || r15 != 0))
                            {
                                int32_t rax_13 = sub_140003b00(arg1, &arg1[0x1c], ((uint64_t)rdi_4));
                                
                                if (rax_13 == 0)
                                {
                                    r12_1 += ((uint64_t)rsi_2);
                                    goto label_1400039bd;
                                }
                                
                                if ((r15 == 0 || rax_13 == 2))
                                    goto label_1400038f6;
                                
                                *(uint32_t*)arg7 = 2;
                            }
                            else
                            {
                            label_1400038f6:
                                *(uint64_t*)((char*)arg1 + 0x20) = &arg1[0x1c];
                                
                                if (sub_1400035d0(arg1, r13_1, &arg1[0x1c]) == 0)
                                {
                                    rcx_18 = ((uint64_t)((rsi_2 - 0x70) + ((arg1[8] - rdi_4) - arg1)));
                                    r14 += rcx_18;
                                    i_1 -= rcx_18;
                                    arg1[0x1b] = 0;
                                    goto label_14000391c;
                                }
                            }
                        }
                        else
                        {
                            void* r8_1;
                            
                            if ((i_1 < 0x14 || r15 != 0))
                            {
                                int32_t rax_9 = sub_140003b00(arg1, r14, i_1);
                                
                                if (rax_9 == 0)
                                {
                                    sub_1400010d0(&arg1[0x1c], r14, i_1);
                                    r12_1 += i_1;
                                    arg1[0x1b] = i_1;
                                label_1400039bd:
                                    rdi_5 = 0;
                                    i_2 = i_3;
                                    *(uint32_t*)arg7 = 3;
                                    goto label_1400039f8;
                                }
                                
                                if ((r15 == 0 || rax_9 == 2))
                                {
                                    r8_1 = r14;
                                    goto label_140003863;
                                }
                                
                                *(uint32_t*)arg7 = 2;
                            }
                            else
                            {
                                r8_1 = (((char*)i_1 - 0x14) + r14);
                            label_140003863:
                                *(uint64_t*)((char*)arg1 + 0x20) = r14;
                                
                                if (sub_1400035d0(arg1, r13_1, r8_1) == 0)
                                {
                                    rcx_18 = (*(uint64_t*)((char*)arg1 + 0x20) - r14);
                                    r14 = *(uint64_t*)((char*)arg1 + 0x20);
                                    i_1 -= rcx_18;
                                label_14000391c:
                                    r12_1 += rcx_18;
                                    
                                    if (arg1[0x17] != 0x112)
                                    {
                                        rdi_1 = arg_8;
                                        continue;
                                    }
                                    
                                    rsi_1 = arg7;
                                    i_2 = i_3;
                                    break;
                                }
                            }
                        }
                    }
                }
                
                i_2 = i_3;
                rdi_5 = 1;
                goto label_1400039f8;
            }
        }
        
        if (arg1[0xb] == 0)
            *(uint32_t*)rsi_1 = 1;
        
        rdi_5 = arg1[0xb] != 0;
    label_1400039f8:
        i_2 -= r12_1;
        r14 = (arg_20 + r12_1);
        arg_20 = r14;
        *(uint64_t*)arg5 += r12_1;
        int64_t rsi_4 = (*(uint64_t*)((char*)arg1 + 0x30) - var_60_1);
        i_3 = i_2;
        sub_1400010d0(arg_10, (*(uint64_t*)((char*)arg1 + 0x18) + var_60_1), rsi_4);
        rdx = (var_58 - rsi_4);
        arg_10 += rsi_4;
        var_58 = rdx;
        *(uint64_t*)arg3 += rsi_4;
        
        if (rdi_5 != 0)
            return ((uint64_t)rdi_5);
        
        if (rsi_4 == 0)
            break;
        
        r9 = ((uint64_t)rdi_5);
        
        if (rdx == 0)
            break;
    }
    
    return 0;
}

                                                            cc cc cc cc cc cc cc cc cc cc cc cc                      ............

int64_t sub_140003aa0(void* arg1, int64_t arg2)

int64_t result  {Register rax}
void* arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t rdx_1  {Register rdx}

{
    *(uint64_t*)(arg2 + 8)(arg2, *(uint64_t*)((char*)arg1 + 0x10));
    int64_t rdx_1 = *(uint64_t*)((char*)arg1 + 0x18);
    *(uint64_t*)((char*)arg1 + 0x10) = 0;
    int64_t result = *(uint64_t*)(arg2 + 8)(arg2, rdx_1);
    *(uint64_t*)((char*)arg1 + 0x18) = 0;
    return result;
}

                                                                                             cc                                 .

void sub_140003ae0(void* arg1)

void* arg1  {Register rcx}

{
    *(uint32_t*)((char*)arg1 + 0x60) = 1;
    *(uint64_t*)((char*)arg1 + 0x30) = 0;
    *(uint32_t*)((char*)arg1 + 0x5c) = 0;
    *(uint32_t*)((char*)arg1 + 0x6c) = 0;
    *(uint64_t*)((char*)arg1 + 0x40) = 0;
    *(uint32_t*)((char*)arg1 + 0x64) = 1;
}

                                                                                             cc                                 .

uint64_t sub_140003b00(char* arg1, char* arg2, int64_t arg3)

int32_t rax  {Register rax}
int32_t rax_4  {Register rax}
char* arg1  {Register rcx}
int32_t rcx_5  {Register rcx}
int32_t rcx_17  {Register rcx}
int64_t rcx_18  {Register rcx}
int32_t rcx_25  {Register rcx}
int32_t rcx_29  {Register rcx}
void* const rcx_30  {Register rcx}
int32_t rcx_34  {Register rcx}
int32_t rcx_38  {Register rcx}
int32_t rcx_42  {Register rcx}
int32_t rcx_49  {Register rcx}
int32_t rcx_53  {Register rcx}
int32_t rcx_58  {Register rcx}
int32_t rcx_63  {Register rcx}
int32_t rcx_76  {Register rcx}
char* arg2  {Register rdx}
int64_t rdx_1  {Register rdx}
int32_t i  {Register rdx}
int64_t rdx_6  {Register rdx}
uint32_t rdx_12  {Register rdx}
int32_t rdx_17  {Register rdx}
int32_t rdx_18  {Register rdx}
uint32_t rdx_19  {Register rdx}
uint32_t rdx_25  {Register rdx}
void* rbx  {Register rbx}
int32_t rbp  {Register rbp}
uint32_t rbp_1  {Register rbp}
int32_t rbp_2  {Register rbp}
uint64_t rsi  {Register rsi}
int32_t rsi_1  {Register rsi}
int32_t rsi_2  {Register rsi}
uint64_t rdi_2  {Register rdi}
int32_t rdi_3  {Register rdi}
int64_t arg3  {Register r8}
uint32_t r8_3  {Register r8}
uint64_t r8_4  {Register r8}
int32_t r8_6  {Register r8}
void* r8_11  {Register r8}
uint32_t r8_12  {Register r8}
int32_t i_1  {Register r8}
int64_t r8_15  {Register r8}
int32_t r9  {Register r9}
int32_t r9_1  {Register r9}
int32_t r9_2  {Register r9}
int32_t r9_3  {Register r9}
int32_t r9_4  {Register r9}
int32_t r9_5  {Register r9}
int32_t r9_6  {Register r9}
int32_t r9_7  {Register r9}
char* r10  {Register r10}
int32_t r11_1  {Register r11}
void* r11_4  {Register r11}
int32_t i_4  {Register r11}
int32_t i_5  {Register r11}
int32_t r12_1  {Register r12}
int64_t r13  {Register r13}
int32_t r14  {Register r14}
uint64_t r15_2  {Register r15}
int64_t r15_3  {Register r15}
int32_t r15_4  {Register r15}
int32_t i_2  {Register temp0}
int32_t i_3  {Register temp1}

{
    int32_t r9 = *(uint32_t*)(arg1 + 0x28);
    void* rbx = &arg2[arg3];
    int64_t r13 = *(uint64_t*)(arg1 + 0x10);
    uint64_t rsi = ((uint64_t)*(uint32_t*)(arg1 + 0x48));
    int32_t r14 = 1;
    int32_t rbp = *(uint32_t*)(arg1 + 0x40);
    int32_t rax = *(uint32_t*)(arg1 + 0x2c);
    char* r10 = arg2;
    uint64_t rdi_2 = ((uint64_t)(((1 << ((int8_t)*(uint32_t*)(arg1 + 8))) - 1) & rbp));
    uint64_t r15_2 = (((uint64_t)(rsi << 4)) + ((uint64_t)rdi_2));
    
    if (r9 >= 0x1000000)
        goto label_140003b83;
    
    if (r10 < rbx)
    {
        rax = ((rax << 8) | ((uint32_t)*(uint8_t*)r10));
        r9 <<= 8;
        r10 = &r10[1];
    label_140003b83:
        int32_t rcx_5 = ((r9 >> 0xb) * ((uint32_t)*(uint16_t*)(r13 + (r15_2 << 1))));
        int32_t r9_1;
        int32_t r12_1;
        
        if (rax < rcx_5)
        {
            int64_t r15_3 = (r13 + 0xe6c);
            r9_1 = rcx_5;
            
            if ((*(uint32_t*)(arg1 + 0x44) != 0 || rbp != 0))
            {
                int64_t rdx_1 = *(uint64_t*)(arg1 + 0x30);
                
                if (rdx_1 == 0)
                    rdx_1 = *(uint64_t*)(arg1 + 0x38);
                
                r15_3 += (((uint64_t)(((((uint32_t)*(uint8_t*)((rdx_1 + *(uint64_t*)(arg1 + 0x18)) - 1)) >> (8 - *(uint8_t*)arg1)) + ((((1 << ((int8_t)*(uint32_t*)(arg1 + 4))) - 1) & rbp) << ((int8_t)*(uint32_t*)arg1))) * 0x300)) << 1);
            }
            
            if (rsi >= 7)
            {
                uint64_t r8_4 = ((uint64_t)*(uint32_t*)(arg1 + 0x4c));
                int64_t rdx_6 = *(uint64_t*)(arg1 + 0x30);
                int64_t rcx_18;
                
                if (rdx_6 >= r8_4)
                    rcx_18 = 0;
                else
                    rcx_18 = *(uint64_t*)(arg1 + 0x38);
                
                int32_t rsi_1 = 0x100;
                int32_t r11_1 = 1;
                uint32_t rbp_1 = ((uint32_t)*(uint8_t*)(((rdx_6 - r8_4) + rcx_18) + *(uint64_t*)(arg1 + 0x18)));
                
                while (true)
                {
                    rbp_1 *= 2;
                    int32_t r8_6 = (rsi_1 & rbp_1);
                    uint32_t rdx_12 = ((uint32_t)*(uint16_t*)(r15_3 + (((((uint64_t)r8_6) + ((uint64_t)r11_1)) + ((uint64_t)rsi_1)) << 1)));
                    
                    if (r9_1 < 0x1000000)
                    {
                        if (r10 >= rbx)
                            return 0;
                        
                        rax = ((rax << 8) | ((uint32_t)*(uint8_t*)r10));
                        r9_1 <<= 8;
                        r10 = &r10[1];
                    }
                    
                    r11_1 *= 2;
                    int32_t rcx_25 = ((r9_1 >> 0xb) * rdx_12);
                    
                    if (rax >= rcx_25)
                    {
                        r9_1 -= rcx_25;
                        rax -= rcx_25;
                        r11_1 += 1;
                    }
                    else
                    {
                        r9_1 = rcx_25;
                        r8_6 = !(r8_6);
                    }
                    
                    if (r11_1 >= 0x100)
                        break;
                    
                    rsi_1 &= r8_6;
                }
            }
            else
            {
                for (int32_t i = 1; i < 0x100; )
                {
                    uint32_t r8_3 = ((uint32_t)*(uint16_t*)(r15_3 + (((uint64_t)i) << 1)));
                    
                    if (r9_1 < 0x1000000)
                    {
                        if (r10 >= rbx)
                            return 0;
                        
                        rax = ((rax << 8) | ((uint32_t)*(uint8_t*)r10));
                        r9_1 <<= 8;
                        r10 = &r10[1];
                    }
                    
                    i *= 2;
                    int32_t rcx_17 = ((r9_1 >> 0xb) * r8_3);
                    
                    if (rax >= rcx_17)
                    {
                        r9_1 -= rcx_17;
                        rax -= rcx_17;
                        i += 1;
                    }
                    else
                        r9_1 = rcx_17;
                }
            }
            
            r12_1 = 1;
            goto label_1400040e8;
        }
        
        int32_t r9_2 = (r9 - rcx_5);
        int32_t rax_4 = (rax - rcx_5);
        
        if (r9_2 >= 0x1000000)
            goto label_140003d21;
        
        if (r10 < rbx)
        {
            rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
            r9_2 <<= 8;
            r10 = &r10[1];
        label_140003d21:
            int32_t rsi_2 = 0;
            int32_t rbp_2 = 3;
            int32_t rcx_29 = ((r9_2 >> 0xb) * ((uint32_t)*(uint16_t*)((r13 + (rsi << 1)) + 0x180)));
            void* const rcx_30;
            int32_t r9_3;
            int32_t r15_4;
            
            if (rax_4 >= rcx_29)
            {
                int32_t r9_4 = (r9_2 - rcx_29);
                rax_4 -= rcx_29;
                r12_1 = 3;
                
                if (r9_4 >= 0x1000000)
                    goto label_140003d80;
                
                if (r10 < rbx)
                {
                    rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                    r9_4 <<= 8;
                    r10 = &r10[1];
                label_140003d80:
                    int32_t rcx_34 = ((r9_4 >> 0xb) * ((uint32_t)*(uint16_t*)((r13 + (rsi << 1)) + 0x198)));
                    int32_t rcx_38;
                    int32_t r9_5;
                    
                    if (rax_4 >= rcx_34)
                    {
                        int32_t r9_6 = (r9_4 - rcx_34);
                        rax_4 -= rcx_34;
                        
                        if (r9_6 >= 0x1000000)
                            goto label_140003e14;
                        
                        if (r10 < rbx)
                        {
                            rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                            r9_6 <<= 8;
                            r10 = &r10[1];
                        label_140003e14:
                            int32_t rcx_42 = ((r9_6 >> 0xb) * ((uint32_t)*(uint16_t*)((r13 + (rsi << 1)) + 0x1b0)));
                            
                            if (rax_4 < rcx_42)
                            {
                                r9_3 = rcx_42;
                            label_140003e69:
                                rcx_30 = 0xa68;
                                r15_4 = 0xc;
                                goto label_140003e79;
                            }
                            
                            r9_5 = (r9_6 - rcx_42);
                            rax_4 -= rcx_42;
                            
                            if (r9_5 >= 0x1000000)
                                goto label_140003e57;
                            
                            if (r10 < rbx)
                            {
                                rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                                r9_5 <<= 8;
                                r10 = &r10[1];
                            label_140003e57:
                                rcx_38 = ((r9_5 >> 0xb) * ((uint32_t)*(uint16_t*)((r13 + (rsi << 1)) + 0x1c8)));
                                
                                if (rax_4 >= rcx_38)
                                    goto label_140003e64;
                                
                                r9_3 = rcx_38;
                                goto label_140003e69;
                            }
                        }
                    }
                    else
                    {
                        r9_5 = rcx_34;
                        
                        if (rcx_34 >= 0x1000000)
                            goto label_140003dbb;
                        
                        if (r10 < rbx)
                        {
                            rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                            r9_5 <<= 8;
                            r10 = &r10[1];
                        label_140003dbb:
                            rcx_38 = ((r9_5 >> 0xb) * ((uint32_t)*(uint16_t*)((r13 + (r15_2 << 1)) + 0x1e0)));
                            
                            if (rax_4 >= rcx_38)
                            {
                            label_140003e64:
                                r9_3 = (r9_5 - rcx_38);
                                rax_4 -= rcx_38;
                                goto label_140003e69;
                            }
                            
                            if ((rcx_38 >= 0x1000000 || r10 < rbx))
                                return 3;
                        }
                    }
                }
            }
            else
            {
                r9_3 = rcx_29;
                r12_1 = 2;
                rcx_30 = 0x664;
                r15_4 = 0;
            label_140003e79:
                void* r8_11 = ((char*)rcx_30 + r13);
                
                if (r9_3 >= 0x1000000)
                    goto label_140003ea5;
                
                if (r10 < rbx)
                {
                    rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                    r9_3 <<= 8;
                    r10 = &r10[1];
                label_140003ea5:
                    int32_t rcx_49 = ((r9_3 >> 0xb) * ((uint32_t)*(uint16_t*)((char*)rcx_30 + r13)));
                    int32_t rdi_3;
                    void* r11_4;
                    
                    if (rax_4 < rcx_49)
                    {
                        r9_1 = rcx_49;
                        rdi_3 = 8;
                        r11_4 = ((char*)r8_11 + ((((uint64_t)((int32_t)(rdi_2 << 3))) + 2) << 1));
                    label_140003f34:
                        int32_t rdx_17 = 1;
                        
                        do
                        {
                            uint32_t r8_12 = ((uint32_t)*(uint16_t*)((char*)r11_4 + (((uint64_t)rdx_17) << 1)));
                            
                            if (r9_1 < 0x1000000)
                            {
                                if (r10 >= rbx)
                                    return 0;
                                
                                rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                                r9_1 <<= 8;
                                r10 = &r10[1];
                            }
                            
                            rdx_17 *= 2;
                            int32_t rcx_58 = ((r9_1 >> 0xb) * r8_12);
                            
                            if (rax_4 >= rcx_58)
                            {
                                r9_1 -= rcx_58;
                                rax_4 -= rcx_58;
                                rdx_17 += 1;
                            }
                            else
                                r9_1 = rcx_58;
                        } while (rdx_17 < rdi_3);
                        
                        int32_t rdx_18 = (rdx_17 + (rsi_2 - rdi_3));
                        
                        if (r15_4 < 4)
                        {
                            int32_t i_1 = 1;
                            
                            if (rdx_18 < 4)
                                rbp_2 = rdx_18;
                            
                            do
                            {
                                uint32_t rdx_19 = ((uint32_t)*(uint16_t*)((((((uint64_t)(rbp_2 << 6)) << 1) + r13) + (((uint64_t)i_1) << 1)) + 0x360));
                                
                                if (r9_1 < 0x1000000)
                                {
                                    if (r10 >= rbx)
                                        return 0;
                                    
                                    rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                                    r9_1 <<= 8;
                                    r10 = &r10[1];
                                }
                                
                                i_1 *= 2;
                                int32_t rcx_63 = ((r9_1 >> 0xb) * rdx_19);
                                
                                if (rax_4 >= rcx_63)
                                {
                                    r9_1 -= rcx_63;
                                    rax_4 -= rcx_63;
                                    i_1 += 1;
                                }
                                else
                                    r9_1 = rcx_63;
                            } while (i_1 < 0x40);
                            
                            if ((i_1 - 0x40) >= 4)
                            {
                                int32_t i_4 = (((i_1 - 0x40) >> 1) - 1);
                                int64_t r8_15;
                                
                                if ((i_1 - 0x40) >= 0xe)
                                {
                                    int32_t i_5 = (i_4 - 4);
                                    int32_t i_2;
                                    
                                    do
                                    {
                                        if (r9_1 < 0x1000000)
                                        {
                                            if (r10 >= rbx)
                                                return 0;
                                            
                                            rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                                            r9_1 <<= 8;
                                            r10 = &r10[1];
                                        }
                                        
                                        r9_1 u>>= 1;
                                        rax_4 -= ((((rax_4 - r9_1) >> 0x1f) - 1) & r9_1);
                                        i_2 = i_5;
                                        i_5 -= 1;
                                    } while (i_2 != 1);
                                    r8_15 = (r13 + 0x644);
                                    i_4 = 4;
                                }
                                else
                                    r8_15 = ((r13 + 0x55e) + ((((uint64_t)((((i_1 - 0x40) & 1) | 2) << i_4)) - ((uint64_t)(i_1 - 0x40))) << 1));
                                
                                int32_t i_3;
                                
                                do
                                {
                                    uint32_t rdx_25 = ((uint32_t)*(uint16_t*)(r8_15 + (((uint64_t)r14) << 1)));
                                    
                                    if (r9_1 < 0x1000000)
                                    {
                                        if (r10 >= rbx)
                                            return 0;
                                        
                                        rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                                        r9_1 <<= 8;
                                        r10 = &r10[1];
                                    }
                                    
                                    r14 *= 2;
                                    int32_t rcx_76 = ((r9_1 >> 0xb) * rdx_25);
                                    
                                    if (rax_4 >= rcx_76)
                                    {
                                        r9_1 -= rcx_76;
                                        rax_4 -= rcx_76;
                                        r14 += 1;
                                    }
                                    else
                                        r9_1 = rcx_76;
                                    
                                    i_3 = i_4;
                                    i_4 -= 1;
                                } while (i_3 != 1);
                            }
                        }
                        
                    label_1400040e8:
                        
                        if ((r9_1 < 0x1000000 && r10 >= rbx))
                            r12_1 = 0;
                        
                        return ((uint64_t)r12_1);
                    }
                    
                    int32_t r9_7 = (r9_3 - rcx_49);
                    rax_4 -= rcx_49;
                    
                    if (r9_7 >= 0x1000000)
                        goto label_140003ef8;
                    
                    if (r10 < rbx)
                    {
                        rax_4 = ((rax_4 << 8) | ((uint32_t)*(uint8_t*)r10));
                        r9_7 <<= 8;
                        r10 = &r10[1];
                    label_140003ef8:
                        int32_t rcx_53 = ((r9_7 >> 0xb) * ((uint32_t)*(uint16_t*)((char*)r8_11 + 2)));
                        
                        if (rax_4 >= rcx_53)
                        {
                            r9_1 = (r9_7 - rcx_53);
                            r11_4 = ((char*)r8_11 + 0x204);
                            rax_4 -= rcx_53;
                            rsi_2 = 0x10;
                            rdi_3 = 0x100;
                        }
                        else
                        {
                            r9_1 = rcx_53;
                            rdi_3 = 8;
                            r11_4 = ((char*)r8_11 + ((((uint64_t)((int32_t)(rdi_2 << 3))) + 0x82) << 1));
                            rsi_2 = 8;
                        }
                        
                        goto label_140003f34;
                    }
                }
            }
        }
    }
    
    return 0;
}


int32_t sub_140004110(void* arg1, int64_t arg2)

int32_t result  {Register rax}
int64_t rax_1  {Register rax}
void* arg1  {Register rcx}
int32_t rcx_2  {Register rcx}
int64_t arg2  {Register rdx}
int32_t i_1  {Register rdx}
uint64_t rsi_1  {Register rsi}
int64_t rdi_1  {Register rdi}
char* r8_1  {Register r8}
uint64_t r10  {Register r10}
int64_t r11_1  {Register r11}
int32_t i  {Register temp0}

{
    uint64_t r10 = ((uint64_t)*(uint32_t*)((char*)arg1 + 0x5c));
    int32_t result = ((int32_t)(r10 - 1));
    
    if (result <= 0x110)
    {
        int64_t r11_1 = *(uint64_t*)((char*)arg1 + 0x18);
        int32_t i_1 = r10;
        char* r8_1 = *(uint64_t*)((char*)arg1 + 0x30);
        uint64_t rsi_1 = ((uint64_t)*(uint32_t*)((char*)arg1 + 0x4c));
        int64_t rdi_1 = *(uint64_t*)((char*)arg1 + 0x38);
        
        if ((arg2 - r8_1) < r10)
            i_1 = (arg2 - r8_1);
        
        if (*(uint32_t*)((char*)arg1 + 0x44) == 0)
        {
            int32_t rcx_2 = *(uint32_t*)((char*)arg1 + 0xc);
            result = (rcx_2 - *(uint32_t*)((char*)arg1 + 0x40));
            
            if (result <= i_1)
                *(uint32_t*)((char*)arg1 + 0x44) = rcx_2;
        }
        
        *(uint32_t*)((char*)arg1 + 0x40) += i_1;
        *(uint32_t*)((char*)arg1 + 0x5c) = (r10 - i_1);
        
        if (i_1 != 0)
        {
            int32_t i;
            
            do
            {
                int64_t rax_1 = 0;
                
                if (r8_1 < rsi_1)
                    rax_1 = rdi_1;
                
                result = ((uint32_t)*(uint8_t*)(((rax_1 - rsi_1) + r8_1) + r11_1));
                r8_1[r11_1] = result;
                r8_1 = &r8_1[1];
                i = i_1;
                i_1 -= 1;
            } while (i != 1);
        }
        
        *(uint64_t*)((char*)arg1 + 0x30) = r8_1;
    }
    
    return result;
}


int64_t sub_1400041c0()

uint32_t rax_2  {Register rax}
int32_t rax_7  {Register rax}
int32_t rax_13  {Register rax}
int32_t rax_19  {Register rax}
int32_t result  {Register rax}
int32_t rcx_4  {Register rcx}
int32_t rcx_5  {Register rcx}
int32_t rcx_11  {Register rcx}
int32_t rcx_17  {Register rcx}
int32_t rcx_23  {Register rcx}
int32_t i  {Register rdx}
void* r8  {Register r8}

{
    int32_t i = 0;
    void* r8 = &data_1400070a0;
    int32_t result;
    
    do
    {
        r8 += 4;
        uint32_t rax_2 = (i >> 1);
        int32_t rcx_4 = (-((i & 1)) & 0xedb88320);
        i += 1;
        int32_t rcx_5 = (rcx_4 ^ rax_2);
        int32_t rax_7 = ((-((rcx_5 & 1)) & 0xedb88320) ^ (rcx_5 >> 1));
        int32_t rcx_11 = ((-((rax_7 & 1)) & 0xedb88320) ^ (rax_7 >> 1));
        int32_t rax_13 = ((-((rcx_11 & 1)) & 0xedb88320) ^ (rcx_11 >> 1));
        int32_t rcx_17 = ((-((rax_13 & 1)) & 0xedb88320) ^ (rax_13 >> 1));
        int32_t rax_19 = ((-((rcx_17 & 1)) & 0xedb88320) ^ (rcx_17 >> 1));
        int32_t rcx_23 = ((-((rax_19 & 1)) & 0xedb88320) ^ (rax_19 >> 1));
        result = ((-((rcx_23 & 1)) & 0xedb88320) ^ (rcx_23 >> 1));
        *(uint32_t*)((char*)r8 - 4) = result;
    } while (i < 0x100);
    
    return result;
}

                                       cc cc cc                                                               ...

uint64_t sub_140004270(int32_t arg1, char* arg2, int64_t arg3)

int32_t arg1  {Register rcx}
char* arg2  {Register rdx}
int64_t arg3  {Register r8}
char r9_1  {Register r9}
int64_t i  {Register temp0}

{
    if (arg3 != 0)
    {
        int64_t i;
        
        do
        {
            char r9_1 = *(uint8_t*)arg2;
            arg2 = &arg2[1];
            arg1 = ((arg1 >> 8) ^ *(uint32_t*)(&data_1400070a0 + (((uint64_t)(r9_1 ^ arg1)) << 2)));
            i = arg3;
            arg3 -= 1;
        } while (i != 1);
    }
    
    return ((uint64_t)arg1);
}

   cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                   ...............

int64_t sub_1400042b0(void* arg1, uint64_t arg2)

int64_t rax_1  {Register rax}
void* arg1  {Register rcx}
uint64_t arg2  {Register rdx}

{
    int64_t rax_1 = *(uint64_t*)((char*)arg1 + 0x10);
    
    if (rax_1 == 0)
        /* tailcall */
        return malloc(arg2);
    
    *(uint64_t*)((char*)arg1 + 0x18);
    /* jump -> rax_1 */
}

                              cc cc cc cc cc cc                                                            ......
data_1400042d0:
                                                48 8b 41 20 48 85 c0 74 07 48 8b 49 18 48 ff e0                  H.A H..t.H.I.H..
48 8b ca 48 ff 25 7e 1e 00 00 cc cc cc cc cc cc                                                  H..H.%~.........

int64_t sub_1400042f0(int64_t (** arg1)(void* arg1, uint64_t arg2), int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)

int64_t arg5  {Frame offset 28}
int64_t (** arg1)(void* arg1, uint64_t arg2)  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int64_t arg4  {Register r9}

{
    arg1[2] = arg2;
    *(uint64_t*)arg1 = sub_1400042b0;
    arg1[1] = &data_1400042d0;
    arg1[5] = arg5;
    arg1[3] = arg3;
    arg1[4] = arg4;
    return arg5;
}

                                                                                 cc cc cc cc cc                             .....

int512_t sub_140004320(int64_t arg1)

int64_t arg1  {Register rcx}
int512_t result  {Register zmm0}

{
    int512_t result;
    result = {0};
    __builtin_memset(arg1, 0, 0x18);
    return result;
}

                                       cc cc cc                                                               ...

void sub_140004330(int32_t* arg1)

int32_t* arg1  {Register rcx}

{
    *(uint32_t*)arg1 = 0xd;
    *(uint64_t*)((char*)arg1 + 8) = sub_140004320;
    *(uint64_t*)((char*)arg1 + 0x10) = sub_140004370;
    *(uint64_t*)((char*)arg1 + 0x18) = sub_140004510;
    arg1[8] = 0;
    *(uint64_t*)((char*)arg1 + 0x28) = 0;
}

   cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                   ...............

int64_t sub_140004370(char* arg1, uint8_t* arg2)

uint32_t rax_7  {Register rax}
uint32_t rax_10  {Register rax}
uint32_t rax_16  {Register rax}
char* arg1  {Register rcx}
uint32_t rcx_6  {Register rcx}
uint64_t rcx_7  {Register rcx}
uint64_t rcx_10  {Register rcx}
uint64_t rcx_13  {Register rcx}
uint64_t rcx_16  {Register rcx}
uint8_t* arg2  {Register rdx}
uint32_t rdx_9  {Register rdx}
uint64_t rdx_12  {Register rdx}
uint64_t rdx_15  {Register rdx}
uint64_t rdx_18  {Register rdx}

{
    uint32_t rax_16 = ((uint32_t)*(uint8_t*)arg1);
    
    if (rax_16 <= 0xe1)
    {
        *(uint8_t*)arg2 = ((int8_t)(rax_16 / 0x2d));
        arg2[1] = ((int8_t)((rax_16 % 0x2d) / 9));
        arg2[2] = (rax_16 - ((int8_t)(((uint64_t)(rax_16 / 9)) * 9)));
        *(uint32_t*)(arg2 + 0x10) = 0;
        uint32_t rax_7 = ((uint32_t)arg1[1]);
        *(uint32_t*)(arg2 + 0x10) = rax_7;
        uint32_t rcx_6 = ((((uint32_t)arg1[2]) << 8) + rax_7);
        *(uint32_t*)(arg2 + 0x10) = rcx_6;
        uint32_t rdx_9 = ((((uint32_t)arg1[3]) << 0x10) + rcx_6);
        *(uint32_t*)(arg2 + 0x10) = rdx_9;
        uint32_t rax_10 = ((((uint32_t)arg1[4]) << 0x18) + rdx_9);
        *(uint32_t*)(arg2 + 0x10) = rax_10;
        
        if (rax_10 <= 0x10000000)
        {
            arg2[3] = 1;
            *(uint64_t*)(arg2 + 8) = 0;
            uint64_t rcx_7 = ((uint64_t)arg1[5]);
            *(uint64_t*)(arg2 + 8) = rcx_7;
            
            if (arg1[5] != 0xff)
                arg2[3] = 0;
            
            uint64_t rdx_12 = ((((uint64_t)arg1[6]) << 8) + rcx_7);
            *(uint64_t*)(arg2 + 8) = rdx_12;
            
            if (arg1[6] != 0xff)
                arg2[3] = 0;
            
            uint64_t rcx_10 = ((((uint64_t)arg1[7]) << 0x10) + rdx_12);
            *(uint64_t*)(arg2 + 8) = rcx_10;
            
            if (arg1[7] != 0xff)
                arg2[3] = 0;
            
            uint64_t rdx_15 = ((((uint64_t)arg1[8]) << 0x18) + rcx_10);
            *(uint64_t*)(arg2 + 8) = rdx_15;
            
            if (arg1[8] != 0xff)
                arg2[3] = 0;
            
            uint64_t rcx_13 = ((((uint64_t)arg1[9]) << 0x20) + rdx_15);
            *(uint64_t*)(arg2 + 8) = rcx_13;
            
            if (arg1[9] != 0xff)
                arg2[3] = 0;
            
            uint64_t rdx_18 = ((((uint64_t)arg1[0xa]) << 0x28) + rcx_13);
            *(uint64_t*)(arg2 + 8) = rdx_18;
            
            if (arg1[0xa] != 0xff)
                arg2[3] = 0;
            
            uint64_t rcx_16 = ((((uint64_t)arg1[0xb]) << 0x30) + rdx_18);
            *(uint64_t*)(arg2 + 8) = rcx_16;
            
            if (arg1[0xb] != 0xff)
                arg2[3] = 0;
            
            *(uint64_t*)(arg2 + 8) = ((((uint64_t)arg1[0xc]) << 0x38) + rcx_16);
            
            if (arg1[0xc] != 0xff)
                arg2[3] = 0;
            
            return 0;
        }
    }
    
    return 1;
}

                                 cc cc cc cc cc                                                             .....

int64_t sub_140004510(int64_t* arg1, char* arg2)

uint8_t rax_6  {Register rax}
int64_t* arg1  {Register rcx}
char* arg2  {Register rdx}

{
    *(uint64_t*)arg1 = 0;
    arg1[1] = 0;
    *(uint8_t*)((char*)arg1 + 0xc) = 0;
    *(uint8_t*)arg1 = (((*(uint8_t*)arg2 * 0x2d) - (arg2[1] * 0x6b)) + arg2[2]);
    *(uint8_t*)((char*)arg1 + 1) = arg2[0x10];
    *(uint8_t*)((char*)arg1 + 2) = ((int8_t)(*(uint32_t*)(arg2 + 0x10) >> 8));
    *(uint8_t*)((char*)arg1 + 3) = arg2[0x12];
    *(uint8_t*)((char*)arg1 + 4) = arg2[0x13];
    uint8_t rax_6;
    
    if (arg2[3] == 0)
        rax_6 = arg2[8];
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 5) = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = ((int8_t)(((uint64_t)*(uint32_t*)(arg2 + 8)) >> 8));
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 6) = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = ((int8_t)(((uint64_t)*(uint32_t*)(arg2 + 8)) >> 0x10));
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 7) = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = ((int8_t)(((uint64_t)*(uint32_t*)(arg2 + 8)) >> 0x18));
    else
        rax_6 = 0;
    
    arg1[1] = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = ((int8_t)(*(uint64_t*)(arg2 + 8) >> 0x20));
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 9) = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = ((int8_t)(*(uint64_t*)(arg2 + 8) >> 0x28));
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 0xa) = rax_6;
    
    if (arg2[3] == 0)
        rax_6 = arg2[0xe];
    else
        rax_6 = 0;
    
    *(uint8_t*)((char*)arg1 + 0xb) = rax_6;
    
    if (arg2[3] != 0)
    {
        *(uint8_t*)((char*)arg1 + 0xc) = 0;
        return 0;
    }
    
    *(uint8_t*)((char*)arg1 + 0xc) = arg2[0xf];
    return 0;
}

                                                   cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                   ...............

void sub_140004600(int32_t* arg1)

int32_t* arg1  {Register rcx}

{
    *(uint32_t*)arg1 = 6;
    *(uint64_t*)((char*)arg1 + 8) = sub_140004320;
    *(uint64_t*)((char*)arg1 + 0x10) = sub_140004710;
    *(uint64_t*)((char*)arg1 + 0x18) = sub_1400047f0;
    *(uint64_t*)((char*)arg1 + 0x28) = sub_140004780;
    *(uint64_t*)((char*)arg1 + 0x30) = sub_140004650;
    arg1[8] = 0xc;
}

               cc cc cc cc cc cc cc cc cc cc cc                                                       ...........

int64_t sub_140004650(char* arg1, int32_t* arg2)

uint32_t rax  {Register rax}
uint64_t rax_4  {Register rax}
uint64_t rax_7  {Register rax}
uint64_t rax_10  {Register rax}
char* arg1  {Register rcx}
uint32_t rcx_2  {Register rcx}
uint64_t rcx_5  {Register rcx}
uint64_t rcx_8  {Register rcx}
uint64_t rcx_11  {Register rcx}
int32_t* arg2  {Register rdx}
uint64_t rdx_2  {Register rdx}
uint32_t r8_2  {Register r8}

{
    *(uint64_t*)((char*)arg2 + 8) = 0;
    *(uint32_t*)arg2 = 0;
    uint32_t rax = ((uint32_t)*(uint8_t*)arg1);
    *(uint32_t*)arg2 = rax;
    uint32_t r8_2 = ((((uint32_t)arg1[1]) << 8) + rax);
    *(uint32_t*)arg2 = r8_2;
    uint32_t rcx_2 = ((((uint32_t)arg1[2]) << 0x10) + r8_2);
    *(uint32_t*)arg2 = rcx_2;
    *(uint32_t*)arg2 = ((((uint32_t)arg1[3]) << 0x18) + rcx_2);
    uint64_t rax_4 = ((uint64_t)arg1[4]);
    *(uint64_t*)((char*)arg2 + 8) = rax_4;
    uint64_t rcx_5 = ((((uint64_t)arg1[5]) << 8) + rax_4);
    *(uint64_t*)((char*)arg2 + 8) = rcx_5;
    uint64_t rax_7 = ((((uint64_t)arg1[6]) << 0x10) + rcx_5);
    *(uint64_t*)((char*)arg2 + 8) = rax_7;
    uint64_t rcx_8 = ((((uint64_t)arg1[7]) << 0x18) + rax_7);
    *(uint64_t*)((char*)arg2 + 8) = rcx_8;
    uint64_t rax_10 = ((((uint64_t)arg1[8]) << 0x20) + rcx_8);
    *(uint64_t*)((char*)arg2 + 8) = rax_10;
    uint64_t rcx_11 = ((((uint64_t)arg1[9]) << 0x28) + rax_10);
    *(uint64_t*)((char*)arg2 + 8) = rcx_11;
    uint64_t rdx_2 = ((((uint64_t)arg1[0xa]) << 0x30) + rcx_11);
    *(uint64_t*)((char*)arg2 + 8) = rdx_2;
    *(uint64_t*)((char*)arg2 + 8) = ((((uint64_t)arg1[0xb]) << 0x38) + rdx_2);
    return 0;
}

                  cc cc cc cc cc cc cc cc cc cc                                                        ..........

int64_t sub_140004710(char* arg1, int32_t* arg2)

char* arg1  {Register rcx}
int32_t* arg2  {Register rdx}

{
    if (strncmp("LZIP", arg1) != 0)
        return 1;
    
    *(uint32_t*)arg2 = 0x1030002;
    *(uint64_t*)((char*)arg2 + 8) = 0;
    arg2[4] = (1 << (arg1[5] & 0x1f));
    return 0;
}

                                                                  cc cc cc cc cc cc cc cc cc cc                        ..........

int64_t sub_140004780(char* arg1, char* arg2)

char* arg1  {Register rcx}
char* arg2  {Register rdx}

{
    *(uint8_t*)arg2 = *(uint8_t*)arg1;
    arg2[1] = ((int8_t)(*(uint32_t*)arg1 >> 8));
    arg2[2] = arg1[2];
    arg2[3] = arg1[3];
    arg2[4] = arg1[8];
    arg2[5] = ((int8_t)(((uint64_t)*(uint32_t*)(arg1 + 8)) >> 8));
    arg2[6] = ((int8_t)(((uint64_t)*(uint32_t*)(arg1 + 8)) >> 0x10));
    arg2[7] = ((int8_t)(((uint64_t)*(uint32_t*)(arg1 + 8)) >> 0x18));
    arg2[8] = ((int8_t)(*(uint64_t*)(arg1 + 8) >> 0x20));
    arg2[9] = ((int8_t)(*(uint64_t*)(arg1 + 8) >> 0x28));
    arg2[0xa] = arg1[0xe];
    arg2[0xb] = arg1[0xf];
    return 0;
}

                     cc cc cc cc cc cc cc cc cc                                                         .........

int64_t sub_1400047f0(void* arg1, void* arg2)

void* arg1  {Register rcx}
int32_t rcx  {Register rcx}
void* arg2  {Register rdx}
int32_t r8  {Register r8}

{
    __builtin_strncpy(arg1, "LZIP", 5);
    int32_t rcx = 0;
    int32_t r8 = *(uint32_t*)((char*)arg2 + 0x10);
    
    if (r8 != 0)
    {
        do
            rcx += 1;
         while ((r8 >> rcx) != 0);
    }
    
    rcx -= 1;
    rcx &= 0x1f;
    *(uint8_t*)((char*)arg1 + 5) = rcx;
    return 0;
}

                     cc cc cc cc cc cc cc cc cc                                                         .........

int64_t sub_140004830(int32_t arg1, int32_t* arg2)

int32_t arg1  {Register rcx}
int32_t* arg2  {Register rdx}

{
    if ((arg1 == 0 || arg2 == 0))
        return 0;
    
    __set_app_type(arg1);
    data_140007020 = *(uint32_t*)arg2;
    data_140007024 = arg2[1];
    data_140007028 = arg2[2];
    data_14000702c = arg2[3];
    data_140007030 = arg2[4];
    data_140007034 = arg2[5];
    data_140007038 = arg2[6];
    return 1;
}

            cc cc cc cc cc cc cc cc cc cc cc cc                                                      ............

int64_t sub_1400048d0(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t* arg6)

int32_t var_48_1  {Frame offset -48}
int32_t var_40_1  {Frame offset -40}
int32_t var_38_1  {Frame offset -38}
int32_t var_34_1  {Frame offset -34}
int64_t result  {Frame offset -28}
int64_t var_20_1  {Frame offset -20}
int64_t var_18_1  {Frame offset -18}
int32_t arg5  {Frame offset 28}
int32_t* arg6  {Frame offset 30}
int32_t rax_12  {Register rax}
int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int32_t arg4  {Register r9}

{
    if (arg3 == 0)
        return 0;
    
    if (sub_140005060(data_140007020) == 0)
        return 0;
    
    int64_t var_20_1 = -1;
    int64_t result = 0;
    int64_t var_18_1 = arg3;
    int32_t var_34_1 = 0x3000;
    int32_t var_38_1 = 4;
    
    if (arg1 != 0)
        var_20_1 = arg1;
    
    if (arg2 != 0)
        result = arg2;
    
    if (((uint64_t)arg4) != 0)
        var_34_1 = arg4;
    
    if (((uint64_t)arg5) != 0)
        var_38_1 = arg5;
    
    sub_1400056d0(((uint32_t)sub_1400056c0()));
    int32_t var_40_1 = var_38_1;
    int32_t var_48_1 = var_34_1;
    int32_t rax_12 = sub_1400056e1();
    
    if (arg6 != 0)
        *(uint32_t*)arg6 = rax_12;
    
    return result;
}

                                                                     cc cc cc cc cc cc cc cc cc                         .........

int64_t Concurrency::details::ThreadProxyFactory<class Concurrency::details::FreeThreadProxy>::ReclaimProxy(int64_t arg1, int32_t* arg2)

int64_t arg1  {Register rcx}
int32_t* arg2  {Register rdx}

{
    return sub_1400048d0(0, 0, arg1, 0, 0, arg2);
}

                                                                  cc cc cc cc cc cc cc cc cc cc                        ..........

int64_t sub_140004a40(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t* arg6)

int64_t var_88_1  {Frame offset -88}
int64_t var_80_1  {Frame offset -80}
int64_t* var_78_1  {Frame offset -78}
int32_t var_70_1  {Frame offset -70}
int32_t var_68_1  {Frame offset -68}
int32_t var_60_1  {Frame offset -60}
int32_t var_58_1  {Frame offset -58}
int32_t var_54_1  {Frame offset -54}
int64_t result  {Frame offset -48}
int64_t var_40_1  {Frame offset -40}
int64_t s  {Frame offset -38}
int64_t var_30  {Frame offset -30}
int64_t var_28  {Frame offset -28}
int64_t var_18_1  {Frame offset -18}
int32_t arg5  {Frame offset 28}
int32_t* arg6  {Frame offset 30}
int32_t rax_14  {Register rax}
int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int32_t arg4  {Register r9}

{
    if (arg1 == 0)
        return 0;
    
    if (sub_140005060(data_140007030) == 0)
        return 0;
    
    int64_t var_18_1 = arg1;
    int64_t var_40_1 = -1;
    int64_t result = 0;
    int32_t var_54_1 = 0;
    int32_t var_58_1 = 4;
    int64_t s;
    __builtin_memset(&s, 0, 0x20);
    
    if (arg2 != 0)
        var_40_1 = arg2;
    
    if (arg3 != 0)
        result = arg3;
    
    if (((uint64_t)arg4) != 0)
        var_54_1 = arg4;
    
    if (((uint64_t)arg5) != 0)
        var_58_1 = arg5;
    
    sub_1400056d0(((uint32_t)sub_1400056c0()));
    int32_t var_60_1 = var_58_1;
    int32_t var_68_1 = var_54_1;
    int32_t var_70_1 = 1;
    int64_t* var_78_1 = &s;
    int64_t var_30;
    int64_t var_80_1 = var_30;
    int64_t var_28;
    int64_t var_88_1 = var_28;
    int32_t rax_14 = sub_1400056e1();
    
    if (arg6 != 0)
        *(uint32_t*)arg6 = rax_14;
    
    return result;
}

                                    cc cc cc cc                                                              ....

int64_t sub_140004bd0(int32_t arg1, int64_t arg2, int32_t* arg3)

int32_t var_18_1  {Frame offset -18}
int32_t rax_6  {Register rax}
int32_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int32_t* arg3  {Register r8}

{
    if ((arg2 != 0 && sub_140005060(data_14000702c) != 0))
    {
        int32_t var_18_1 = 0xf001f;
        
        if (((uint64_t)arg1) != 0)
            var_18_1 = arg1;
        
        sub_1400056d0(((uint32_t)sub_1400056c0()));
        int32_t rax_6 = sub_1400056e1();
        
        if (arg3 != 0)
            *(uint32_t*)arg3 = rax_6;
    }
    
    return -1;
}

                                          cc cc                                                                ..

uint64_t sub_140004c70(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int32_t* arg5)

int32_t* var_48_1  {Frame offset -48}
int32_t var_38  {Frame offset -38}
int32_t var_34_1  {Frame offset -34}
int64_t var_28_1  {Frame offset -28}
int64_t var_20_1  {Frame offset -20}
int64_t var_18_1  {Frame offset -18}
int32_t* arg5  {Frame offset 28}
int32_t rax_9  {Register rax}
int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int64_t arg3  {Register r8}
int32_t arg4  {Register r9}

{
    if ((arg2 == 0 || (arg3 == 0 || ((uint64_t)arg4) == 0)))
        return 0;
    
    if (sub_140005060(data_140007024) == 0)
        return 0;
    
    int64_t var_28_1 = -1;
    int64_t var_18_1 = arg2;
    int64_t var_20_1 = arg3;
    int32_t var_34_1 = arg4;
    int32_t var_38 = 0;
    
    if (arg1 != 0)
        var_28_1 = arg1;
    
    sub_1400056d0(((uint32_t)sub_1400056c0()));
    int32_t* var_48_1 = &var_38;
    int32_t rax_9 = sub_1400056e1();
    
    if (arg5 != 0)
        *(uint32_t*)arg5 = rax_9;
    
    return ((uint64_t)var_38);
}

                                                                                             cc                                 .

void sub_140004d60(int64_t arg1, int64_t arg2, int32_t* arg3)

int32_t var_28_1  {Frame offset -28}
int64_t var_20_1  {Frame offset -20}
int64_t var_18_1  {Frame offset -18}
int64_t arg1  {Register rcx}
int64_t arg2  {Register rdx}
int32_t* arg3  {Register r8}

{
    if ((arg2 != 0 && sub_140005060(data_140007034) != 0))
    {
        int64_t var_20_1 = -1;
        int64_t var_18_1 = arg2;
        
        if (arg1 != 0)
            var_20_1 = arg1;
        
        sub_1400056d0(((uint32_t)sub_1400056c0()));
        int32_t var_28_1 = sub_1400056e1();
        
        if (arg3 != 0)
            *(uint32_t*)arg3 = var_28_1;
    }
}

                                 cc cc cc cc cc                                                             .....

uint64_t sub_140004df0(char* arg1)

int32_t var_28  {Frame offset -28}
int32_t var_24  {Frame offset -24}
char* arg1  {Register rcx}

{
    int32_t var_24 = 0;
    int32_t var_28 = 0;
    
    while (((int64_t)var_28) < sub_140005680(arg1))
    {
        var_24 = (((int32_t)arg1[((int64_t)var_28)]) + sub_140004e70(var_24, data_140007040));
        var_28 += 1;
    }
    
    return ((uint64_t)var_24);
}

                                 cc cc cc cc cc                                                             .....

uint64_t sub_140004e70(int32_t arg1, int32_t arg2) __pure

int32_t arg1  {Register rcx}
int32_t rcx_1  {Register rcx}
int32_t arg2  {Register rdx}

{
    int32_t rcx_1 = (arg2 & 0x1f);
    return ((uint64_t)((arg1 >> rcx_1) | (arg1 << (((int8_t)-(rcx_1)) & 0x1f))));
}

                                                                     cc cc cc cc cc cc cc cc cc                         .........

int64_t sub_140004ec0()

struct _PEB* ProcessEnvironmentBlock  {Register rax}
int16_t* rax_7  {Register rax}
int32_t* rcx_2  {Register rcx}
void* rcx_5  {Register rcx}
void* rcx_7  {Register rcx}
void* rcx_9  {Register rcx}
void* rcx_11  {Register rcx}
TEB* gsbase  {Register gsbase}

{
    TEB* gsbase;
    struct _PEB* ProcessEnvironmentBlock = gsbase->ProcessEnvironmentBlock;
    
    if ((ProcessEnvironmentBlock == 0 || ProcessEnvironmentBlock->OSMajorVersion != 0xa))
        return 0;
    
    int16_t* rax_7 = *(int64_t*)((char*)ProcessEnvironmentBlock->Ldr->InMemoryOrderModuleList.Flink->Flink + 0x20);
    
    if (rax_7 == 0)
        return 0;
    
    if (((uint32_t)*(uint16_t*)rax_7) != 0x5a4d)
        return 0;
    
    int32_t* rcx_2 = ((char*)rax_7 + ((int64_t)*(uint32_t*)((char*)rax_7 + 0x3c)));
    
    if (*(uint32_t*)rcx_2 != 0x4550)
        return 0;
    
    void* rcx_5 = ((char*)rax_7 + ((uint64_t)rcx_2[0x22]));
    
    if (rcx_5 == 0)
        return 0;
    
    void* rcx_7 = ((char*)rax_7 + ((uint64_t)*(uint32_t*)((char*)rcx_5 + 0x1c)));
    void* rcx_9 = ((char*)rax_7 + ((uint64_t)*(uint32_t*)((char*)rcx_5 + 0x20)));
    void* rcx_11 = ((char*)rax_7 + ((uint64_t)*(uint32_t*)((char*)rcx_5 + 0x24)));
    data_140007060 = rax_7;
    data_140007068 = rax_7;
    data_140007070 = rcx_2;
    data_140007078 = rcx_5;
    data_140007080 = rcx_7;
    data_140007088 = rcx_9;
    data_140007090 = rcx_11;
    return 1;
}

         cc cc cc cc cc cc cc cc cc cc cc cc cc                                                     .............

int64_t __set_app_type(int32_t arg1)

int32_t arg1  {Register rcx}

{
    data_140007040 = arg1;
    return arg1;
}

                                                                                             cc                                 .

int64_t sub_140005060(int32_t arg1)

int16_t var_38_1  {Frame offset -38}
int16_t var_34_1  {Frame offset -34}
int16_t var_28_1  {Frame offset -28}
int32_t arg1  {Register rcx}
char* rcx_7  {Register rcx}

{
    if (((int64_t)arg1) == 0)
        return 0;
    
    if (((((data_140007060 == 0 || data_140007080 == 0) || data_140007088 == 0) || data_140007090 == 0) && sub_140004ec0() == 0))
        return 0;
    
    int16_t var_28_1 = 0;
    
    while (((uint32_t)var_28_1) < *(uint32_t*)(data_140007078 + 0x18))
    {
        char* rcx_7 = (data_140007060 + ((uint64_t)*(uint32_t*)(data_140007080 + (((uint64_t)*(uint16_t*)(data_140007090 + (((uint64_t)var_28_1) << 1))) << 2))));
        
        if (sub_140004df0((data_140007060 + ((uint64_t)*(uint32_t*)(data_140007088 + (((uint64_t)var_28_1) << 2))))) == arg1)
        {
            data_140007048 = rcx_7;
            
            if ((((uint32_t)*(uint8_t*)rcx_7) == 0x4c && (((uint32_t)rcx_7[1]) == 0x8b && (((uint32_t)rcx_7[2]) == 0xd1 && (((uint32_t)rcx_7[3]) == 0xb8 && (((uint32_t)rcx_7[6]) == 0 && ((uint32_t)rcx_7[7]) == 0))))))
            {
                data_140007058 = (((int16_t)(((uint32_t)rcx_7[5]) << 8)) | ((uint16_t)rcx_7[4]));
                return 1;
            }
            
            if (((uint32_t)*(uint8_t*)rcx_7) == 0xe9)
            {
                int16_t var_38_1 = 1;
                
                while (((uint32_t)var_38_1) <= 0x1f4)
                {
                    if ((((uint32_t)rcx_7[((int64_t)(((uint32_t)var_38_1) * 0x20))]) == 0x4c && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 1)]) == 0x8b && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 2)]) == 0xd1 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 3)]) == 0xb8 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 6)]) == 0 && ((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 7)]) == 0))))))
                    {
                        data_140007058 = (((int16_t)(((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 5)]) << 8)) | (((uint16_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0x20)) + 4)]) - var_38_1));
                        return 1;
                    }
                    
                    if ((((uint32_t)rcx_7[((int64_t)(((uint32_t)var_38_1) * 0xffffffe0))]) == 0x4c && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 1)]) == 0x8b && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 2)]) == 0xd1 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 3)]) == 0xb8 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 6)]) == 0 && ((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 7)]) == 0))))))
                    {
                        data_140007058 = (((int16_t)(((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 5)]) << 8)) | (((uint16_t)rcx_7[(((int64_t)(((uint32_t)var_38_1) * 0xffffffe0)) + 4)]) + var_38_1));
                        return 1;
                    }
                    
                    var_38_1 += 1;
                }
                
                return 0;
            }
            
            if (((uint32_t)rcx_7[3]) == 0xe9)
            {
                int16_t var_34_1 = 1;
                
                while (((uint32_t)var_34_1) <= 0x1f4)
                {
                    if ((((uint32_t)rcx_7[((int64_t)(((uint32_t)var_34_1) * 0x20))]) == 0x4c && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 1)]) == 0x8b && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 2)]) == 0xd1 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 3)]) == 0xb8 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 6)]) == 0 && ((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 7)]) == 0))))))
                    {
                        data_140007058 = (((int16_t)(((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 5)]) << 8)) | (((uint16_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0x20)) + 4)]) - var_34_1));
                        return 1;
                    }
                    
                    if ((((uint32_t)rcx_7[((int64_t)(((uint32_t)var_34_1) * 0xffffffe0))]) == 0x4c && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 1)]) == 0x8b && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 2)]) == 0xd1 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 3)]) == 0xb8 && (((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 6)]) == 0 && ((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 7)]) == 0))))))
                    {
                        data_140007058 = (((int16_t)(((uint32_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 5)]) << 8)) | (((uint16_t)rcx_7[(((int64_t)(((uint32_t)var_34_1) * 0xffffffe0)) + 4)]) + var_34_1));
                        return 1;
                    }
                    
                    var_34_1 += 1;
                }
                
                return 0;
            }
        }
        
        var_28_1 += 1;
    }
    
    return 0;
}

                                                               cc cc cc cc cc cc cc cc cc cc cc                       ...........

void* sub_140005680(char* arg1)

char* var_18  {Frame offset -18}
char* arg1  {Register rcx}

{
    char* var_18 = arg1;
    
    while (((int32_t)*(uint8_t*)var_18) != 0)
        var_18 = &var_18[1];
    
    return (var_18 - arg1);
}


uint64_t sub_1400056c0()

{
    return ((uint64_t)data_140007058);
}

                        cc cc cc cc cc cc cc cc                                                          ........

int64_t sub_1400056d0(int32_t arg1)

int32_t arg1  {Register rcx}

{
    data_140007000 = 0;
    data_140007000 = arg1;
}


int64_t sub_1400056e1()

{
    data_140007000;
    return syscall();
}

.text section ended  {0x140001000-0x1400056f0}

.rdata section started  {0x140006000-0x14000699c}
void* (* const KERNEL32:HeapAlloc)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, uint64_t dwBytes) = HeapAlloc
BOOL (* const KERNEL32:HeapFree)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem) = HeapFree
uint64_t (* const KERNEL32:HeapSize)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem) = HeapSize
HANDLE (* const KERNEL32:GetProcessHeap)() = GetProcessHeap
int32_t (* const KERNEL32:UnhandledExceptionFilter)(EXCEPTION_POINTERS* ExceptionInfo) = UnhandledExceptionFilter
LPTOP_LEVEL_EXCEPTION_FILTER (* const KERNEL32:SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter) = SetUnhandledExceptionFilter
enum WIN32_ERROR (* const KERNEL32:GetLastError)() = GetLastError
void (* const KERNEL32:ReleaseSRWLockExclusive)(SRWLOCK* SRWLock) = ReleaseSRWLockExclusive
void (* const KERNEL32:ReleaseSRWLockShared)(SRWLOCK* SRWLock) = ReleaseSRWLockShared
BOOLEAN (* const KERNEL32:TryAcquireSRWLockExclusive)(SRWLOCK* SRWLock) = TryAcquireSRWLockExclusive
uint32_t (* const KERNEL32:SetCriticalSectionSpinCount)(CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount) = SetCriticalSectionSpinCount
void (* const KERNEL32:WakeAllConditionVariable)(CONDITION_VARIABLE* ConditionVariable) = WakeAllConditionVariable

00 00 00 00 00 00 00 00                                                                          ........

HMENU (* const USER32:GetMenu)(HWND hWnd) = GetMenu
HMENU (* const USER32:GetSystemMenu)(HWND hWnd, BOOL bRevert) = GetSystemMenu
uint32_t (* const USER32:CheckMenuItem)(HMENU hMenu, uint32_t uIDCheckItem, uint32_t uCheck) = CheckMenuItem
BOOL (* const USER32:EnableMenuItem)(HMENU hMenu, uint32_t uIDEnableItem, enum MENU_ITEM_FLAGS uEnable) = EnableMenuItem
uint32_t (* const USER32:GetMenuItemID)(HMENU hMenu, int32_t nPos) = GetMenuItemID
BOOL (* const USER32:UpdateWindow)(HWND hWnd) = UpdateWindow
uint32_t (* const USER32:GetWindowContextHelpId)(HWND param0) = GetWindowContextHelpId
enum MESSAGEBOX_RESULT (* const USER32:MessageBoxA)(HWND hWnd, PSTR lpText, PSTR lpCaption, enum MESSAGEBOX_STYLE uType) = MessageBoxA
enum MESSAGEBOX_RESULT (* const USER32:MessageBoxW)(HWND hWnd, PWSTR lpText, PWSTR lpCaption, enum MESSAGEBOX_STYLE uType) = MessageBoxW
BOOL (* const USER32:MessageBeep)(enum MESSAGEBOX_STYLE uType) = MessageBeep

                                                                        00 00 00 00 00 00 00 00                          ........

wchar16 const data_1400060c0[0xc] = "\\KnownDlls\\", 0
wchar16 const data_1400060d8[0xa] = "NTDLL.DLL", 0

                                    00 00 00 00                                                              ....

char const data_1400060f0[0xa] = "NTDLL.DLL", 0

                                                                              00 00 00 00 00 00                            ......

char const data_140006100[0xd] = "KERNEL32.DLL", 0

                                       00 00 00                                                               ...
data_140006110:
                                                00 00 00 00 01 02 03 04 05 06 04 05 07 07 07 07                  ................
07 07 07 0a 0a 0a 0a 0a                                                                          ........

char const data_140006128[0x5] = "LZIP", 0

                                       00 00 00                                                               ...
struct Debug_Directory_Table __debug_directory_entries[0x2] = 
{
    [0x0] = 
    {
        uint32_t characteristics = 0x0
        uint32_t timeDateStamp = 0x632f0f7f
        uint16_t majorVersion = 0x0
        uint16_t minorVersion = 0x0
        enum type = IMAGE_DEBUG_TYPE_POGO
        uint32_t sizeOfData = 0x134
        uint32_t addressOfRawData = 0x621c
        uint32_t pointerToRawData = 0x4e1c
    }
    [0x1] = 
    {
        uint32_t characteristics = 0x0
        uint32_t timeDateStamp = 0x632f0f7f
        uint16_t majorVersion = 0x0
        uint16_t minorVersion = 0x0
        enum type = IMAGE_DEBUG_TYPE_ILTCG
        uint32_t sizeOfData = 0x0
        uint32_t addressOfRawData = 0x0
        uint32_t pointerToRawData = 0x0
    }
}
void* data_140006168 = free
void* data_140006170 = malloc
void* data_140006178 = strncmp

18 00 00 00 02 80 02 80 98 61 00 00 7c 00 00 00 14 62 00 00 08 00 00 00 4b 10 00 00 53 10 00 00  .........a..|....b......K...S...
60 10 00 00 65 10 00 00 72 10 00 00 78 10 00 00 7c 10 00 00 d0 10 00 00 db 10 00 00 f0 10 00 00  `...e...r...x...|...............
f5 10 00 00 02 11 00 00 08 11 00 00 0c 11 00 00 88 11 00 00 90 11 00 00 a0 11 00 00 a5 11 00 00  ................................
b2 11 00 00 b8 11 00 00 bc 11 00 00 72 12 00 00 7d 12 00 00 90 12 00 00 95 12 00 00 a1 12 00 00  ............r...}...............
a7 12 00 00 ab 12 00 00 77 16 00 00 f7 1b 00 00 c4 4e 00 00 00 10 00 00 d0 46 00 00              ........w........N.......F..
uint8_t debug_type_pogo[0x134] = 
{
    [0x000] =  0x47
    [0x001] =  0x43
    [0x002] =  0x54
    [0x003] =  0x4c
    [0x004] =  0x00
    [0x005] =  0x10
    [0x006] =  0x00
    [0x007] =  0x00
    [0x008] =  0xf0
    [0x009] =  0x46
    [0x00a] =  0x00
    [0x00b] =  0x00
    [0x00c] =  0x2e
    [0x00d] =  0x74
    [0x00e] =  0x65
    [0x00f] =  0x78
    [0x010] =  0x74
    [0x011] =  0x24
    [0x012] =  0x6d
    [0x013] =  0x6e
    [0x014] =  0x00
    [0x015] =  0x00
    [0x016] =  0x00
    [0x017] =  0x00
    [0x018] =  0x00
    [0x019] =  0x60
    [0x01a] =  0x00
    [0x01b] =  0x00
    [0x01c] =  0xc0
    [0x01d] =  0x00
    [0x01e] =  0x00
    [0x01f] =  0x00
    [0x020] =  0x2e
    [0x021] =  0x69
    [0x022] =  0x64
    [0x023] =  0x61
    [0x024] =  0x74
    [0x025] =  0x61
    [0x026] =  0x24
    [0x027] =  0x35
    [0x028] =  0x00
    [0x029] =  0x00
    [0x02a] =  0x00
    [0x02b] =  0x00
    [0x02c] =  0xc0
    [0x02d] =  0x60
    [0x02e] =  0x00
    [0x02f] =  0x00
    [0x030] =  0xc0
    [0x031] =  0x00
    [0x032] =  0x00
    [0x033] =  0x00
    [0x034] =  0x2e
    [0x035] =  0x72
    [0x036] =  0x64
    [0x037] =  0x61
    [0x038] =  0x74
    [0x039] =  0x61
    [0x03a] =  0x00
    [0x03b] =  0x00
    [0x03c] =  0x80
    [0x03d] =  0x61
    [0x03e] =  0x00
    [0x03f] =  0x00
    [0x040] =  0x9c
    [0x041] =  0x00
    [0x042] =  0x00
    [0x043] =  0x00
    [0x044] =  0x2e
    [0x045] =  0x72
    [0x046] =  0x64
    [0x047] =  0x61
    [0x048] =  0x74
    [0x049] =  0x61
    [0x04a] =  0x24
    [0x04b] =  0x76
    [0x04c] =  0x6f
    [0x04d] =  0x6c
    [0x04e] =  0x74
    [0x04f] =  0x6d
    [0x050] =  0x64
    [0x051] =  0x00
    [0x052] =  0x00
    [0x053] =  0x00
    [0x054] =  0x1c
    [0x055] =  0x62
    [0x056] =  0x00
    [0x057] =  0x00
    [0x058] =  0x34
    [0x059] =  0x01
    [0x05a] =  0x00
    [0x05b] =  0x00
    [0x05c] =  0x2e
    [0x05d] =  0x72
    [0x05e] =  0x64
    [0x05f] =  0x61
    [0x060] =  0x74
    [0x061] =  0x61
    [0x062] =  0x24
    [0x063] =  0x7a
    [0x064] =  0x7a
    [0x065] =  0x7a
    [0x066] =  0x64
    [0x067] =  0x62
    [0x068] =  0x67
    [0x069] =  0x00
    [0x06a] =  0x00
    [0x06b] =  0x00
    [0x06c] =  0x50
    [0x06d] =  0x63
    [0x06e] =  0x00
    [0x06f] =  0x00
    [0x070] =  0x10
    [0x071] =  0x03
    [0x072] =  0x00
    [0x073] =  0x00
    [0x074] =  0x2e
    [0x075] =  0x78
    [0x076] =  0x64
    [0x077] =  0x61
    [0x078] =  0x74
    [0x079] =  0x61
    [0x07a] =  0x00
    [0x07b] =  0x00
    [0x07c] =  0x60
    [0x07d] =  0x66
    [0x07e] =  0x00
    [0x07f] =  0x00
    [0x080] =  0x7c
    [0x081] =  0x00
    [0x082] =  0x00
    [0x083] =  0x00
    [0x084] =  0x2e
    [0x085] =  0x65
    [0x086] =  0x64
    [0x087] =  0x61
    [0x088] =  0x74
    [0x089] =  0x61
    [0x08a] =  0x00
    [0x08b] =  0x00
    [0x08c] =  0xdc
    [0x08d] =  0x66
    [0x08e] =  0x00
    [0x08f] =  0x00
    [0x090] =  0x28
    [0x091] =  0x00
    [0x092] =  0x00
    [0x093] =  0x00
    [0x094] =  0x2e
    [0x095] =  0x69
    [0x096] =  0x64
    [0x097] =  0x61
    [0x098] =  0x74
    [0x099] =  0x61
    [0x09a] =  0x24
    [0x09b] =  0x32
    [0x09c] =  0x00
    [0x09d] =  0x00
    [0x09e] =  0x00
    [0x09f] =  0x00
    [0x0a0] =  0x04
    [0x0a1] =  0x67
    [0x0a2] =  0x00
    [0x0a3] =  0x00
    [0x0a4] =  0x14
    [0x0a5] =  0x00
    [0x0a6] =  0x00
    [0x0a7] =  0x00
    [0x0a8] =  0x2e
    [0x0a9] =  0x69
    [0x0aa] =  0x64
    [0x0ab] =  0x61
    [0x0ac] =  0x74
    [0x0ad] =  0x61
    [0x0ae] =  0x24
    [0x0af] =  0x33
    [0x0b0] =  0x00
    [0x0b1] =  0x00
    [0x0b2] =  0x00
    [0x0b3] =  0x00
    [0x0b4] =  0x18
    [0x0b5] =  0x67
    [0x0b6] =  0x00
    [0x0b7] =  0x00
    [0x0b8] =  0xc0
    [0x0b9] =  0x00
    [0x0ba] =  0x00
    [0x0bb] =  0x00
    [0x0bc] =  0x2e
    [0x0bd] =  0x69
    [0x0be] =  0x64
    [0x0bf] =  0x61
    [0x0c0] =  0x74
    [0x0c1] =  0x61
    [0x0c2] =  0x24
    [0x0c3] =  0x34
    [0x0c4] =  0x00
    [0x0c5] =  0x00
    [0x0c6] =  0x00
    [0x0c7] =  0x00
    [0x0c8] =  0xd8
    [0x0c9] =  0x67
    [0x0ca] =  0x00
    [0x0cb] =  0x00
    [0x0cc] =  0xc4
    [0x0cd] =  0x01
    [0x0ce] =  0x00
    [0x0cf] =  0x00
    [0x0d0] =  0x2e
    [0x0d1] =  0x69
    [0x0d2] =  0x64
    [0x0d3] =  0x61
    [0x0d4] =  0x74
    [0x0d5] =  0x61
    [0x0d6] =  0x24
    [0x0d7] =  0x36
    [0x0d8] =  0x00
    [0x0d9] =  0x00
    [0x0da] =  0x00
    [0x0db] =  0x00
    [0x0dc] =  0x00
    [0x0dd] =  0x70
    [0x0de] =  0x00
    [0x0df] =  0x00
    [0x0e0] =  0x20
    [0x0e1] =  0x00
    [0x0e2] =  0x00
    [0x0e3] =  0x00
    [0x0e4] =  0x2e
    [0x0e5] =  0x64
    [0x0e6] =  0x61
    [0x0e7] =  0x74
    [0x0e8] =  0x61
    [0x0e9] =  0x00
    [0x0ea] =  0x00
    [0x0eb] =  0x00
    [0x0ec] =  0x20
    [0x0ed] =  0x70
    [0x0ee] =  0x00
    [0x0ef] =  0x00
    [0x0f0] =  0x80
    [0x0f1] =  0x04
    [0x0f2] =  0x00
    [0x0f3] =  0x00
    [0x0f4] =  0x2e
    [0x0f5] =  0x62
    [0x0f6] =  0x73
    [0x0f7] =  0x73
    [0x0f8] =  0x00
    [0x0f9] =  0x00
    [0x0fa] =  0x00
    [0x0fb] =  0x00
    [0x0fc] =  0x00
    [0x0fd] =  0x80
    [0x0fe] =  0x00
    [0x0ff] =  0x00
    [0x100] =  0xac
    [0x101] =  0x02
    [0x102] =  0x00
    [0x103] =  0x00
    [0x104] =  0x2e
    [0x105] =  0x70
    [0x106] =  0x64
    [0x107] =  0x61
    [0x108] =  0x74
    [0x109] =  0x61
    [0x10a] =  0x00
    [0x10b] =  0x00
    [0x10c] =  0x00
    [0x10d] =  0x90
    [0x10e] =  0x00
    [0x10f] =  0x00
    [0x110] =  0x60
    [0x111] =  0x00
    [0x112] =  0x00
    [0x113] =  0x00
    [0x114] =  0x2e
    [0x115] =  0x72
    [0x116] =  0x73
    [0x117] =  0x72
    [0x118] =  0x63
    [0x119] =  0x24
    [0x11a] =  0x30
    [0x11b] =  0x31
    [0x11c] =  0x00
    [0x11d] =  0x00
    [0x11e] =  0x00
    [0x11f] =  0x00
    [0x120] =  0x60
    [0x121] =  0x90
    [0x122] =  0x00
    [0x123] =  0x00
    [0x124] =  0x80
    [0x125] =  0x01
    [0x126] =  0x00
    [0x127] =  0x00
    [0x128] =  0x2e
    [0x129] =  0x72
    [0x12a] =  0x73
    [0x12b] =  0x72
    [0x12c] =  0x63
    [0x12d] =  0x24
    [0x12e] =  0x30
    [0x12f] =  0x32
    [0x130] =  0x00
    [0x131] =  0x00
    [0x132] =  0x00
    [0x133] =  0x00
}
struct UNWIND_INFO data_140006350 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x4
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006354[0x1] = 
{
    [0x0] =  0x0204
}

                                                                  00 00                                                ..

struct UNWIND_INFO data_140006358 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x4
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_14000635c[0x2] = 
{
    [0x0] =  0x7404
    [0x1] =  0x0000
}
struct Exception_Directory_Entry data_140006360 = 
{
    uint32_t beginAddress = 0x1120
    uint32_t endAddress = 0x112c
    uint32_t unwindInformation = 0x6350
}
struct UNWIND_INFO data_14000636c = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_140006370 = 
{
    uint32_t beginAddress = 0x1120
    uint32_t endAddress = 0x112c
    uint32_t unwindInformation = 0x6350
}
struct UNWIND_INFO data_14000637c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x6
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006380[0x2] = 
{
    [0x0] =  0x3206
    [0x1] =  0x3002
}
struct UNWIND_INFO data_140006384 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xa
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006388[0x4] = 
{
    [0x0] =  0x640a
    [0x1] =  0x0008
    [0x2] =  0x320a
    [0x3] =  0x7006
}
struct UNWIND_INFO data_140006390 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x5
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006394[0x2] = 
{
    [0x0] =  0x3405
    [0x1] =  0x0006
}
struct Exception_Directory_Entry data_140006398 = 
{
    uint32_t beginAddress = 0x11e0
    uint32_t endAddress = 0x1227
    uint32_t unwindInformation = 0x6384
}
struct UNWIND_INFO data_1400063a4 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063a8[0x2] = 
{
    [0x0] =  0x3400
    [0x1] =  0x0006
}
struct Exception_Directory_Entry data_1400063ac = 
{
    uint32_t beginAddress = 0x11e0
    uint32_t endAddress = 0x1227
    uint32_t unwindInformation = 0x6384
}
struct UNWIND_INFO data_1400063b8 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x15
    uint8_t CountOfUnwindCodes = 0x8
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063bc[0x8] = 
{
    [0x0] =  0x7415
    [0x1] =  0x000f
    [0x2] =  0x6415
    [0x3] =  0x000e
    [0x4] =  0x3415
    [0x5] =  0x000c
    [0x6] =  0x9215
    [0x7] =  0xe011
}
struct UNWIND_INFO data_1400063cc = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x5
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063d0[0x2] = 
{
    [0x0] =  0x3405
    [0x1] =  0x0002
}
struct UNWIND_INFO data_1400063d4 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xf
    uint8_t CountOfUnwindCodes = 0x6
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063d8[0x6] = 
{
    [0x0] =  0x640f
    [0x1] =  0x0008
    [0x2] =  0x340f
    [0x3] =  0x0007
    [0x4] =  0x320f
    [0x5] =  0x700b
}
struct UNWIND_INFO data_1400063e4 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xa
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063e8[0x4] = 
{
    [0x0] =  0x340a
    [0x1] =  0x0006
    [0x2] =  0x320a
    [0x3] =  0x7006
}
struct UNWIND_INFO data_1400063f0 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x7
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063f4[0x1] = 
{
    [0x0] =  0x8207
}

                                                                  00 00                                                ..

struct UNWIND_INFO data_1400063f8 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x15
    uint8_t CountOfUnwindCodes = 0x9
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400063fc[0x9] = 
{
    [0x0] =  0x5415
    [0x1] =  0x0057
    [0x2] =  0x3415
    [0x3] =  0x0056
    [0x4] =  0x0115
    [0x5] =  0x0050
    [0x6] =  0xe00e
    [0x7] =  0x700c
    [0x8] =  0x600b
}

                                          00 00                                                                ..

struct UNWIND_INFO data_140006410 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x1b
    uint8_t CountOfUnwindCodes = 0xb
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006414[0xb] = 
{
    [0x0] =  0x641b
    [0x1] =  0x002c
    [0x2] =  0x541b
    [0x3] =  0x002b
    [0x4] =  0x341b
    [0x5] =  0x002a
    [0x6] =  0x011b
    [0x7] =  0x0026
    [0x8] =  0xf014
    [0x9] =  0xe012
    [0xa] =  0x7010
}

                              00 00                                                                        ..

struct UNWIND_INFO data_14000642c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x9
    uint8_t CountOfUnwindCodes = 0x3
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006430[0x3] = 
{
    [0x0] =  0x0109
    [0x1] =  0x0048
    [0x2] =  0x3002
}

                                                                  00 00                                                ..

struct UNWIND_INFO data_140006438 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x1f
    uint8_t CountOfUnwindCodes = 0xd
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_14000643c[0xd] = 
{
    [0x0] =  0x641f
    [0x1] =  0x0050
    [0x2] =  0x541f
    [0x3] =  0x004f
    [0x4] =  0x341f
    [0x5] =  0x004e
    [0x6] =  0x011f
    [0x7] =  0x0048
    [0x8] =  0xf018
    [0x9] =  0xe016
    [0xa] =  0xd014
    [0xb] =  0xc012
    [0xc] =  0x7010
}

                                                                  00 00                                                ..

struct UNWIND_INFO data_140006458 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x7
    uint8_t CountOfUnwindCodes = 0x3
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_14000645c[0x3] = 
{
    [0x0] =  0x6207
    [0x1] =  0x7003
    [0x2] =  0x3002
}

      00 00                                                                                        ..

struct UNWIND_INFO data_140006464 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0xa
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006468[0x4] = 
{
    [0x0] =  0x640a
    [0x1] =  0x0006
    [0x2] =  0x5405
    [0x3] =  0x000c
}
struct Exception_Directory_Entry data_140006470 = 
{
    uint32_t beginAddress = 0x1bf0
    uint32_t endAddress = 0x1cf2
    uint32_t unwindInformation = 0x6458
}
struct UNWIND_INFO data_14000647c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x16
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006480[0x4] = 
{
    [0x0] =  0x0116
    [0x1] =  0x0017
    [0x2] =  0xc00f
    [0x3] =  0x500d
}
struct UNWIND_INFO data_140006488 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x4
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_14000648c[0x2] = 
{
    [0x0] =  0xe404
    [0x1] =  0x0013
}
struct Exception_Directory_Entry data_140006490 = 
{
    uint32_t beginAddress = 0x1dc0
    uint32_t endAddress = 0x1df3
    uint32_t unwindInformation = 0x647c
}
struct UNWIND_INFO data_14000649c = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x1a
    uint8_t CountOfUnwindCodes = 0x6
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400064a0[0x6] = 
{
    [0x0] =  0xf41a
    [0x1] =  0x0012
    [0x2] =  0xd40f
    [0x3] =  0x0014
    [0x4] =  0x3404
    [0x5] =  0x001b
}
struct Exception_Directory_Entry data_1400064ac = 
{
    uint32_t beginAddress = 0x1df3
    uint32_t endAddress = 0x1e0f
    uint32_t unwindInformation = 0x6488
}
struct UNWIND_INFO data_1400064b8 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x4
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400064bc[0x2] = 
{
    [0x0] =  0x7404
    [0x1] =  0x0015
}
struct Exception_Directory_Entry data_1400064c0 = 
{
    uint32_t beginAddress = 0x1e0f
    uint32_t endAddress = 0x1e86
    uint32_t unwindInformation = 0x649c
}
struct UNWIND_INFO data_1400064cc = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x8
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400064d0[0x2] = 
{
    [0x0] =  0x6408
    [0x1] =  0x0016
}
struct Exception_Directory_Entry data_1400064d4 = 
{
    uint32_t beginAddress = 0x1e86
    uint32_t endAddress = 0x1ed4
    uint32_t unwindInformation = 0x64b8
}
struct UNWIND_INFO data_1400064e0 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_1400064e4 = 
{
    uint32_t beginAddress = 0x1e86
    uint32_t endAddress = 0x1ed4
    uint32_t unwindInformation = 0x64b8
}
struct UNWIND_INFO data_1400064f0 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_1400064f4 = 
{
    uint32_t beginAddress = 0x1e0f
    uint32_t endAddress = 0x1e86
    uint32_t unwindInformation = 0x649c
}
struct UNWIND_INFO data_140006500 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_140006504 = 
{
    uint32_t beginAddress = 0x1df3
    uint32_t endAddress = 0x1e0f
    uint32_t unwindInformation = 0x6488
}
struct UNWIND_INFO data_140006510 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_140006514 = 
{
    uint32_t beginAddress = 0x1dc0
    uint32_t endAddress = 0x1df3
    uint32_t unwindInformation = 0x647c
}
struct UNWIND_INFO data_140006520 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x6
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006524[0x2] = 
{
    [0x0] =  0x5206
    [0x1] =  0x3002
}
struct UNWIND_INFO data_140006528 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x28
    uint8_t CountOfUnwindCodes = 0x8
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_14000652c[0x8] = 
{
    [0x0] =  0x0128
    [0x1] =  0x0033
    [0x2] =  0xf019
    [0x3] =  0xe017
    [0x4] =  0xd015
    [0x5] =  0xc013
    [0x6] =  0x6011
    [0x7] =  0x5010
}
struct UNWIND_INFO data_14000653c = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x12
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006540[0x4] = 
{
    [0x0] =  0x7412
    [0x1] =  0x0032
    [0x2] =  0x3408
    [0x3] =  0x003a
}
struct Exception_Directory_Entry data_140006548 = 
{
    uint32_t beginAddress = 0x2320
    uint32_t endAddress = 0x2388
    uint32_t unwindInformation = 0x6528
}
struct UNWIND_INFO data_140006554 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006558[0x4] = 
{
    [0x0] =  0x7400
    [0x1] =  0x0032
    [0x2] =  0x3400
    [0x3] =  0x003a
}
struct Exception_Directory_Entry data_140006560 = 
{
    uint32_t beginAddress = 0x2320
    uint32_t endAddress = 0x2388
    uint32_t unwindInformation = 0x6528
}
struct UNWIND_INFO data_14000656c = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_140006570 = 
{
    uint32_t beginAddress = 0x2320
    uint32_t endAddress = 0x2388
    uint32_t unwindInformation = 0x6528
}
struct UNWIND_INFO data_14000657c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x6c
    uint8_t CountOfUnwindCodes = 0x8
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006580[0x8] = 
{
    [0x0] =  0x546c
    [0x1] =  0x0008
    [0x2] =  0x640f
    [0x3] =  0x000a
    [0x4] =  0x340f
    [0x5] =  0x0009
    [0x6] =  0x520f
    [0x7] =  0x700b
}
struct UNWIND_INFO data_140006590 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x1f
    uint8_t CountOfUnwindCodes = 0x9
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006594[0x9] = 
{
    [0x0] =  0x821f
    [0x1] =  0xf01b
    [0x2] =  0xe019
    [0x3] =  0xd017
    [0x4] =  0xc015
    [0x5] =  0x7013
    [0x6] =  0x6012
    [0x7] =  0x5011
    [0x8] =  0x3010
}

                  00 00                                                                                ..

struct UNWIND_INFO data_1400065a8 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x2
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400065ac[0x1] = 
{
    [0x0] =  0x3002
}

                                          00 00                                                                ..

struct UNWIND_INFO data_1400065b0 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0xd
    uint8_t CountOfUnwindCodes = 0x4
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400065b4[0x4] = 
{
    [0x0] =  0x740d
    [0x1] =  0x0003
    [0x2] =  0x6405
    [0x3] =  0x0002
}
struct Exception_Directory_Entry data_1400065bc = 
{
    uint32_t beginAddress = 0x4110
    uint32_t endAddress = 0x4136
    uint32_t unwindInformation = 0x65a8
}
struct UNWIND_INFO data_1400065c8 = 
{
    uint8_t VersionAndFlag = 0x21
    uint8_t SizeOfProlog = 0x0
    uint8_t CountOfUnwindCodes = 0x0
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
struct Exception_Directory_Entry data_1400065cc = 
{
    uint32_t beginAddress = 0x4110
    uint32_t endAddress = 0x4136
    uint32_t unwindInformation = 0x65a8
}
struct UNWIND_INFO data_1400065d8 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xf
    uint8_t CountOfUnwindCodes = 0x6
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400065dc[0x6] = 
{
    [0x0] =  0x640f
    [0x1] =  0x0007
    [0x2] =  0x340f
    [0x3] =  0x0006
    [0x4] =  0x320f
    [0x5] =  0x700b
}
struct UNWIND_INFO data_1400065e8 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x1c
    uint8_t CountOfUnwindCodes = 0xc
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_1400065ec[0xc] = 
{
    [0x0] =  0x741c
    [0x1] =  0x0008
    [0x2] =  0x641c
    [0x3] =  0x0007
    [0x4] =  0x541c
    [0x5] =  0x0006
    [0x6] =  0x341c
    [0x7] =  0x0005
    [0x8] =  0xf01c
    [0x9] =  0xe01a
    [0xa] =  0xd018
    [0xb] =  0xc016
}
struct UNWIND_INFO data_140006604 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xd
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006608[0x1] = 
{
    [0x0] =  0x420d
}

                              00 00                                                                        ..

struct UNWIND_INFO data_14000660c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x18
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006610[0x1] = 
{
    [0x0] =  0xc218
}

                                                      00 00                                                        ..

struct UNWIND_INFO data_140006614 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xe
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006618[0x1] = 
{
    [0x0] =  0x620e
}

                                                                              00 00                                        ..

struct UNWIND_INFO data_14000661c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x12
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006620[0x1] = 
{
    [0x0] =  0x6212
}

      00 00                                                                                        ..

struct UNWIND_INFO data_140006624 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x1b
    uint8_t CountOfUnwindCodes = 0x2
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006628[0x2] = 
{
    [0x0] =  0x011b
    [0x1] =  0x0015
}
struct UNWIND_INFO data_14000662c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x13
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006630[0x1] = 
{
    [0x0] =  0x8213
}

                                                      00 00                                                        ..

struct UNWIND_INFO data_140006634 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x9
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006638[0x1] = 
{
    [0x0] =  0x2209
}

                                                                              00 00                                        ..

struct UNWIND_INFO data_14000663c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x9
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006640[0x1] = 
{
    [0x0] =  0x8209
}

      00 00                                                                                        ..

struct UNWIND_INFO data_140006644 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x8
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006648[0x1] = 
{
    [0x0] =  0xa208
}

                              00 00                                                                        ..

struct UNWIND_INFO data_14000664c = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0xc
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006650[0x1] = 
{
    [0x0] =  0x220c
}

                                                      00 00                                                        ..

struct UNWIND_INFO data_140006654 = 
{
    uint8_t VersionAndFlag = 0x1
    uint8_t SizeOfProlog = 0x4
    uint8_t CountOfUnwindCodes = 0x1
    uint8_t FrameRegisterAndFrameRegisterOffset = 0x0
}
uint16_t data_140006658[0x1] = 
{
    [0x0] =  0xa204
}

                                                                              00 00 00 00 00 00                            ......

struct Export_Directory_Table __export_directory_table = 
{
    uint32_t exportFlags = 0x0
    uint32_t timeDateStamp = 0xffffffff
    uint16_t majorVersion = 0x0
    uint16_t minorVersion = 0x0
    uint32_t nameRva = 0x66b0
    uint32_t ordinalBase = 0x1
    uint32_t addressTableEntries = 0x4
    uint32_t numberOfNamePointers = 0x4
    uint32_t exportAddressTableRva = 0x6688
    uint32_t namePointerRva = 0x6698
    uint32_t ordinalTableRva = 0x66a8
}
uint32_t __pe_PP64Stub_export_address_table[0x4] = 
{
    [0x0] =  0x00001000
    [0x1] =  0x000010a0
    [0x2] =  0x000011e0
    [0x3] =  0x000013e0
}
uint32_t __pe_PP64Stub_export_name_pointer_table[0x4] = 
{
    [0x0] =  0x000066bd
    [0x1] =  0x000066c2
    [0x2] =  0x000066c9
    [0x3] =  0x000066d1
}
uint16_t __pe_PP64Stub_export_ordinal_table[0x4] = 
{
    [0x0] =  0x0000
    [0x1] =  0x0001
    [0x2] =  0x0002
    [0x3] =  0x0003
}
char __pe_PP64Stub_export_dll_name[0xd] = "PP64Stub.exe", 0
char __export_name(free)[0x5] = "free", 0
char __export_name(malloc)[0x7] = "malloc", 0
char __export_name(realloc)[0x8] = "realloc", 0
char __export_name(strncmp)[0x8] = "strncmp", 0

                                                                           00 00 00                                       ...
struct Import_Directory_Table __import_directory_entries[0x3] = 
{
    [0x0] = 
    {
        uint32_t importLookupTableRva = 0x6718
        uint32_t timeDateStamp = 0x0
        uint32_t forwarderChain = 0x0
        uint32_t nameRva = 0x68e2
        uint32_t importAddressTableRva = 0x6000
    }
    [0x1] = 
    {
        uint32_t importLookupTableRva = 0x6780
        uint32_t timeDateStamp = 0x0
        uint32_t forwarderChain = 0x0
        uint32_t nameRva = 0x6990
        uint32_t importAddressTableRva = 0x6068
    }
    [0x2] = 
    {
        uint32_t importLookupTableRva = 0x0
        uint32_t timeDateStamp = 0x0
        uint32_t forwarderChain = 0x0
        uint32_t nameRva = 0x0
        uint32_t importAddressTableRva = 0x0
    }
}
uint64_t __import_lookup_table_0(KERNEL32:HeapAlloc) = 0x67d8
uint64_t __import_lookup_table_0(KERNEL32:HeapFree) = 0x67e4
uint64_t __import_lookup_table_0(KERNEL32:HeapSize) = 0x67f0
uint64_t __import_lookup_table_0(KERNEL32:GetProcessHeap) = 0x67fc
uint64_t __import_lookup_table_0(KERNEL32:UnhandledExceptionFilter) = 0x680e
uint64_t __import_lookup_table_0(KERNEL32:SetUnhandledExceptionFilter) = 0x682a
uint64_t __import_lookup_table_0(KERNEL32:GetLastError) = 0x6848
uint64_t __import_lookup_table_0(KERNEL32:ReleaseSRWLockExclusive) = 0x6858
uint64_t __import_lookup_table_0(KERNEL32:ReleaseSRWLockShared) = 0x6872
uint64_t __import_lookup_table_0(KERNEL32:TryAcquireSRWLockExclusive) = 0x688a
uint64_t __import_lookup_table_0(KERNEL32:SetCriticalSectionSpinCount) = 0x68a8
uint64_t __import_lookup_table_0(KERNEL32:WakeAllConditionVariable) = 0x68c6
uint64_t data_140006778 = 0x0
uint64_t __import_lookup_table_1(USER32:GetMenu) = 0x68f0
uint64_t __import_lookup_table_1(USER32:GetSystemMenu) = 0x68fa
uint64_t __import_lookup_table_1(USER32:CheckMenuItem) = 0x690a
uint64_t __import_lookup_table_1(USER32:EnableMenuItem) = 0x691a
uint64_t __import_lookup_table_1(USER32:GetMenuItemID) = 0x692c
uint64_t __import_lookup_table_1(USER32:UpdateWindow) = 0x693c
uint64_t __import_lookup_table_1(USER32:GetWindowContextHelpId) = 0x694c
uint64_t __import_lookup_table_1(USER32:MessageBoxA) = 0x6966
uint64_t __import_lookup_table_1(USER32:MessageBoxW) = 0x6974
uint64_t __import_lookup_table_1(USER32:MessageBeep) = 0x6982
uint64_t data_1400067d0 = 0x0
uint16_t __export_name_ptr_table_0(KERNEL32:HeapAlloc) = 0x36c
char __import_name_0(KERNEL32:HeapAlloc)[0xa] = "HeapAlloc", 0
uint16_t __export_name_ptr_table_0(KERNEL32:HeapFree) = 0x370
char __import_name_0(KERNEL32:HeapFree)[0x9] = "HeapFree", 0

                                             00                                                                 .

uint16_t __export_name_ptr_table_0(KERNEL32:HeapSize) = 0x375
char __import_name_0(KERNEL32:HeapSize)[0x9] = "HeapSize", 0

                                                                                 00                                         .

uint16_t __export_name_ptr_table_0(KERNEL32:GetProcessHeap) = 0x2d4
char __import_name_0(KERNEL32:GetProcessHeap)[0xf] = "GetProcessHeap", 0

                                       00                                                                     .

uint16_t __export_name_ptr_table_0(KERNEL32:UnhandledExceptionFilter) = 0x5e6
char __import_name_0(KERNEL32:UnhandledExceptionFilter)[0x19] = "UnhandledExceptionFilter", 0

                           00                                                                             .

uint16_t __export_name_ptr_table_0(KERNEL32:SetUnhandledExceptionFilter) = 0x5a4
char __import_name_0(KERNEL32:SetUnhandledExceptionFilter)[0x1c] = "SetUnhandledExceptionFilter", 0
uint16_t __export_name_ptr_table_0(KERNEL32:GetLastError) = 0x27d
char __import_name_0(KERNEL32:GetLastError)[0xd] = "GetLastError", 0

                                                                     00                                                 .

uint16_t __export_name_ptr_table_0(KERNEL32:ReleaseSRWLockExclusive) = 0x4d8
char __import_name_0(KERNEL32:ReleaseSRWLockExclusive)[0x18] = "ReleaseSRWLockExclusive", 0
uint16_t __export_name_ptr_table_0(KERNEL32:ReleaseSRWLockShared) = 0x4d9
char __import_name_0(KERNEL32:ReleaseSRWLockShared)[0x15] = "ReleaseSRWLockShared", 0

                           00                                                                             .

uint16_t __export_name_ptr_table_0(KERNEL32:TryAcquireSRWLockExclusive) = 0x5dd
char __import_name_0(KERNEL32:TryAcquireSRWLockExclusive)[0x1b] = "TryAcquireSRWLockExclusive", 0

                     00                                                                                 .

uint16_t __export_name_ptr_table_0(KERNEL32:SetCriticalSectionSpinCount) = 0x538
char __import_name_0(KERNEL32:SetCriticalSectionSpinCount)[0x1c] = "SetCriticalSectionSpinCount", 0
uint16_t __export_name_ptr_table_0(KERNEL32:WakeAllConditionVariable) = 0x618
char __import_name_0(KERNEL32:WakeAllConditionVariable)[0x19] = "WakeAllConditionVariable", 0

   00                                                                                             .

char __import_dll_name(KERNEL32)[0xd] = "KERNEL32.dll", 0

                                             00                                                                 .

uint16_t __export_name_ptr_table_1(USER32:GetMenu) = 0x179
char __import_name_1(USER32:GetMenu)[0x8] = "GetMenu", 0
uint16_t __export_name_ptr_table_1(USER32:GetSystemMenu) = 0x1c8
char __import_name_1(USER32:GetSystemMenu)[0xe] = "GetSystemMenu", 0
uint16_t __export_name_ptr_table_1(USER32:CheckMenuItem) = 0x43
char __import_name_1(USER32:CheckMenuItem)[0xe] = "CheckMenuItem", 0
uint16_t __export_name_ptr_table_1(USER32:EnableMenuItem) = 0xe9
char __import_name_1(USER32:EnableMenuItem)[0xf] = "EnableMenuItem", 0

                                 00                                                                         .

uint16_t __export_name_ptr_table_1(USER32:GetMenuItemID) = 0x180
char __import_name_1(USER32:GetMenuItemID)[0xe] = "GetMenuItemID", 0
uint16_t __export_name_ptr_table_1(USER32:UpdateWindow) = 0x3d0
char __import_name_1(USER32:UpdateWindow)[0xd] = "UpdateWindow", 0

                                 00                                                                         .

uint16_t __export_name_ptr_table_1(USER32:GetWindowContextHelpId) = 0x1e1
char __import_name_1(USER32:GetWindowContextHelpId)[0x17] = "GetWindowContextHelpId", 0

               00                                                                                     .

uint16_t __export_name_ptr_table_1(USER32:MessageBoxA) = 0x284
char __import_name_1(USER32:MessageBoxA)[0xc] = "MessageBoxA", 0
uint16_t __export_name_ptr_table_1(USER32:MessageBoxW) = 0x28b
char __import_name_1(USER32:MessageBoxW)[0xc] = "MessageBoxW", 0
uint16_t __export_name_ptr_table_1(USER32:MessageBeep) = 0x283
char __import_name_1(USER32:MessageBeep)[0xc] = "MessageBeep", 0
char __import_dll_name(USER32)[0xb] = "USER32.dll", 0

                                                                                 00                                         .
.rdata section ended  {0x140006000-0x14000699c}

.data section started  {0x140007000-0x1400074a0}
int32_t data_140007000 = 0x0

            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................

int32_t data_140007020 = 0x0
int32_t data_140007024 = 0x0
int32_t data_140007028 = 0x0
int32_t data_14000702c = 0x0
int32_t data_140007030 = 0x0
int32_t data_140007034 = 0x0
int32_t data_140007038 = 0x0

                                                                                    00 00 00 00                              ....

int32_t data_140007040 = 0x0

            00 00 00 00                                                                              ....

int64_t data_140007048 = 0x0

                                                00 00 00 00 00 00 00 00                                          ........

int16_t data_140007058 = 0x0

                                                                              00 00 00 00 00 00                            ......

int64_t data_140007060 = 0x0
int64_t data_140007068 = 0x0
int64_t data_140007070 = 0x0
int64_t data_140007078 = 0x0
int64_t data_140007080 = 0x0
int64_t data_140007088 = 0x0
int64_t data_140007090 = 0x0

                                                                        00 00 00 00 00 00 00 00                          ........
data_1400070a0:
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
.data section ended  {0x140007000-0x1400074a0}

.pdata section started  {0x140008000-0x1400082ac}
struct Exception_Directory_Entry __exception_directory_entries(0) = 
{
    uint32_t beginAddress = 0x1000
    uint32_t endAddress = 0x1023
    uint32_t unwindInformation = 0x637c
}
struct Exception_Directory_Entry __exception_directory_entries(1) = 
{
    uint32_t beginAddress = 0x1030
    uint32_t endAddress = 0x1098
    uint32_t unwindInformation = 0x63cc
}
struct Exception_Directory_Entry __exception_directory_entries(2) = 
{
    uint32_t beginAddress = 0x10a0
    uint32_t endAddress = 0x10c6
    uint32_t unwindInformation = 0x637c
}
struct Exception_Directory_Entry __exception_directory_entries(3) = 
{
    uint32_t beginAddress = 0x1120
    uint32_t endAddress = 0x112c
    uint32_t unwindInformation = 0x6350
}
struct Exception_Directory_Entry __exception_directory_entries(4) = 
{
    uint32_t beginAddress = 0x112c
    uint32_t endAddress = 0x113f
    uint32_t unwindInformation = 0x6358
}
struct Exception_Directory_Entry __exception_directory_entries(5) = 
{
    uint32_t beginAddress = 0x113f
    uint32_t endAddress = 0x1147
    uint32_t unwindInformation = 0x636c
}
struct Exception_Directory_Entry __exception_directory_entries(6) = 
{
    uint32_t beginAddress = 0x1150
    uint32_t endAddress = 0x11dd
    uint32_t unwindInformation = 0x63d4
}
struct Exception_Directory_Entry __exception_directory_entries(7) = 
{
    uint32_t beginAddress = 0x11e0
    uint32_t endAddress = 0x1227
    uint32_t unwindInformation = 0x6384
}
struct Exception_Directory_Entry __exception_directory_entries(8) = 
{
    uint32_t beginAddress = 0x1227
    uint32_t endAddress = 0x125b
    uint32_t unwindInformation = 0x6390
}
struct Exception_Directory_Entry __exception_directory_entries(9) = 
{
    uint32_t beginAddress = 0x125b
    uint32_t endAddress = 0x12f6
    uint32_t unwindInformation = 0x63a4
}
struct Exception_Directory_Entry __exception_directory_entries(10) = 
{
    uint32_t beginAddress = 0x1300
    uint32_t endAddress = 0x13d5
    uint32_t unwindInformation = 0x63b8
}
struct Exception_Directory_Entry __exception_directory_entries(11) = 
{
    uint32_t beginAddress = 0x1460
    uint32_t endAddress = 0x14a7
    uint32_t unwindInformation = 0x63e4
}
struct Exception_Directory_Entry __exception_directory_entries(12) = 
{
    uint32_t beginAddress = 0x14b0
    uint32_t endAddress = 0x14f3
    uint32_t unwindInformation = 0x63e4
}
struct Exception_Directory_Entry __exception_directory_entries(13) = 
{
    uint32_t beginAddress = 0x1650
    uint32_t endAddress = 0x172b
    uint32_t unwindInformation = 0x6410
}
struct Exception_Directory_Entry __exception_directory_entries(14) = 
{
    uint32_t beginAddress = 0x1730
    uint32_t endAddress = 0x18ad
    uint32_t unwindInformation = 0x6438
}
struct Exception_Directory_Entry __exception_directory_entries(15) = 
{
    uint32_t beginAddress = 0x18b0
    uint32_t endAddress = 0x18fb
    uint32_t unwindInformation = 0x63f0
}
struct Exception_Directory_Entry __exception_directory_entries(16) = 
{
    uint32_t beginAddress = 0x1900
    uint32_t endAddress = 0x19c0
    uint32_t unwindInformation = 0x642c
}
struct Exception_Directory_Entry __exception_directory_entries(17) = 
{
    uint32_t beginAddress = 0x19c0
    uint32_t endAddress = 0x1bec
    uint32_t unwindInformation = 0x63f8
}
struct Exception_Directory_Entry __exception_directory_entries(18) = 
{
    uint32_t beginAddress = 0x1bf0
    uint32_t endAddress = 0x1cf2
    uint32_t unwindInformation = 0x6458
}
struct Exception_Directory_Entry __exception_directory_entries(19) = 
{
    uint32_t beginAddress = 0x1cf2
    uint32_t endAddress = 0x1dc0
    uint32_t unwindInformation = 0x6464
}
struct Exception_Directory_Entry __exception_directory_entries(20) = 
{
    uint32_t beginAddress = 0x1dc0
    uint32_t endAddress = 0x1df3
    uint32_t unwindInformation = 0x647c
}
struct Exception_Directory_Entry __exception_directory_entries(21) = 
{
    uint32_t beginAddress = 0x1df3
    uint32_t endAddress = 0x1e0f
    uint32_t unwindInformation = 0x6488
}
struct Exception_Directory_Entry __exception_directory_entries(22) = 
{
    uint32_t beginAddress = 0x1e0f
    uint32_t endAddress = 0x1e86
    uint32_t unwindInformation = 0x649c
}
struct Exception_Directory_Entry __exception_directory_entries(23) = 
{
    uint32_t beginAddress = 0x1e86
    uint32_t endAddress = 0x1ed4
    uint32_t unwindInformation = 0x64b8
}
struct Exception_Directory_Entry __exception_directory_entries(24) = 
{
    uint32_t beginAddress = 0x1ed4
    uint32_t endAddress = 0x2269
    uint32_t unwindInformation = 0x64cc
}
struct Exception_Directory_Entry __exception_directory_entries(25) = 
{
    uint32_t beginAddress = 0x2269
    uint32_t endAddress = 0x2271
    uint32_t unwindInformation = 0x64e0
}
struct Exception_Directory_Entry __exception_directory_entries(26) = 
{
    uint32_t beginAddress = 0x2271
    uint32_t endAddress = 0x2289
    uint32_t unwindInformation = 0x64f0
}
struct Exception_Directory_Entry __exception_directory_entries(27) = 
{
    uint32_t beginAddress = 0x2289
    uint32_t endAddress = 0x2291
    uint32_t unwindInformation = 0x6500
}
struct Exception_Directory_Entry __exception_directory_entries(28) = 
{
    uint32_t beginAddress = 0x2291
    uint32_t endAddress = 0x229c
    uint32_t unwindInformation = 0x6510
}
struct Exception_Directory_Entry __exception_directory_entries(29) = 
{
    uint32_t beginAddress = 0x22a0
    uint32_t endAddress = 0x22ea
    uint32_t unwindInformation = 0x6520
}
struct Exception_Directory_Entry __exception_directory_entries(30) = 
{
    uint32_t beginAddress = 0x22f0
    uint32_t endAddress = 0x2314
    uint32_t unwindInformation = 0x637c
}
struct Exception_Directory_Entry __exception_directory_entries(31) = 
{
    uint32_t beginAddress = 0x2320
    uint32_t endAddress = 0x2388
    uint32_t unwindInformation = 0x6528
}
struct Exception_Directory_Entry __exception_directory_entries(32) = 
{
    uint32_t beginAddress = 0x2388
    uint32_t endAddress = 0x2460
    uint32_t unwindInformation = 0x653c
}
struct Exception_Directory_Entry __exception_directory_entries(33) = 
{
    uint32_t beginAddress = 0x2460
    uint32_t endAddress = 0x26ad
    uint32_t unwindInformation = 0x6554
}
struct Exception_Directory_Entry __exception_directory_entries(34) = 
{
    uint32_t beginAddress = 0x26ad
    uint32_t endAddress = 0x26c4
    uint32_t unwindInformation = 0x656c
}
struct Exception_Directory_Entry __exception_directory_entries(35) = 
{
    uint32_t beginAddress = 0x26d0
    uint32_t endAddress = 0x2832
    uint32_t unwindInformation = 0x657c
}
struct Exception_Directory_Entry __exception_directory_entries(36) = 
{
    uint32_t beginAddress = 0x2840
    uint32_t endAddress = 0x35c8
    uint32_t unwindInformation = 0x6590
}
struct Exception_Directory_Entry __exception_directory_entries(37) = 
{
    uint32_t beginAddress = 0x35d0
    uint32_t endAddress = 0x3670
    uint32_t unwindInformation = 0x65d8
}
struct Exception_Directory_Entry __exception_directory_entries(38) = 
{
    uint32_t beginAddress = 0x3670
    uint32_t endAddress = 0x3a94
    uint32_t unwindInformation = 0x6590
}
struct Exception_Directory_Entry __exception_directory_entries(39) = 
{
    uint32_t beginAddress = 0x3aa0
    uint32_t endAddress = 0x3adf
    uint32_t unwindInformation = 0x63e4
}
struct Exception_Directory_Entry __exception_directory_entries(40) = 
{
    uint32_t beginAddress = 0x3b00
    uint32_t endAddress = 0x4110
    uint32_t unwindInformation = 0x65e8
}
struct Exception_Directory_Entry __exception_directory_entries(41) = 
{
    uint32_t beginAddress = 0x4110
    uint32_t endAddress = 0x4136
    uint32_t unwindInformation = 0x65a8
}
struct Exception_Directory_Entry __exception_directory_entries(42) = 
{
    uint32_t beginAddress = 0x4136
    uint32_t endAddress = 0x41be
    uint32_t unwindInformation = 0x65b0
}
struct Exception_Directory_Entry __exception_directory_entries(43) = 
{
    uint32_t beginAddress = 0x41be
    uint32_t endAddress = 0x41c0
    uint32_t unwindInformation = 0x65c8
}
struct Exception_Directory_Entry __exception_directory_entries(44) = 
{
    uint32_t beginAddress = 0x4710
    uint32_t endAddress = 0x4776
    uint32_t unwindInformation = 0x63e4
}
struct Exception_Directory_Entry __exception_directory_entries(45) = 
{
    uint32_t beginAddress = 0x4830
    uint32_t endAddress = 0x48c4
    uint32_t unwindInformation = 0x6604
}
struct Exception_Directory_Entry __exception_directory_entries(46) = 
{
    uint32_t beginAddress = 0x48d0
    uint32_t endAddress = 0x49f7
    uint32_t unwindInformation = 0x660c
}
struct Exception_Directory_Entry __exception_directory_entries(47) = 
{
    uint32_t beginAddress = 0x4a00
    uint32_t endAddress = 0x4a36
    uint32_t unwindInformation = 0x6614
}
struct Exception_Directory_Entry __exception_directory_entries(48) = 
{
    uint32_t beginAddress = 0x4a40
    uint32_t endAddress = 0x4bcc
    uint32_t unwindInformation = 0x6624
}
struct Exception_Directory_Entry __exception_directory_entries(49) = 
{
    uint32_t beginAddress = 0x4bd0
    uint32_t endAddress = 0x4c6e
    uint32_t unwindInformation = 0x661c
}
struct Exception_Directory_Entry __exception_directory_entries(50) = 
{
    uint32_t beginAddress = 0x4c70
    uint32_t endAddress = 0x4d5f
    uint32_t unwindInformation = 0x660c
}
struct Exception_Directory_Entry __exception_directory_entries(51) = 
{
    uint32_t beginAddress = 0x4d60
    uint32_t endAddress = 0x4deb
    uint32_t unwindInformation = 0x662c
}
struct Exception_Directory_Entry __exception_directory_entries(52) = 
{
    uint32_t beginAddress = 0x4df0
    uint32_t endAddress = 0x4e6b
    uint32_t unwindInformation = 0x663c
}
struct Exception_Directory_Entry __exception_directory_entries(53) = 
{
    uint32_t beginAddress = 0x4e70
    uint32_t endAddress = 0x4eb7
    uint32_t unwindInformation = 0x664c
}
struct Exception_Directory_Entry __exception_directory_entries(54) = 
{
    uint32_t beginAddress = 0x4ec0
    uint32_t endAddress = 0x5043
    uint32_t unwindInformation = 0x6654
}
struct Exception_Directory_Entry __exception_directory_entries(55) = 
{
    uint32_t beginAddress = 0x5060
    uint32_t endAddress = 0x5675
    uint32_t unwindInformation = 0x6644
}
struct Exception_Directory_Entry __exception_directory_entries(56) = 
{
    uint32_t beginAddress = 0x5680
    uint32_t endAddress = 0x56c0
    uint32_t unwindInformation = 0x6634
}
.pdata section ended  {0x140008000-0x1400082ac}

.rsrc section started  {0x140009000-0x1400091e0}
struct Resource_Directory_Table __resource_directory_table_0 = 
{
    uint32_t characteristics = 0x0
    uint32_t timeDateStamp = 0x0
    uint16_t majorVersion = 0x0
    uint16_t minorVersion = 0x0
    uint16_t numNameEntries = 0x0
    uint16_t numIdEntries = 0x1
}
struct Resource_Directory_Table_Entry __resource_directory_table_0_entries[0x1] = 
{
    [0x0] = 
    {
        uint32_t id = 0x18
        uint32_t offset = 0x80000018
    }
}
struct Resource_Directory_Table __resource_directory_table_1 = 
{
    uint32_t characteristics = 0x0
    uint32_t timeDateStamp = 0x0
    uint16_t majorVersion = 0x0
    uint16_t minorVersion = 0x0
    uint16_t numNameEntries = 0x0
    uint16_t numIdEntries = 0x1
}
struct Resource_Directory_Table_Entry __resource_directory_table_1_entries[0x1] = 
{
    [0x0] = 
    {
        uint32_t id = 0x1
        uint32_t offset = 0x80000030
    }
}
struct Resource_Directory_Table __resource_directory_table_2 = 
{
    uint32_t characteristics = 0x0
    uint32_t timeDateStamp = 0x0
    uint16_t majorVersion = 0x0
    uint16_t minorVersion = 0x0
    uint16_t numNameEntries = 0x0
    uint16_t numIdEntries = 0x1
}
struct Resource_Directory_Table_Entry __resource_directory_table_2_entries[0x1] = 
{
    [0x0] = 
    {
        uint32_t id = 0x409
        uint32_t offset = 0x48
    }
}
struct Resource_Data_Entry __resource_directory_table_2_data_entry_0 = 
{
    uint32_t dataRva = 0x9060
    uint32_t dataSize = 0x17d
    uint32_t codepage = 0x0
    uint32_t reserved = 0x0
}

                                                                        00 00 00 00 00 00 00 00                          ........

char data_140009060[0x17d] = "<?xml version=\'1.0\' encoding=\'UTF-8\' standalone=\'yes\'?>\r\n"
    "<assembly xmlns=\'urn:schemas-microsoft-com:asm.v1\' manifestVersion=\'1.0\'>\r\n"
    "  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n"
    "    <security>\r\n"
    "      <requestedPrivileges>\r\n"
    "        <requestedExecutionLevel level=\'asInvoker\' uiAccess=\'false\' />\r\n"
    "      </requestedPrivileges>\r\n"
    "    </security>\r\n"
    "  </trustInfo>\r\n"
    "</assembly>\r\n"

                                                                                       00 00 00                               ...
.rsrc section ended  {0x140009000-0x1400091e0}

.reloc section started  {0x14000a000-0x14000a010}
00 60 00 00 10 00 00 00 68 a1 70 a1 78 a1 00 00                                                  .`......h.p.x...
.reloc section ended  {0x14000a000-0x14000a010}

.ATOM section started  {0x14000b000-0x14000c5ef}
5d 00 00 10 00 00 38 00 00 00 00 00 00 00 26 96 8e 70 00 17 f7 ec 05 bb ea f4 ff 94 01 2f 44 ee  ].....8.......&..p.........../D.
4e bd 09 74 46 98 0b 73 e3 0f 1f c8 aa 7d 89 bd fc 16 94 3c d2 f7 f3 2a 13 cc fc 8e b3 9f c0 87  N..tF..s.....}.....<...*........
3a cd 3e 9e 8e 23 73 7f d4 5c c3 62 cc b5 cf 62 69 f7 c2 40 97 5e aa 87 67 77 60 f4 65 ce 86 de  :.>..#s..\.b...bi..@.^..gw`.e...
9e b3 c7 df e5 06 34 4d 40 11 e1 50 54 39 44 79 a5 7a ce 37 c8 04 a1 ac b5 b8 34 f0 18 f7 4a 50  ......4M@..PT9Dy.z.7......4...JP
27 22 32 a7 f0 33 c2 1d d5 de 40 c8 3b b3 4c 8a 67 00 0e 63 97 86 3b 1c ed 0b 5f f0 27 fe b8 1c  '"2..3....@.;.L.g..c..;..._.'...
62 8a 7c 88 7e e2 d0 52 c9 20 16 f2 6b fc c7 99 7e 4a d0 32 bf 09 d8 a6 cc 67 25 62 a6 27 58 16  b.|.~..R. ..k...~J.2.....g%b.'X.
d7 d4 b6 b7 28 7b d7 b7 d0 0a d1 3f 66 84 bb 31 3d bc ee 59 a8 84 1d 25 b5 2f 34 08 76 73 09 8e  ....({.....?f..1=..Y...%./4.vs..
78 e1 7f 09 17 eb a9 b3 d4 02 c6 eb ee b9 69 f2 ea bb ce f4 ff 9d 3d 48 9b a6 b2 b9 09 23 37 2a  x.............i.......=H.....#7*
d4 1b 14 39 fc 9b c2 01 4b e6 25 f0 88 02 01 83 64 f1 d2 6b 5b 99 05 4c 2b e0 00 85 4f 78 75 55  ...9....K.%.....d..k[..L+...OxuU
10 1d 9e a3 59 fc 73 d2 b2 7a 28 ad 99 1a 17 e1 e6 fa 5c f3 d4 b4 dc 4e 56 c5 b9 44 12 28 ca 39  ....Y.s..z(.......\....NV..D.(.9
84 10 0b c3 28 cf 8a f9 73 26 4f 76 d8 06 1f 14 31 43 36 02 97 cb 87 7c 33 1b 36 b5 b2 f3 b3 5b  ....(...s&Ov....1C6....|3.6....[
10 e4 36 17 a3 7b 1f 2a 38 af 77 1b 24 a0 85 a3 15 4a 83 51 77 a8 b8 ac 5a c5 0e fd 81 e0 2b fc  ..6..{.*8.w.$....J.Qw...Z.....+.
7b 2b 5e 0f 9e e6 62 14 94 49 cb 6c 00 26 8b 03 b6 27 19 75 f1 37 2c 3f c1 44 6e 03 a5 b9 2b 9a  {+^...b..I.l.&...'.u.7,?.Dn...+.
76 ed 1c d6 e1 57 28 ec d2 9b 26 e8 ac 26 4c df 35 19 c8 f8 ef be 67 c8 fb cc ee 86 8a 64 e4 0c  v....W(...&..&L.5.....g......d..
29 69 36 d7 70 ae bc 6e 27 7f a8 5c 14 d8 1c b7 77 49 39 a5 40 0c 6a 32 58 e8 00 72 f9 73 f1 e9  )i6.p..n'..\....wI9.@.j2X..r.s..
c4 fb de 67 fe 8e 8d e5 e5 1a fa 1a b9 e9 d2 6c 8e 48 fb e6 bc fb b7 a2 72 c6 11 8b 7e 5d 05 04  ...g...........l.H......r...~]..
68 ab a0 6c 19 14 68 e4 2c 5b 3f 7a 4f 86 30 2b 26 45 7c ed 56 31 47 68 58 56 3a 3d 59 77 bf bb  h..l..h.,[?zO.0+&E|.V1GhXV:=Yw..
43 8c 93 79 5b 5c cc 2e 6e 3c 2a 84 3f 59 32 02 80 90 fe 6d eb 7b 1e 67 9d dd 99 ab 93 43 11 c1  C..y[\..n<*.?Y2....m.{.g.....C..
da b8 07 3c f9 15 be 40 e8 28 31 07 5f 36 0b 58 0f 31 2d 57 ac 06 2b 82 02 c5 4a c4 8a 52 0b d4  ...<...@.(1._6.X.1-W..+...J..R..
6e 12 5d 2f 52 c7 bc b5 7d 15 1f aa 9f 09 4d 67 18 d9 cc 8b 60 9a bf 5f 87 e3 4e fb 02 e8 de 97  n.]/R...}.....Mg....`.._..N.....
08 be db d9 ba 6d c6 72 bd 15 5c d5 ab c8 01 6f a0 7a 82 49 4d 47 84 71 ec c7 e6 da 66 32 ec 70  .....m.r..\....o.z.IMG.q....f2.p
a8 9f 97 76 78 9c c0 9c 14 4e 5f 30 d0 d9 7d 7e ab f2 ea c8 92 49 cb 08 61 2d 2d 07 96 40 40 52  ...vx....N_0..}~.....I..a--..@@R
23 3e e6 e6 93 78 0e df 36 11 45 68 01 54 fd e5 35 5c 06 a5 0b 1d e1 32 b4 1c 2e f0 83 28 eb 63  #>...x..6.Eh.T..5\.....2.....(.c
9a 03 6a 34 9f 06 71 1d 76 e8 d9 e0 6c e5 3d b9 95 fa 2e ad a5 3c e8 9e 76 e4 8e 59 1b b9 a8 55  ..j4..q.v...l.=......<..v..Y...U
15 ce 2c 53 c8 51 4a cd 62 af f9 b0 86 4a 4a b8 28 59 a8 c5 7c 85 24 b5 40 37 20 d8 ba 31 02 10  ..,S.QJ.b....JJ.(Y..|.$.@7 ..1..
e0 68 20 ff 0f f8 1d ca 5d 70 50 fd c5 4d b2 97 94 7e 24 b4 e8 a5 27 ca 0e 13 a4 e5 9c 46 24 c1  .h .....]pP..M...~$...'......F$.
79 41 b0 8a cb d2 24 f7 da 5f 55 d0 4b 56 e8 14 d2 18 d1 06 09 95 86 02 ad 7a 2f 37 7e ad 86 4b  yA....$.._U.KV...........z/7~..K
90 21 84 c1 ef 80 07 54 b0 e9 f1 c5 67 aa 09 5b d7 7a b7 32 81 ef 4f 90 b4 0f b4 1a e9 04 c1 39  .!.....T....g..[.z.2..O........9
09 18 82 22 36 df bb 1c 2b 82 ad 60 60 f8 23 ee 97 23 90 dc d4 6a 2f 1b 55 e9 89 91 fe 1c 8d 14  ..."6...+..``.#..#...j/.U.......
18 84 6c 38 86 94 d9 26 76 0c 6b 51 9a a7 35 6e 41 88 99 eb 88 ce e8 ff f2 50 69 11 45 9f 0c ed  ..l8...&v.kQ..5nA........Pi.E...
da 06 26 97 a3 1d b2 14 5a 6d fe 5c 06 6a 8d b2 e7 d1 4a 38 40 0e 2b 55 3d 8e bb 06 c1 ec 5a 2b  ..&.....Zm.\.j....J8@.+U=.....Z+
dc 54 71 46 12 9c 42 00 8e 52 95 fd 6d 17 af 12 db a6 05 53 cc 58 61 94 45 d5 4e 0f 32 81 e5 ae  .TqF..B..R..m......S.Xa.E.N.2...
e8 70 62 49 58 68 37 0e 7a 0a 43 88 b4 86 1a ef 7c ea 4e fc ca a5 ca 26 4e a6 04 b8 98 e8 c2 6c  .pbIXh7.z.C.....|.N....&N......l
e2 1c cb 4e c6 d7 ca a6 fe a7 19 e6 bd 85 cb cc 70 a5 7a a6 9a 4a f3 7f ca 0a e7 49 59 a0 24 57  ...N............p.z..J.....IY.$W
6b 27 59 5d 31 42 38 50 ae b2 44 58 a2 8f 9e 25 59 25 46 1c 4b 2e f2 4d cc 39 c8 00 bc dc 59 dc  k'Y]1B8P..DX...%Y%F.K..M.9....Y.
d7 99 07 a0 a7 b5 cf 66 0b 18 ab 13 57 17 7a a7 13 01 77 a6 62 81 07 53 48 73 2b 44 b8 69 93 b9  .......f....W.z...w.b..SHs+D.i..
da 7e cd 6b d8 44 56 1a 51 34 58 3d ba 08 bd e7 be 8a b9 32 4f ca 65 7c 18 a9 24 cf a2 bb 43 bb  .~.k.DV.Q4X=.......2O.e|..$...C.
29 c9 4a b5 3c 6f af 9b 8e 00 67 68 79 83 5c 57 dd 8f f8 ab a2 b6 41 18 cb d7 dc 6f d1 4f b4 94  ).J.<o....ghy.\W......A....o.O..
ca df c8 07 be d7 75 d6 5a f2 f7 96 0f d1 ba 78 cf e8 1d e8 ae 74 fb f4 b6 7d 80 b3 65 bc 6e 97  ......u.Z......x.....t...}..e.n.
23 19 58 76 a5 f3 ab 11 5f 8a 73 66 cc 8c a8 7a 0b 94 26 43 d6 0b ee bb 50 29 4a c6 e4 9e b1 7b  #.Xv...._.sf...z..&C....P)J....{
a5 5d e7 1a 49 2c 2e 9b 4b 5f 3a 64 c7 8d 32 d0 9c 81 64 95 1c 61 28 ef 97 2b 94 7d fc 1b 7b b8  .]..I,..K_:d..2...d..a(..+.}..{.
db 39 ff 1f 0c f6 c6 66 01 bb 4a 0f 24 c8 fe 2b d4 5e cc 79 d9 be de f3 f5 cd b0 69 bd 6a d0 2e  .9.....f..J.$..+.^.y.......i.j..
93 95 82 f2 7c 67 f3 82 21 a9 1c 04 6a 60 0b 2b 7b 8c c1 2e cb c8 34 a2 61 df a6 72 2f af 91 b8  ....|g..!...j`.+{.....4.a..r/...
63 56 69 71 6d f1 ca 4a e7 67 6b b2 31 a2 e6 59 f3 26 5d 44 ee 9a c4 51 90 3f e1 b3 9f c7 47 a1  cViqm..J.gk.1..Y.&]D...Q.?....G.
6c aa 73 0c 02 cc 60 bc d6 c0 84 9e 1a 86 7f 08 1c 93 e0 c0 2f e2 13 af 3c e3 89 6c ca fe d8 8c  l.s...`............./...<..l....
27 17 3f d6 c2 a5 07 7a 64 a5 c3 cf 7c f1 99 33 98 2f 6d 90 4f db 36 87 cb 9f ff 9b 4c 63 61 de  '.?....zd...|..3./m.O.6.....Lca.
ad 06 5b 48 75 ea 76 35 b6 81 1d 83 68 57 4f 80 85 c8 35 e4 f3 c5 8b d5 10 14 6e 36 33 e1 5d b7  ..[Hu.v5....hWO...5.......n63.].
28 68 29 1f bb 2c b9 44 2a 73 c3 0e f3 d1 5b 1f 10 67 52 3a b8 8a be 13 ab 4b af b9 e9 ec 2a c8  (h)..,.D*s....[..gR:.....K....*.
46 c3 be 4a b3 06 3e cb 99 51 2f b8 0b d1 27 a9 6b 48 6a d5 17 1d ed 6c b3 1d 14 ab 8b a8 72 96  F..J..>..Q/...'.kHj....l......r.
35 5d 3a dd 7a fb 7d b9 02 48 d2 2a 85 3b 31 55 40 6a da 09 61 79 03 73 14 2e ea c3 dc 08 b2 c3  5]:.z.}..H.*.;1U@j..ay.s........
e3 e9 79 2e 4d 00 00 95 cc 3f 64 2e 3e e2 8b fd 4a 3f a2 c6 1c ed 49 8f 46 20 ab a7 01 61 66 07  ..y.M....?d.>...J?....I.F ...af.
f4 88 ae 9c 7d 17 06 36 9d 3c 29 9f 18 a9 f5 84 4e 35 52 f1 e1 5d d1 fd 5d d2 ed b6 9e 81 90 fa  ....}..6.<).....N5R..]..].......
69 fb 63 98 9c 4b 20 e3 54 a8 63 e2 8f 8b 99 e8 72 d3 43 8b b9 d5 37 27 0a 84 92 2d f4 39 a7 0f  i.c..K .T.c.....r.C...7'...-.9..
75 20 e0 4d 37 17 58 f6 d1 39 c8 92 a9 19 b9 0e 42 f2 56 90 86 fb 07 29 c8 60 0f f4 d4 92 93 f1  u .M7.X..9......B.V....).`......
84 db 69 2f 13 21 32 ea 4d f6 d0 59 01 81 3c 2a 10 c4 3e 98 6c 8e 92 3a 4c 3c 3b ca bf b0 e6 31  ..i/.!2.M..Y..<*..>.l..:L<;....1
04 08 8e 3a 6b c0 8a 80 3d 24 d1 b6 78 63 be 63 76 64 dc 35 fc b7 e1 97 fa f2 2c 5b 45 dc 35 10  ...:k...=$..xc.cvd.5......,[E.5.
f6 e9 ce 9d bd 47 61 69 1f dc 7b 54 bc 8b d8 43 3c b3 be b5 75 9f fb 45 ab ad d1 fd cf 2a 22 9b  .....Gai..{T...C<...u..E.....*".
30 f8 7e cc ae f1 ab 39 8a 08 09 de f9 81 d0 97 79 9d f4 98 7f 48 b8 5f 11 12 2f af 4c 51 47 36  0.~....9........y....H._../.LQG6
ad c8 b7 36 cf 6c 1f a4 9d 53 b7 d6 2f e9 fb b1 b8 0e 87 44 e5 d8 7d 3a 37 73 52 8b 8f 0d 9b 02  ...6.l...S../......D..}:7sR.....
af 55 c7 52 03 29 e6 b9 e9 15 aa 54 98 3c 18 4b a3 29 fb 7b ba d3 9e 7c b1 39 de 39 3f d4 0f 73  .U.R.).....T.<.K.).{...|.9.9?..s
2b 5f 5c 11 e6 10 92 05 11 9a d4 83 92 89 64 54 14 59 40 f6 69 b8 ca 68 a5 51 0c e6 f6 af c3 bc  +_\...........dT.Y@.i..h.Q......
5f dd 83 f9 3a cf 11 86 7a fd 64 6f a4 7d 92 50 82 f8 e2 f3 eb ac af ab 12 91 ff 90 11 7e 76 22  _...:...z.do.}.P.............~v"
2e 15 21 f3 45 42 66 13 46 35 0c 29 98 87 d7 29 5f 8f 42 de 23 d9 33 2c ce 8b 92 11 86 95 bc bd  ..!.EBf.F5.)...)_.B.#.3,........
55 37 2e 4f 40 e6 ac 2d ee ea 5a cb f6 0f 05 1e 10 89 41 1e 58 e1 31 92 e2 93 f2 07 f9 22 34 2b  U7.O@..-..Z.......A.X.1......"4+
75 45 54 7c 86 61 88 35 27 2a 11 be 5d 6e 29 af c4 c8 14 70 cb 23 19 7e 47 4c bd bc 51 ef b7 6f  uET|.a.5'*..]n)....p.#.~GL..Q..o
e8 b3 0d a8 7e ed 8e aa 75 02 9f 5f 72 c2 dd f7 fa 82 ee 72 e7 9d 88 1e cc db ad f8 39 8d 18 82  ....~...u.._r......r........9...
b3 9d 18 a2 24 95 e3 ee 42 7d 7f e3 09 96 0f 8d 17 02 e6 77 e1 a2 da d3 1f a3 24 0c 43 30 b9 b0  ....$...B}.........w......$.C0..
90 d7 75 94 ce e8 4c 7b 61 b2 85 95 31 f5 12 ed 8e c8 0e fc e9 67 03 68 0b 2a 61 55 c6 57 bf 4e  ..u...L{a...1........g.h.*aU.W.N
d0 ef 41 41 40 a8 ad a6 0d bf 92 38 6b 58 c3 62 9b 8e cc 43 ca bb c4 64 44 6e e5 09 08 68 08 e3  ..AA@......8kX.b...C...dDn...h..
f4 39 91 63 f8 ca d9 98 db 18 50 7b b2 32 9d f3 be 8e 38 83 39 e7 21 73 03 5e 0c c2 71 2a 9f 3f  .9.c......P{.2....8.9.!s.^..q*.?
b2 fc 7c 77 46 0d 1d e9 a3 a2 48 d0 52 3c b6 89 a6 ce 5d 78 a5 91 0a 4a 8b c8 fd 7d 00 2d 3c ba  ..|wF.....H.R<....]x...J...}.-<.
68 35 29 50 df df 85 d9 24 05 3b 67 d8 02 3f 18 ac 3d 1b 96 55 fd ee 64 b5 83 2e d3 5e fb 7b c0  h5)P....$.;g..?..=..U..d....^.{.
8a ad 59 7e 2f 73 c9 d6 fa 34 fc 00 83 db ea 79 bc 95 07 bc e5 cd 27 13 f2 85 f6 3e af 1f c9 b2  ..Y~/s...4.....y......'....>....
b0 69 39 6f ba 22 a5 78 92 8d 94 e7 86 08 8c 92 1b 4b b4 33 55 38 98 af 5d ed 56 06 50 a3 66 19  .i9o.".x.........K.3U8..].V.P.f.
69 c8 71 59 5c 01 eb 60 0d b5 b4 01 da 78 8d 22 63 1f f5 0a 18 86 cb 34 ca 75 56 d2 d2 c6 3f 63  i.qY\..`.....x."c......4.uV...?c
5d 62 99 8d b7 8b 66 b1 23 d4 bd 74 27 f6 ed 18 12 83 03 56 9c ea 1b 1f 45 1b 8c 3c 39 7d 2c ef  ]b....f.#..t'......V....E..<9},.
66 cd 97 b5 8a cb 27 fb 43 a8 ec 44 a5 57 98 e8 6c 33 22 b3 7b 4b 17 a5 49 4a 2a ec 14 32 a7 3d  f.....'.C..D.W..l3".{K..IJ*..2.=
1c db 2b 2b ae c9 7a a0 f5 bd 1a 71 30 44 37 15 34 c8 64 87 71 e9 15 c0 e3 2d d6 24 a1 33 cd cf  ..++..z....q0D7.4.d.q....-.$.3..
1f b3 a9 5a 00 93 7e ca 1a 5b a5 17 a0 1b 3c 73 4e f6 8f ae ae 55 a0 3f 93 b1 55 d6 1a 24 bc 7b  ...Z..~..[....<sN....U.?..U..$.{
0b 04 2c 94 a0 11 96 96 06 4d ba 85 65 57 74 c6 5b e0 9b 42 fe b0 5b c4 1e c0 2c 74 e9 6e 31 33  ..,......M..eWt.[..B..[...,t.n13
79 f6 2d 7b 36 37 8e 89 d7 10 cf 0a 9a 3c 9f f3 5d fa 9e dc 22 ba 81 9e aa f3 94 7b 71 f4 8e ea  y.-{67.......<..]..."......{q...
b0 59 40 55 4c 60 02 3c 48 9a aa 1b d1 e0 05 d1 49 49 91 d4 4d a9 dc 53 21 c3 d5 ea ca 73 34 05  .Y@UL`.<H.......II..M..S!....s4.
85 c1 e1 d5 77 2f ab b7 49 fa 06 7a d1 42 78 96 4b 70 27 e6 a8 2d 97 35 c2 ba b7 72 e5 3f ba cb  ....w/..I..z.Bx.Kp'..-.5...r.?..
14 de 60 f9 38 50 79 2f e2 79 b0 8b c6 aa 64 9c be 4e 0e 55 d5 b2 0e bd 13 5a 01 a7 36 24 a0 e8  ..`.8Py/.y....d..N.U.....Z..6$..
1e ea 70 79 27 58 db 02 31 2f 6f 40 5c 32 57 70 cf 8b 57 ac da 53 10 f9 dc 0f 69 5b 79 c6 80 8d  ..py'X..1/o@\2Wp..W..S....i[y...
54 34 2d d3 ec 14 ea 7c 63 c5 ea cb 63 a3 f3 13 35 20 30 4a 46 e6 89 f0 9b 69 2f 6c 43 c8 85 8f  T4-....|c...c...5 0JF....i/lC...
f7 e9 ec 45 ae 1f b1 46 f3 e8 81 02 7f 0d 7a 28 cf 79 08 0d 2b a5 24 6c 6a 38 f1 2f 61 b8 c4 d3  ...E...F......z(.y..+.$lj8./a...
7d c8 00 fa 1d a0 b8 11 df 89 df 48 34 ea 16 a6 06 e1 98 cb cc c0 ba 8c cf 42 3b 25 96 2b 93 c5  }..........H4............B;%.+..
8b 3d f2 84 b3 26 89 82 78 39 93 0f 0e e9 c3 53 c4 a2 8d 1e 38 99 d9 81 76 a4 19 10 34 04 ff 21  .=...&..x9.....S....8...v...4..!
91 00 03 5e f9 2c 4b f7 50 5e b8 e7 dd 30 50 96 c8 d7 06 43 cd 22 25 7c d6 fb fc 63 a5 d4 68 7a  ...^.,K.P^...0P....C."%|...c..hz
3b a5 32 f7 ab 41 6c c9 26 55 6e 39 96 6b 4d 8e 32 0d 76 19 38 79 21 aa 83 4d b3 4a 1a e2 c8 bd  ;.2..Al.&Un9.kM.2.v.8y!..M.J....
b0 ea c9 b1 bf 65 5a 7e 68 cf 9f 4b 2c a6 b5 a8 40 1e 43 81 d6 15 7b 91 12 da 5a 21 95 f4 d8 1e  .....eZ~h..K,...@.C...{...Z!....
f0 59 c8 4a 25 6e 6c 02 ed ff fd d3 07 db 50 7b 57 28 43 5b 11 f4 60 59 fb b1 9b e7 39 06 2b 59  .Y.J%nl.......P{W(C[..`Y....9.+Y
ab 90 f4 a4 df 0c f9 76 4d 88 92 f0 d3 5b b3 3b 16 fa f9 7b 0b b2 1d c1 5c a7 95 73 a5 5c fd 98  .......vM....[.;...{....\..s.\..
d5 c8 ed 95 91 d9 2b b2 35 fb ae 16 fa ba b6 4e 67 1d 7f 4a 8b 64 49 f5 8a c4 a5 0f c9 37 c9 9e  ......+.5......Ng..J.dI......7..
05 59 30 e1 75 32 81 b4 db 79 23 d1 c1 8e a0 e9 5f f6 c9 43 f7 71 fb 60 07 1f 5e fa 03 a0 9f 6a  .Y0.u2...y#....._..C.q.`..^....j
8d a4 80 03 51 fe 3c 2a 09 35 f9 ba bb fa 67 2c 4e 73 8e a0 2f 15 b4 d2 88 b8 ef ea c2 7f 9e 33  ....Q.<*.5....g,Ns../..........3
3f 1d 4e f6 a7 d5 60 e2 96 5b 95 cf 95 73 af bd 2f 12 bd 03 07 59 f4 13 a6 26 99 84 14 5c ed 5a  ?.N...`..[...s../....Y...&...\.Z
0a ba 6e 2d 74 e9 e3 9b 69 a0 9b 04 73 45 42 a1 5f 02 cb df 44 84 da 41 e9 65 fb d8 fa f1 65 25  ..n-t...i...sEB._...D..A.e....e%
06 6c 04 8e 93 ac 69 3b cd ea 01 8a de d0 ed 21 69 10 21 0c 61 3e a6 13 78 e8 f9 ab 2c 66 29 23  .l....i;.......!i.!.a>..x...,f)#
21 55 ff f3 4e 33 52 cd bc 03 18 d4 7d 25 9a 86 f8 bf 4c 37 7e 97 40 16 5d 4a 4b af 2b a9 a8 32  !U..N3R.....}%....L7~.@.]JK.+..2
b1 8c 9d ed b4 9d a0 4a 89 c5 6c 6d b4 22 9a 4b 25 4a 8c 67 da 98 ed a9 bb fc 51 c5 33 8d f2 7a  .......J..lm.".K%J.g......Q.3..z
26 db 0b 92 7f 51 f5 2e 51 3b ef 5a e0 a5 98 b6 e4 19 59 c1 e6 b0 39 7a cd 17 e3 40 f7 e5 12 90  &....Q..Q;.Z......Y...9z...@....
59 e7 1d a3 89 2a a3 e7 79 8f 53 c4 cd 13 9a d0 fb 4e 35 be 36 9b 64 a0 38 89 0a b1 a9 87 b9 dc  Y....*..y.S......N5.6.d.8.......
a6 9a b0 05 1e cc ed fe 29 d9 65 1c 50 6d 35 09 84 f5 1f 78 f0 dd 9f 0f ac 46 9d 1c 44 9e 5e ea  ........).e.Pm5....x.....F..D.^.
da e8 88 38 1a 0d 61 03 60 1d ed 25 a3 15 dc 9c f9 a0 48 ce b1 b3 32 b7 cb 0b 4a 9f b4 f6 36 49  ...8..a.`..%......H...2...J...6I
6b b1 ac d5 4b 09 6f bd 90 8d c1 19 1d 2b 92 79 b7 5f 8c e5 4b 91 a9 aa 91 50 f1 fa ae c5 78 af  k...K.o......+.y._..K....P....x.
3c e4 24 dd 8c e9 b8 34 f3 5f 62 fb 78 d2 51 1c 58 29 27 ef 3b 0f 52 08 8f c1 1e d1 9e 04 64 1d  <.$....4._b.x.Q.X)'.;.R.......d.
a1 04 d5 00 1d 66 9f d5 13 90 3b a5 2b 71 64 12 31 43 6f 99 03 f3 34 dc 19 b4 66 5a a4 79 fe de  .....f....;.+qd.1Co...4...fZ.y..
ba 59 d2 87 a9 37 4d d5 e1 6f 28 18 5a cd b8 4b 73 41 05 3e 8b 53 d2 43 fe de 64 3f c3 20 d6 ea  .Y...7M..o(.Z..KsA.>.S.C..d?. ..
ef cb 9f 1b 06 f3 f0 22 24 cf a7 27 c2 ac 5c 14 11 73 08 7e 5b 01 23 86 4d 40 83 f8 6d bc 42 9a  ......."$..'..\..s.~[.#.M@..m.B.
c1 bc 3e 71 f8 94 62 bc a6 19 7b eb c7 b9 1c bd 8b 7f 42 e7 37 3d bb 93 df ba f1 1d 5e 86 12 74  ..>q..b...{.......B.7=......^..t
ce 91 4c e5 9d 93 4b 62 c2 7f cc a1 71 f2 0f 75 7f 6a 77 13 c5 2c eb 6d 5d 83 36 1a 2c 86 7a 5d  ..L...Kb....q..u.jw..,.m].6.,.z]
ec 45 b6 2b d9 35 e5 ea 6b 02 28 b5 74 bd 05 27 3f 45 8d c3 07 73 68 f8 38 c0 ca 89 bc 36 6a c8  .E.+.5..k.(.t..'?E...sh.8....6j.
6e f7 14 2d d9 01 8b b0 d2 09 4c 38 80 a4 23 60 37 59 d7 25 18 fc df a1 a8 e2 ec 49 7b 58 23 00  n..-......L8..#`7Y.%.......I{X#.
37 24 51 a1 6f 19 34 c6 b7 2b d7 4d 12 30 5a 97 2a 1e 3c 22 54 16 3c 3d bd 28 b6 fa a4 81 34 f6  7$Q.o.4..+.M.0Z.*.<"T.<=.(....4.
4c 4b 77 36 aa f6 85 01 dd d9 86 db 0c 6f 52 47 68 c7 82 f2 38 ff 64 2b d1 79 f2 9e 1d b6 73 b6  LKw6.........oRGh...8.d+.y....s.
0f b3 97 23 4b 16 46 ef 1b d3 42 33 98 97 64 7a 27 53 57 77 92 e4 ba a1 05 99 d2 93 f9 e4 cd d2  ...#K.F...B3..dz'SWw............
c1 03 6a ca 16 fb 06 83 2b ed f1 2d 77 63 72 b7 c4 8b e8 41 83 a3 f3 29 0d 23 ff 96 e8 e4 d3 06  ..j.....+..-wcr....A...).#......
da b0 c2 15 bd b2 49 3c 61 88 9e 0b 9b 39 5f 4f 8b 8d e1 39 2a b7 12 7d bc 0a 49 ac 7a be be a1  ......I<a....9_O...9*..}..I.z...
0e 54 15 cb 07 29 04 47 f4 c7 d7 5c eb 8a 7e a9 06 ee 0f b3 39 33 cf 15 00 2c 2d 37 68 0c 35 a4  .T...).G...\..~.....93...,-7h.5.
b7 01 dc c5 7b 67 00 14 27 00 db 2d 09 21 76 5b 00 a6 6e 37 9c f3 17 75 32 e1 c5 da b2 0a a3 7c  ....{g..'..-.!v[..n7...u2......|
08 1f dd 28 0e 0c 9a 9d 64 bc 9a 3d c7 90 c7 22 e8 62 00 b5 fa f3 d4 3a 23 5a 0d 7b c9 a4 cb fc  ...(....d..=...".b.....:#Z.{....
c0 44 7f 3b 90 d5 ba 10 e9 16 d4 c8 2c 6c cb c0 9b de 7c 20 76 6c e3 70 d4 72 00 63 01 2e c5 25  .D.;........,l....| vl.p.r.c...%
b1 39 43 6e 8e 37 c4 c6 37 5b da 46 c0 69 ee 54 ae 1c 6f 27 15 f3 7a 76 8c 68 c1 fd 63 db 41 bc  .9Cn.7..7[.F.i.T..o'..zv.h..c.A.
b4 e2 a0 da bc 87 d8 ba d0 03 90 4b 4d dd 3d ea 30 02 7b 77 f6 73 18 c9 49 fc 4e 91 28 09 90 b1  ...........KM.=.0.{w.s..I.N.(...
94 b2 7e 12 31 a6 44 dd d9 9e 2f a9 b1 7b ac 4b be ab e2 a7 88 69 00 26 a8 0e c9 56 52 a7 0f 89  ..~.1.D.../..{.K.....i.&...VR...
68 e6 06 84 f9 3a 89 57 ee a3 df d4 9b 3a 22 21 23 6e d1 1f 74 9d af 3b 2d 6d a3 40 c2 7b bb 9d  h....:.W.....:"!#n..t..;-m.@.{..
1e bc c2 86 c4 48 b7 43 4f 9d 18 bd ae a3 90 b7 b5 1c 75 8a 7a 4e ad 6d ba 41 c0 f0 bc 64 c9 22  .....H.CO.........u.zN.m.A...d."
1c 1e 89 0b ef f0 49 74 10 c0 b0 6b 76 e1 1d d1 e6 e6 2a 08 63 52 2c aa 54 a3 c5 5e 7f b7 e5 3e  ......It...kv.....*.cR,.T..^...>
87 23 48 cb 05 17 a8 95 9b 0f bc 83 39 2c 85 ec 98 eb d2 6c a8 10 c5 fe 32 2f 6a 67 38 b3 9b 54  .#H.........9,.....l....2/jg8..T
73 64 d6 87 72 f1 4c 39 ae d4 cc 38 da 1e d5 c4 82 b7 70 6e 16 1e 6e b9 d4 af d3 67 e6 1e ba a7  sd..r.L9...8......pn..n....g....
a0 10 84 d2 24 9f 45 7c 1e b8 54 3c a8 4c e3 a4 db f1 a8 91 a7 8b 37 92 5a 61 b0 50 18 d9 c3 68  ....$.E|..T<.L........7.Za.P...h
6f 6b 7d 8b e5 ae 66 68 4d 4c f4 3d 26 61 86 79 af cd c0 49 2f 34 f4 b3 2e ad f8 22 b6 67 d4 b1  ok}...fhML.=&a.y...I/4.....".g..
b2 63 0e e2 da 56 0f ff 84 76 15 3c b5 ce ca c1 33 c4 ea 4b 3c 2b fa ee 3c 48 c7 fa 44 aa 20 11  .c...V...v.<....3..K<+..<H..D. .
34 54 5b 8b f5 46 b0 12 14 25 2b b5 b3 f1 19 6d 12 a9 a8 c8 5c 53 9e db 9b 80 e5 d5 c6 e1 b4 e4  4T[..F...%+....m....\S..........
90 40 12 6e b2 bd 06 83 36 a2 1d 7f 1f 01 4b c2 49 b4 29 70 d0 94 ad 3a a0 15 59 27 25 6d b1 c5  .@.n....6.....K.I.)p...:..Y'%m..
cd 65 c6 85 fb 49 75 7a 9a 7d 74 66 46 64 51 48 26 60 cb e4 c5 f3 e1 48 5b 6a 24 48 50 a0 df a4  .e...Iuz.}tfFdQH&`.....H[j$HP...
07 fc af 6b bd 72 4b c3 8e 90 80 07 93 c8 bf 00 fe f4 82 3b c1 cb 16 e7 90 20 d9 42 31 71 43 02  ...k.rK............;..... .B1qC.
22 46 65 9d 2e 41 89 5e 93 0b a3 6b be 9f ae f0 0f 3e 02 fb 4f 48 d7 bd 16 97 47 d7 5f 99 7f 2d  "Fe..A.^...k.....>..OH....G._..-
bc 12 69 56 ce 38 32 9d 91 95 b4 55 7d df 8a 57 a1 6e b3 46 a0 9f d3 99 7b 30 d0 29 bf 33 99 c3  ..iV.82....U}..W.n.F....{0.).3..
f3 40 0b 89 6a 25 d9 cd 05 2c 8d f5 ad f4 c9 22 55 bd 28 a1 b9 dd 4a d3 85 a7 d9 ce 53 e9 bd 3c  .@..j%...,....."U.(...J.....S..<
ce 17 72 9d a4 fb 90 5a cf 51 19 c4 cd f5 7a 9f 5b 89 62 53 a6 5b a9 55 70 d9 a6 13 ac 19 89 9e  ..r....Z.Q....z.[.bS.[.Up.......
f1 2f 83 f1 d8 0b 8d be 88 7d 03 f1 e1 80 8f 5d 38 3e d9 fd 07 a8 0d d1 3c 9b f2 96 b6 9f 08 e8  ./.......}.....]8>......<.......
54 e4 7f 0c 67 2a ca ac b8 15 cb 58 4a a2 a1 a6 b5 e7 69 b2 e7 c4 0d ba 51 93 30 7c a0 8c 3d 36  T...g*.....XJ.....i.....Q.0|..=6
8e e7 ae ee 5c 34 bf f8 c3 cf 4b c1 51 ae 61 af bb 01 30 08 5d 0e d2 d0 21 42 f3 f8 ac ec 3c 60  ....\4....K.Q.a...0.]...!B....<`
23 10 40 09 77 b1 29 43 44 20 02 90 b6 85 cf cd 9d 36 fe ab 9a f9 28 07 84 7f 82 5b c3 39 7f 8b  #.@.w.)CD .......6....(....[.9..
74 f4 8c 60 84 8a ab 26 22 f6 92 4a de bb d5 21 ba 36 45 22 82 44 12 7f 83 6c 8e f7 4b 4c aa eb  t..`...&"..J...!.6E".D...l..KL..
03 8a 37 fd cd 25 3a a1 95 d3 b1 ca 96 22 12 19 c8 4c 10 02 16 8a 4e 30 87 b6 b1 4c 85 28 32 d9  ..7..%:......"...L....N0...L.(2.
fc 5e d8 96 20 13 84 62 4d ab 25 05 e4 ce 91 26 6a e3 ae 81 d4 64 cc ce cb 70 66 2b 25 20 8e e7  .^.. ..bM.%....&j....d...pf+% ..
5f cf 99 cf 1c 97 d0 e6 e9 66 47 3f c9 ab 7f 00 36 9a ec e3 7f 2d 89 ba a7 49 d4 4f ac b6 a4 2f  _........fG?....6....-...I.O.../
e5 d3 dc a3 fa 90 16 93 1d 68 7c e7 05 3d 26 d1 93 96 c7 d0 7b 7b b6 73 5f 10 11 64 36 3c 6f 41  .........h|..=&.....{{.s_..d6<oA
fe 40 da 64 9f 31 01 48 fc 1c 05 52 44 75 80 a9 ab b7 5a 31 cb 37 9e 7f 57 35 7c 1c a6 b6 91 0a  .@.d.1.H...RDu....Z1.7..W5|.....
43 33 5e e2 20 4a be db 4c 69 8a 7a 79 2f e0 4b a8 fd 40 cc f0 cd 82 72 c7 50 a0 ca cc 88 9c fa  C3^. J..Li.zy/.K..@....r.P......
04 51 5a 93 bc 80 d5 ce 11 05 0e 7e dd ee 30 12 74 6c ab 30 3c 5c 17 bb 13 cc f8 47 c2 78 96 76  .QZ........~..0.tl.0<\.....G.x.v
dd 2c 35 54 e8 d1 c7 dd c8 93 99 55 21 45 54 c2 95 e9 a2 e6 0e ed 4f 61 2a 80 2f 25 0a 7e f2 e1  .,5T.......U!ET.......Oa*./%.~..
5e 6a 17 0d aa 4e 68 3d ce e0 eb 7a 30 8e 15 11 9f 3c c0 48 25 c0 34 24 96 19 20 f3 ea a7 9a 23  ^j...Nh=...z0....<.H%.4$.. ....#
87 1c 4b d3 41 86 10 8d 80 40 4a 00 da be 0e 14 f1 24 8a 0c 9d d7 b9 64 54 b5 a8 44 aa 11 7e c1  ..K.A....@J......$.....dT..D..~.
3f df b9 95 9a 58 b6 23 03 9b ea 23 a0 17 c8 eb 8f 9e 1c 33 bc 99 4d b5 97 d1 af a7 44 63 ad 9f  ?....X.#...#.......3..M.....Dc..
c5 82 29 c9 8b 9c 19 e1 0d 0a 1b fe fd 48 98 c8 35 e5 8e 48 97 99 db fd c3 0d ac 0d 07 0b 8f 11  ..)..........H..5..H............
c0 37 ca 50 a0 90 d9 2d 7f a4 5d 71 04 08 06 0a 8f f5 a4 a9 6a 52 e1 5c 31 e7 4a b0 ec 4c a7 65  .7.P...-..]q........jR.\1.J..L.e
0f bb 65 37 88 00 18 76 34 d3 b9 37 8d f6 8f 4a 98 72 9a aa 45 ad fc 1b 57 63 52 ee ae 07 81 fc  ..e7...v4..7...J.r..E...WcR.....
12 ac b0 63 6d 7b a2 2f 24 b0 bb fb 7b 51 e2 38 c4 89 d9 09 7a fc e0 58 25 e8 dc b4 13 bc d3 61  ...cm{./$...{Q.8....z..X%......a
2a c5 42 1a 40 ea 6a c7 9a fd 91 d9 e4 62 dd 2a 20 f4 f7 6a dc 6a a4 d6 32 96 4c c1 5a 66 00 15  *.B.@.j......b.* ..j.j..2.L.Zf..
68 5f 37 b4 ca 9e 6a 44 2b ab 8c 44 76 56 76 c7 e5 d8 07 ac 4a e3 cb 85 84 ce 34 05 d1 68 63 a0  h_7...jD+..DvVv.....J.....4..hc.
aa d9 e4 d9 c2 84 e5 5b 3f 7c ea 6b 5b 38 1a 75 ad 59 87 4b c4 0a 49 6e 14 9e c2 4b 76 52 fc d3  .......[?|.k[8.u.Y.K..In...KvR..
fb 4e 0e 0f 89 66 a0 86 47 cd 6c 41 b0 39 7b ac d3 c5 a3 36 10 21 b4 88 65 83 a7 58 68 85 76 92  .N...f..G.lA.9{....6.!..e..Xh.v.
aa 81 0a 8e d9 3a 7e ab 21 d6 62 24 5f 62 3b 66 15 7c 3f ad 11 83 c4 d4 09 4c 33 61 82 ef 18 cd  .....:~.!.b$_b;f.|?......L3a....
9e 74 7b ca 55 1f 5c 76 65 95 01 02 99 98 65 b6 26 20 d5 32 68 c7 74 c1 0b 8b 16 32 38 87 47 cd  .t{.U.\ve.....e.& .2h.t....28.G.
f3 b3 d0 96 ce 33 7c e8 bd 85 05 25 a9 5c d0 d1 9d 89 6c dc 36 aa a5 89 d4 22 f0 32 2e 74 2d ce  .....3|....%.\....l.6....".2.t-.
c3 eb 6b 13 4f 6c 96 6e 60 43 43 5e 19 e2 af dc c8 bd e0 5c ee 64 82 45 bc 5a 5c 75 bd 34 8d df  ..k.Ol.n`CC^.......\.d.E.Z\u.4..
f0 51 d2 73 82 ba 75 cd 73 fd 28 d7 a3 18 cc 0a 43 8c 33 f7 45 5d 30 5f 3c 3b 41 ab a7 10 3f 98  .Q.s..u.s.(.....C.3.E]0_<;A...?.
00 e2 af 08 0b 75 a8 bd 16 a7 b8 78 72 9d f2 5f de 3a ad 7f 34 47 da 2d 26 36 6b 8e 6c 7d bc 5c  .....u.....xr.._.:..4G.-&6k.l}.\
da db 17 e7 76 46 6e f6 8a e0 a2 03 63 bf 79 09 ef 1e 35 62 5e 66 37 6f de 89 a3 1c 46 e1 be 4b  ....vFn.....c.y...5b^f7o....F..K
31 8f 5f ee 4b 50 22 ed 1a 03 f0 a6 b9 4a 3f 64 93 50 2f c0 8f 44 fb d5 66 bc d5 b4 c9 6b c1 ba  1._.KP"......J?d.P/..D..f....k..
c3 8a 6e 0a 7a af 4c f5 2f 3f ff fa d5 99 cc                                                     ..n.z.L./?.....
.ATOM section ended  {0x14000b000-0x14000c5ef}

.extern section started  {0x14000c5f0-0x14000c6a0}
extern uint32_t CheckMenuItem(HMENU hMenu, uint32_t uIDCheckItem, uint32_t uCheck)
extern BOOL EnableMenuItem(HMENU hMenu, uint32_t uIDEnableItem, enum MENU_ITEM_FLAGS uEnable)
extern enum WIN32_ERROR GetLastError()
extern HMENU GetMenu(HWND hWnd)
extern uint32_t GetMenuItemID(HMENU hMenu, int32_t nPos)
extern HANDLE GetProcessHeap()
extern HMENU GetSystemMenu(HWND hWnd, BOOL bRevert)
extern uint32_t GetWindowContextHelpId(HWND param0)
extern void* HeapAlloc(HANDLE hHeap, enum HEAP_FLAGS dwFlags, uint64_t dwBytes)
extern BOOL HeapFree(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem)
extern uint64_t HeapSize(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem)
extern BOOL MessageBeep(enum MESSAGEBOX_STYLE uType)
extern enum MESSAGEBOX_RESULT MessageBoxA(HWND hWnd, PSTR lpText, PSTR lpCaption, enum MESSAGEBOX_STYLE uType)
extern enum MESSAGEBOX_RESULT MessageBoxW(HWND hWnd, PWSTR lpText, PWSTR lpCaption, enum MESSAGEBOX_STYLE uType)
extern void ReleaseSRWLockExclusive(SRWLOCK* SRWLock)
extern void ReleaseSRWLockShared(SRWLOCK* SRWLock)
extern uint32_t SetCriticalSectionSpinCount(CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount)
extern LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extern BOOLEAN TryAcquireSRWLockExclusive(SRWLOCK* SRWLock)
extern int32_t UnhandledExceptionFilter(EXCEPTION_POINTERS* ExceptionInfo)
extern BOOL UpdateWindow(HWND hWnd)
extern void WakeAllConditionVariable(CONDITION_VARIABLE* ConditionVariable)
.extern section ended  {0x14000c5f0-0x14000c6a0}

.synthetic_builtins section started  {0x14000c6a0-0x14000c6c8}
extern void* __builtin_memcpy(void* dest, void const* src, uint64_t n)
extern void* __builtin_memset(void* s, int32_t c, uint64_t n)
extern char* __builtin_strcpy(char* dest, char const* src)
extern char* __builtin_strncpy(char* dest, char const* src, uint64_t n)
extern wchar16* __builtin_wcscpy(wchar16* dest, wchar16 const* src)
.synthetic_builtins section ended  {0x14000c6a0-0x14000c6c8}

